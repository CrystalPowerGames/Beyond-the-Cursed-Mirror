.git/hooks/fsmonitor-watchman.sample:	my $pid = open2(\*CHLD_OUT, \*CHLD_IN, 'watchman -j --no-pretty')
.git/hooks/fsmonitor-watchman.sample:	if ($retry > 0 and $o->{error} and $o->{error} =~ m/unable to resolve root .* directory (.*) is not watched/) {
.git/hooks/fsmonitor-watchman.sample:	die "Watchman: $o->{error}.\n" .
.git/hooks/fsmonitor-watchman.sample:	    "Falling back to scanning...\n" if $o->{error};
.git/hooks/fsmonitor-watchman.sample:	print @{$o->{files}};
.git/hooks/pre-rebase.sample:		   o---o---o---o---o---o---o---o---o---o "next"
.git/hooks/pre-rebase.sample:    ---o---o---o---o---o---o---o---o---o---o---o "master"
Binary file .git/index matches
Binary file .git/objects/00/69373fe4ea87f66e6bcab048357a6bb2b6044b matches
Binary file .git/objects/03/10219a45214773b2606a4f936693f1baef871b matches
Binary file .git/objects/04/fbdafb0a62bcc2d64ed0487ae3349f40eb5d94 matches
Binary file .git/objects/05/329aa04d6e50dbba72ff30286cd9bbc84eab4f matches
Binary file .git/objects/08/fe471ed2e162e373073cd29efacf6fcaa94d03 matches
Binary file .git/objects/08/ff2c61cf8ecced83b36b0d780cd5ccf921a18f matches
Binary file .git/objects/09/9106314092c3a6e03848add1482685951e9fc8 matches
Binary file .git/objects/0b/0e05a5aeb58959e108293d95410ea43c74802d matches
Binary file .git/objects/0b/ed574bec556321ecaed16aff4e842cfbccdda6 matches
Binary file .git/objects/0c/1cb4e8790cef6eac92ef8062379e6757295d81 matches
Binary file .git/objects/0c/58b250d56d2b78de367b6504c9f435df29575a matches
Binary file .git/objects/10/8e6a7ab41dd0f290582f837ece6751bd8d238d matches
Binary file .git/objects/10/a975b48c6c0ee6c19960d753959a99b87aee32 matches
Binary file .git/objects/10/eae3935836aa669b1660cec43c208411f4270f matches
Binary file .git/objects/11/163adce3037f6999f3ca2703374114f83b8146 matches
Binary file .git/objects/13/6503d9b9dcb6f81ba3c2d3a6059eb78e65f377 matches
Binary file .git/objects/18/b2133e8a31cb435ca0c3bfb9c057bfd0c09cda matches
Binary file .git/objects/18/c59230c5e13d16d30c658f03707e9999e33fb3 matches
Binary file .git/objects/1a/dd5e5f207015ab37948287103c359ccef52cb4 matches
Binary file .git/objects/1f/3b0d0afb4b5e4205613d6042efe5a790843306 matches
Binary file .git/objects/1f/84e012356c8048d7e7dce68cd156b445a887c9 matches
Binary file .git/objects/22/2da48599ef93c9cdc6ce17e4fbf13979a7396d matches
Binary file .git/objects/23/7a71e8dda2a3940f5420ae3a9606891222b15f matches
Binary file .git/objects/24/76c9b62d84a59b6ff3cd610d54b870110a4e7e matches
Binary file .git/objects/24/90f99461640fcabec5e5884b88dededc3bcf93 matches
Binary file .git/objects/24/addf9a8042fef768bc957ac69d6825a3a0635c matches
Binary file .git/objects/2e/0beadb4c9c403179720eadadef26dd7bb02e73 matches
Binary file .git/objects/33/7242c92e6693b41ad78d914c9a876e299eed92 matches
Binary file .git/objects/33/b9c9cba4aa2c0ce567a043429dadb7133593e3 matches
Binary file .git/objects/34/12308070d388cfa5d9dfc67b9111f3a8f43493 matches
Binary file .git/objects/34/8ca5b38d34647b06569a33bf5a4de94b7ccc24 matches
Binary file .git/objects/34/caa1b0a579c2f016b889d479642be1c2c8580f matches
Binary file .git/objects/37/4b11333b5beb35cf33c2b55c3d7da55590f410 matches
Binary file .git/objects/37/88733778d7ae2d0572b6ab772b2c67ba5bf2de matches
Binary file .git/objects/37/c45ec649bf70a7d56aa8d34ef695fe711fb252 matches
Binary file .git/objects/3a/a94aa0a8272b7928571e13582c15f6a6947c77 matches
Binary file .git/objects/3b/b28bc3e03117d79cea507728fb3b3fb97edcb5 matches
Binary file .git/objects/3d/91b089e49999318d33315401711b2752530ff9 matches
Binary file .git/objects/3e/abaa57f831de316f397260a5b42d16b8b4ee4d matches
Binary file .git/objects/40/c263bba482e6b3e4685c15895e4ebfe116fa1a matches
Binary file .git/objects/43/4bf0c61f3e679362b78f2b1480fb1a8a931a0a matches
Binary file .git/objects/43/b68b03b0d9bd14e5337810c9c028257d12b24b matches
Binary file .git/objects/44/547ad3755ccc41046e5e2cd452b732b3241b9e matches
Binary file .git/objects/48/02c9b0f136e55819b3bdbde9fcc712d22325b2 matches
Binary file .git/objects/48/1a2f7e665013732dc79d3189553763db306eed matches
Binary file .git/objects/4a/8dec0c0b1b7029291eaed1059968eea0a291c4 matches
Binary file .git/objects/4a/9effcfb5ed60b392e9bc422a4e66b808fa4fde matches
Binary file .git/objects/4d/4cfc19ebb7113f66339faec0f96c3e3c5eb55a matches
Binary file .git/objects/4e/1aa8d6a222ae43ff974f44d698a53279e5eec0 matches
Binary file .git/objects/4f/8cfbe2114483c541a2b2f69994ea666197f5da matches
Binary file .git/objects/4f/95957f97c3588b97ecbffdcbe50290d2bfc752 matches
Binary file .git/objects/50/795b3fdb78f15e2a031b2a0c846d8e8b26ff39 matches
Binary file .git/objects/51/bc47c85119eb6868cfe83f45f855c012d5ba0c matches
Binary file .git/objects/53/ccbb6bb2f8d4166441d1111d2d8c281b7cf179 matches
Binary file .git/objects/54/32a404a7790a54ad8cf67ca3730430e5e9ff1f matches
Binary file .git/objects/57/a9a3bd5d5eeb2a2a7da02d1c5ffd84b5d381e1 matches
Binary file .git/objects/5a/49c70e11ac72ae88403c0beaa5ab13e2edfe49 matches
Binary file .git/objects/5a/507f2e12750fd88d5f10dd5cc70dfcf542ccc7 matches
Binary file .git/objects/5a/7284d9472be11e50f0d966c62973ae6a6f6d21 matches
Binary file .git/objects/5a/7cb512b451c2d983303d9ef8b87439fbd85f2e matches
Binary file .git/objects/5a/b1e8d416d21daf42958a15599f8c2748dd7699 matches
Binary file .git/objects/5e/2ec8932d8b387e2fd8d7e4881d82fc73b74f15 matches
Binary file .git/objects/68/a98757aed7efa2ef04cccc90d4277ea8404c4a matches
Binary file .git/objects/69/29e39d916786c59252f38ba15eac96a3b97867 matches
Binary file .git/objects/69/b6dfa350ae2519ad42a0eba38195387751ee01 matches
Binary file .git/objects/6b/c812fad7b6cfcbd771570a157b23567ff94fd3 matches
Binary file .git/objects/6e/8aaf0f1dcef59f613d01fad87254fa2d54bd74 matches
Binary file .git/objects/71/01707b2e80e4316d84c74a984816d6af5948ee matches
Binary file .git/objects/76/8b0f49a6aa1e5a60788f279155e7b5bd6f31b6 matches
Binary file .git/objects/77/66d8b12709fdbcd489f05b3be760bb574091a0 matches
Binary file .git/objects/79/cc22a79b68fb34c934b708e684d041f8f90556 matches
Binary file .git/objects/79/f35effa3d1892f1da52da96e02216d8fcee562 matches
Binary file .git/objects/7d/994b1d271eb5be9947fe33e8943f3727af9e9d matches
Binary file .git/objects/80/2ef1793a010ba4d669313151c75dae22640370 matches
Binary file .git/objects/81/877c9bb649f7f0db472de57c130b3a4e8411b2 matches
Binary file .git/objects/81/f000c2a3528667575ca63167b900afd99aef82 matches
Binary file .git/objects/8c/0e217fedd0188b0bcd43bf01fca7d71dd20ca0 matches
Binary file .git/objects/8c/c6d30b2d465aca16333ea6d5a71a587e3f569b matches
Binary file .git/objects/90/e22f525bf071be95d1a744b2d8cbe8fd1351b9 matches
Binary file .git/objects/91/53943a7e4524436f3a9681654096fabfc5e983 matches
Binary file .git/objects/98/c40eb9504c35ecca54e4aec5bbea698b941a27 matches
Binary file .git/objects/9f/8fe3982d158e485ae6641c5464416378a4ed00 matches
Binary file .git/objects/a3/93b728ccf63c2af5f1cc96052a85586385bbdb matches
Binary file .git/objects/a7/a6bdcb55a19999fe9969ccdc86fa5cdb7af18f matches
Binary file .git/objects/ad/cc8cb846c3fa2c3f4a73e10eff8a48aa9e8263 matches
Binary file .git/objects/ae/011c8e2a89d56206098b45fda03e3a08cfe99f matches
Binary file .git/objects/af/0e21434cf4e676cbec794e1a9fca54f5bb7647 matches
Binary file .git/objects/b5/2fc75b12cbf8eb8dc637066f5b0d4c722f79bc matches
Binary file .git/objects/bb/4a6191e153b2a32bf37737843e139f03a871b3 matches
Binary file .git/objects/bb/fd2d1952dd5193c19180d0bbaafeb62b70d09f matches
Binary file .git/objects/bc/89c01664eabb87bf4f752b86e7b1a0a0667c79 matches
Binary file .git/objects/bf/1f3b4499a1c5de9c3a07c82e749c3a3c8847f7 matches
Binary file .git/objects/c1/057a9f4a8ef5d5c9a607a1fb4b652d994d125b matches
Binary file .git/objects/c3/47b9dd59feb3c2706c318cc246b1ed25e08ac8 matches
Binary file .git/objects/c3/cf409754806ed4cb7e8b068a9cf40238d2b9d2 matches
Binary file .git/objects/ca/22063ce3b29ea2f7256f6b07167863a1b8cbb1 matches
Binary file .git/objects/cd/5a09d9b06e8026dafa0e2303eee1ac50bdb3c5 matches
Binary file .git/objects/cd/933335905e6c034220ce2286557f30ed5b3cc7 matches
Binary file .git/objects/d0/1f0c715d901e14f04ebafbb48e6de095d28d42 matches
Binary file .git/objects/d1/440440780bcd0bf0706a8b091537f11689db99 matches
Binary file .git/objects/d1/a5d81aceae3bfa1a8c547f59659abeb32397c2 matches
Binary file .git/objects/d2/a806879c0308671181a1402feb48f4c70f2ec1 matches
Binary file .git/objects/d7/9738ada035c504714fb1f7b4684af0985180bc matches
Binary file .git/objects/d8/16199b44a8b474f87d7d20985dab91dbc8f217 matches
Binary file .git/objects/d8/d1eb3a3d2894e4d3ad59a765bfd1993ec63179 matches
Binary file .git/objects/dc/fa6dd49b784c52a1b88fcfd58e8415156d6542 matches
Binary file .git/objects/df/75d8e851946f3b8dd6a1c96309a93bb38754f3 matches
Binary file .git/objects/e0/dc51be73b067d06c3f9f4e1fac380062471893 matches
Binary file .git/objects/e3/04891c987a61953df2bdc7f203084db80252c3 matches
Binary file .git/objects/e7/23cff2a4ca1cbc796953973e261f730c21b748 matches
Binary file .git/objects/e7/668d3d098e5513e938c3d7e2391caeed77e1cd matches
Binary file .git/objects/ea/938ffd5e5744bafc93f2c7bd11c8294254ee55 matches
Binary file .git/objects/ec/745c27f18d5eb01ee6f1e49d6da1b535c55a7b matches
Binary file .git/objects/ed/a993fb565e8a73eea761761288068eb56e2aee matches
Binary file .git/objects/ef/56ab26e21786b110ce22560fdb3d24982f196d matches
Binary file .git/objects/ef/92330c96ce955bb5e4fad7a39d4df619e6a1f2 matches
Binary file .git/objects/f0/91bea83123ab7166cc195bcc8cb9c07ef4625d matches
Binary file .git/objects/f1/b4e83d41d9e0cecec903a162dba7e01fa85f30 matches
Binary file .git/objects/fa/8344dd7e049bf70afd0968c25fe80507252497 matches
Binary file .git/objects/fa/c545b94f8af478f23516a386cfe307cf08fda5 matches
Binary file .git/objects/fb/842c40517d2700a4fd76c29a8085b64c12ef77 matches
Binary file .git/objects/fb/c304ade198c94298573708de278facd5c63767 matches
Binary file .git/objects/fd/804105394def18cf193a1e0d6b20034ce7868c matches
Binary file .git/objects/pack/pack-55f85006d3b1ea4b8e5edb7957a6236a5dad688e.idx matches
Binary file .git/objects/pack/pack-55f85006d3b1ea4b8e5edb7957a6236a5dad688e.pack matches
Binary file .git/objects/pack/pack-6e17b944ed3d6012d0669108de18c8e0ad0f1a5d.pack matches
Binary file .git/objects/pack/pack-c2448ee213d8efc77a4e8bc4876012e98df6ed80.idx matches
Binary file .git/objects/pack/pack-c2448ee213d8efc77a4e8bc4876012e98df6ed80.pack matches
Binary file .git/objects/pack/pack-fd76711f47ed1dbd517c27d0c75d3e5c71d45fb7.idx matches
Binary file .git/objects/pack/pack-fd76711f47ed1dbd517c27d0c75d3e5c71d45fb7.pack matches
Binary file actors/amp/balls.rgba16.png matches
Binary file actors/amp/comit_stans_custom.rgba16.png matches
Binary file actors/amp/output-1267_custom.i8.png matches
Binary file actors/amp/output-131_custom.i8.png matches
Binary file actors/amp/output-1883_custom.i8.png matches
Binary file actors/amp/output-1911_custom.i8.png matches
Binary file actors/amp/output-1959_custom.i8.png matches
Binary file actors/amp/output-1985_custom.i8.png matches
Binary file actors/amp/output-2031_custom.i8.png matches
Binary file actors/amp/output-2347_custom.i8.png matches
Binary file actors/amp/output-2882_custom.i8.png matches
Binary file actors/amp/output-2919_custom.i8.png matches
Binary file actors/amp/output-2959_custom.i8.png matches
Binary file actors/amp/output-3137_custom.i8.png matches
Binary file actors/amp/output-3257_custom.i8.png matches
Binary file actors/amp/output-3289_custom.i8.png matches
Binary file actors/amp/output-3443_custom.i8.png matches
Binary file actors/amp/output-3457_custom.i8.png matches
Binary file actors/amp/output-3913_custom.i8.png matches
Binary file actors/amp/output-4105_custom.i8.png matches
Binary file actors/amp/output-4598_custom.i8.png matches
Binary file actors/amp/output-464_custom.i8.png matches
Binary file actors/amp/output-4833_custom.i8.png matches
Binary file actors/amp/output-489_custom.i8.png matches
Binary file actors/amp/output-4940_custom.i8.png matches
Binary file actors/amp/output-4979_custom.i8.png matches
Binary file actors/amp/output-5001_custom.i8.png matches
Binary file actors/amp/output-5209_custom.i8.png matches
Binary file actors/amp/output-523_custom.i8.png matches
Binary file actors/amp/output-5449_custom.i8.png matches
Binary file actors/amp/output-5490_custom.i8.png matches
Binary file actors/amp/output-5618_custom.i8.png matches
Binary file actors/amp/output-5675_custom.i8.png matches
Binary file actors/amp/output-594_custom.i8.png matches
Binary file actors/amp/output-656_custom.i8.png matches
Binary file actors/amp/smmm_custom.rgba16.png matches
Binary file actors/amp/smq_ad_custom.rgba16.png matches
Binary file actors/mario/mario_metal.rgba16.png matches
Binary file actors/mario_cap/mario_cap_metal.rgba16.png matches
Binary file actors/thwomp/thwomp_surface.rgba16.png matches
Binary file actors/title/LowResTransscreen.rgba16.png matches
asm.txt:                if (geo != NULL && geo->type == GRAPH_NODE_TYPE_SCALE) {
asm.txt:                if (geo != NULL && geo->type == GRAPH_NODE_TYPE_SCALE) {
Binary file baserom.jp.z64 matches
Binary file baserom.us.z64 matches
better_extended_bounds.patch:         o->oPosX += o->oVelX;
better_extended_bounds.patch:         o->oPosZ += o->oVelZ;
better_extended_bounds.patch:         o->oVelY += o->oGravity; //! No terminal velocity
better_extended_bounds.patch:         o->oPosY += o->oVelY;
Binary file build/us/actors/amp/output-2673_custom.i8 matches
Binary file build/us/actors/amp/output-4330_custom.i8 matches
Binary file build/us/actors/amp/output-1654_custom.i8 matches
Binary file build/us/actors/amp/output-3894_custom.i8 matches
Binary file build/us/actors/amp/output-5549_custom.i8 matches
Binary file build/us/actors/common1.szp matches
Binary file build/us/actors/common1.szp.o matches
Binary file build/us/actors/group0.bin matches
Binary file build/us/actors/group0.elf matches
Binary file build/us/actors/group0.o matches
Binary file build/us/actors/group0.szp matches
Binary file build/us/actors/group0.szp.o matches
Binary file build/us/actors/group12.szp matches
Binary file build/us/actors/group12.szp.o matches
Binary file build/us/actors/group14.bin matches
Binary file build/us/actors/group14.elf matches
Binary file build/us/actors/group14.o matches
Binary file build/us/actors/group14.szp matches
Binary file build/us/actors/group14.szp.o matches
Binary file build/us/actors/group4.szp matches
Binary file build/us/actors/group4.szp.o matches
Binary file build/us/actors/group5.szp matches
Binary file build/us/actors/group5.szp.o matches
Binary file build/us/actors/group9.szp matches
Binary file build/us/actors/group9.szp.o matches
Binary file build/us/assets/mario_anim_data.o matches
Binary file build/us/bin/bidw_skybox.szp matches
Binary file build/us/bin/bidw_skybox.szp.o matches
Binary file build/us/bin/bitfs_skybox.szp matches
Binary file build/us/bin/bitfs_skybox.szp.o matches
Binary file build/us/bin/bits_skybox.szp matches
Binary file build/us/bin/bits_skybox.szp.o matches
Binary file build/us/bin/b_a/bad_apple_data.o matches
Binary file build/us/bin/ccm_skybox.szp matches
Binary file build/us/bin/ccm_skybox.szp.o matches
Binary file build/us/bin/clouds_skybox.szp matches
Binary file build/us/bin/clouds_skybox.szp.o matches
Binary file build/us/bin/cloud_floor_skybox.szp matches
Binary file build/us/bin/cloud_floor_skybox.szp.o matches
Binary file build/us/bin/inside.szp matches
Binary file build/us/bin/inside.szp.o matches
Binary file build/us/bin/mountain.szp matches
Binary file build/us/bin/mountain.szp.o matches
Binary file build/us/bin/outside.szp matches
Binary file build/us/bin/outside.szp.o matches
Binary file build/us/bin/sky.szp matches
Binary file build/us/bin/sky.szp.o matches
Binary file build/us/bin/spooky.szp matches
Binary file build/us/bin/spooky.szp.o matches
Binary file build/us/bin/ssl_skybox.szp matches
Binary file build/us/bin/ssl_skybox.szp.o matches
Binary file build/us/bin/water.szp matches
Binary file build/us/bin/water.szp.o matches
Binary file build/us/bin/water_skybox.szp matches
Binary file build/us/bin/water_skybox.szp.o matches
Binary file build/us/bin/wdw_skybox.szp matches
Binary file build/us/bin/wdw_skybox.szp.o matches
Binary file build/us/btcm.us.f3dzex.bin matches
Binary file build/us/btcm.us.f3dzex.elf matches
Binary file build/us/btcm.us.f3dzex.z64 matches
Binary file build/us/data/behavior_data.o matches
Binary file build/us/levels/bbh/leveldata.szp matches
Binary file build/us/levels/bbh/leveldata.szp.o matches
Binary file build/us/levels/bitdw/leveldata.bin matches
Binary file build/us/levels/bitdw/leveldata.elf matches
Binary file build/us/levels/bitdw/leveldata.o matches
Binary file build/us/levels/bitdw/leveldata.szp matches
Binary file build/us/levels/bitdw/leveldata.szp.o matches
Binary file build/us/levels/bitfs/leveldata.szp matches
Binary file build/us/levels/bitfs/leveldata.szp.o matches
Binary file build/us/levels/bits/leveldata.szp matches
Binary file build/us/levels/bits/leveldata.szp.o matches
Binary file build/us/levels/bob/leveldata.szp matches
Binary file build/us/levels/bob/leveldata.szp.o matches
Binary file build/us/levels/castle_courtyard/leveldata.szp matches
Binary file build/us/levels/castle_courtyard/leveldata.szp.o matches
Binary file build/us/levels/castle_inside/leveldata.szp matches
Binary file build/us/levels/castle_inside/leveldata.szp.o matches
Binary file build/us/levels/ccm/leveldata.bin matches
Binary file build/us/levels/ccm/leveldata.elf matches
Binary file build/us/levels/ccm/leveldata.o matches
Binary file build/us/levels/ccm/leveldata.szp matches
Binary file build/us/levels/ccm/leveldata.szp.o matches
Binary file build/us/levels/ddd/leveldata.szp matches
Binary file build/us/levels/ddd/leveldata.szp.o matches
Binary file build/us/levels/ending/leveldata.szp matches
Binary file build/us/levels/ending/leveldata.szp.o matches
Binary file build/us/levels/hmc/leveldata.szp matches
Binary file build/us/levels/hmc/leveldata.szp.o matches
Binary file build/us/levels/jrb/leveldata.szp matches
Binary file build/us/levels/jrb/leveldata.szp.o matches
Binary file build/us/levels/lll/leveldata.szp matches
Binary file build/us/levels/lll/leveldata.szp.o matches
Binary file build/us/levels/menu/leveldata.szp matches
Binary file build/us/levels/menu/leveldata.szp.o matches
Binary file build/us/levels/pss/leveldata.szp matches
Binary file build/us/levels/pss/leveldata.szp.o matches
Binary file build/us/levels/sl/leveldata.szp matches
Binary file build/us/levels/sl/leveldata.szp.o matches
Binary file build/us/levels/ssl/leveldata.szp matches
Binary file build/us/levels/ssl/leveldata.szp.o matches
Binary file build/us/levels/thi/leveldata.szp matches
Binary file build/us/levels/thi/leveldata.szp.o matches
Binary file build/us/levels/ttc/leveldata.szp matches
Binary file build/us/levels/ttc/leveldata.szp.o matches
Binary file build/us/levels/ttm/leveldata.szp matches
Binary file build/us/levels/ttm/leveldata.szp.o matches
Binary file build/us/levels/wdw/leveldata.szp matches
Binary file build/us/levels/wdw/leveldata.szp.o matches
Binary file build/us/sound/samples/sfx_mario_peach/00.aifc matches
Binary file build/us/sound/samples/streamed_audio/23_custom_bad_apple.aifc matches
Binary file build/us/sound/samples/streamed_audio/24_custom_bonearena.aifc matches
Binary file build/us/sound/sound_data.o matches
Binary file build/us/sound/sound_data.tbl matches
CHANGES:9.) Add -fno-zero-initialized-in-bss to GCC CFLAGS (#968)
diff.py:    "--no-show-branches",
diff.py:                "Warning: watch-mode (-w) enabled without auto-make (-m). You will have to run make manually. Ok? (Y/n) "
enhancements/motos_full.patch:+    return (o->oTimer > 45) || (o->oMoveFlags & OBJ_MOVE_HIT_EDGE);
enhancements/motos_full.patch:+    // return (cur_obj_rotate_yaw_toward(o->oAngleToMario, 0x200)) || (o->oDistanceToMario < 500.f)
enhancements/motos_full.patch:+    o->oParentRelativePosY = -30.f;
enhancements/motos_full.patch:+    o->oParentRelativePosX = -70.f; // Changed relative pos to make Mario fit in the hand better
enhancements/motos_full.patch:+    if (o->oChuckyaUnk88 == 1)
enhancements/motos_full.patch:+    o->oForwardVel = 0.f;
enhancements/motos_full.patch:+    o->oVelY = 0.f;
enhancements/motos_full.patch:+    if (o->oDistanceToMario < 500.f) {
enhancements/motos_full.patch:+        o->oAction = MOTOS_ACT_PLAYER_SEARCH;
enhancements/motos_full.patch:+    o->oForwardVel = 5.f; // Sped up (was 2.f)
enhancements/motos_full.patch:+    cur_obj_rotate_yaw_toward(o->oAngleToMario, 800); // Sped up (was 300)
enhancements/motos_full.patch:+    if (o->oInteractStatus & INT_STATUS_GRABBED_MARIO) {
enhancements/motos_full.patch:+        o->oAction = MOTOS_ACT_PLAYER_CARRY;
enhancements/motos_full.patch:+        o->oChuckyaUnk88 = 1;
enhancements/motos_full.patch:+            o->oAction = MOTOS_ACT_PLAYER_PITCH;
enhancements/motos_full.patch:+            o->oAction = MOTOS_ACT_CARRY_RUN;
enhancements/motos_full.patch:+    o->oForwardVel = 0.f;
enhancements/motos_full.patch:+        o->oChuckyaUnk88 = 2;
enhancements/motos_full.patch:+        o->numCollidedObjs = 10;
enhancements/motos_full.patch:+        o->oAction = MOTOS_ACT_WAIT;
enhancements/motos_full.patch:+        o->oInteractStatus &= (~INT_STATUS_GRABBED_MARIO);
enhancements/motos_full.patch:+    o->oForwardVel = 15.f; // Sped up (was 5.f)
enhancements/motos_full.patch:+        o->oAction = MOTOS_ACT_PLAYER_PITCH;
enhancements/motos_full.patch:+    if (o->oMoveFlags & OBJ_MOVE_LANDED) {
enhancements/motos_full.patch:+        o->oAction = MOTOS_ACT_RECOVER; // New action: recover (used to go straight back into wait)
enhancements/motos_full.patch:+    o->oForwardVel = 0.f;
enhancements/motos_full.patch:+    if (o->oSubAction == 0) {
enhancements/motos_full.patch:+        if (o->oTimer > 35)
enhancements/motos_full.patch:+            o->oSubAction++;
enhancements/motos_full.patch:+    } else if (o->oSubAction == 1) {
enhancements/motos_full.patch:+            o->oAction = MOTOS_ACT_WAIT;
enhancements/motos_full.patch:+        coin->oPosY = o->oPosY + 310.0f;
enhancements/motos_full.patch:+        coin->oMoveAngleYaw = (f32)(o->oFaceAngleYaw + 0x8000) + random_float() * 1024.0f;
enhancements/motos_full.patch:+    switch (o->oAction) {
enhancements/motos_full.patch:+    floorY = find_floor(o->oPosX, o->oPosY, o->oPosZ, &sObjFloor);
enhancements/motos_full.patch:+        if ((floorY + 1.f > o->oPosY) && (sObjFloor->type == SURFACE_BURNING)) {
enhancements/motos_full.patch:+            o->oAction = MOTOS_ACT_DEATH;
enhancements/motos_full.patch:+    o->oInteractionSubtype |= INT_SUBTYPE_GRABS_MARIO;
enhancements/motos_full.patch:+    switch (o->oHeldState) {
enhancements/motos_full.patch:+            if (o->oAction == MOTOS_ACT_DEATH)
enhancements/motos_full.patch:+    o->oInteractStatus = 0; // Added because it doesnt work without this, cmon Nintendo
enhancements/motos_full.patch:-    o->oGravity = 5.0f;
enhancements/motos_full.patch:+    o->oGravity = 3.0f;
enhancements/motos_full.patch:     o->oFriction = 1.0f;
enhancements/motos_full.patch:     o->oBuoyancy = 1.5f;
extended_bounds.patch:-        asFixedPoint = *t1++ * (1 << 16); //! float-to-integer conversion responsible for PU crashes
extended_bounds.patch:+        //asFixedPoint = *t1++ * (1 << 16); //! float-to-integer conversion responsible for PU crashes
extended_bounds.patch:+        asFixedPoint = *t1++ * 24576.0; //! float-to-integer conversion responsible for PU crashes
extended_bounds.patch:         o->oPosX += o->oVelX;
extended_bounds.patch:         o->oPosZ += o->oVelZ;
extended_bounds.patch:         o->oVelY += o->oGravity; //! No terminal velocity
extended_bounds.patch:         o->oPosY += o->oVelY;
include/mario_geo_switch_case_ids.h:/* Mario Geo-Switch-Case IDs */
include/object_constants.h:/* BBH Merry-Go-Round */
include/object_constants.h:    /* ((u16)(o->oBehParams >> 16) & 0x0300) >> 8 aka platform type */
include/object_fields.h:/* Merry-Go-Round */
include/object_fields.h:/* Merry-Go-Round Boo Manager */
include/PR/gbi.h: * The weird bit-ordering is for the micro-code: the lower byte
include/PR/os_vi.h:#define OS_VI_BIT_NONINTERLACE		0x0001          /* lo-res */
include/PR/os_vi.h:#define OS_VI_BIT_INTERLACE		0x0002          /* lo-res */
include/surface_terrains.h:#define SURFACE_INTANGIBLE                   0x0012 // Intangible (Separates BBH mansion from merry-go-round, for room usage)
Binary file levels/ending/cake.png matches
Binary file levels/wdw/0.rgba16.png matches
lib/src/osCreateThread.c:#pragma GCC diagnostic ignored "-Wpointer-to-int-cast"
Makefile:CPP       := cpp -P -Wno-trigraphs
Makefile:  CC_CFLAGS := -fno-builtin
Makefile:CC_CHECK_CFLAGS := -fsyntax-only -fsigned-char $(CC_CFLAGS) $(TARGET_CFLAGS) $(INCLUDE_CFLAGS) -std=gnu90 -Wall -Wextra -Wno-format-security -Wno-main -DNON_MATCHING -DAVOID_UB $(VERSION_CFLAGS) $(GRUCODE_CFLAGS)
Makefile:LDFLAGS := -T undefined_syms.txt -T $(BUILD_DIR)/$(LD_SCRIPT) -Map $(BUILD_DIR)/btcm.$(VERSION).map --no-check-sections $(SYMBOL_LINKING_FLAGS)
Makefile:  CFLAGS := -march=vr4300 -mfix4300 -mabi=32 -mno-shared -G 0 -mhard-float -fno-stack-protector -fno-common -fno-zero-initialized-in-bss -I include -I src/ -I $(BUILD_DIR)/include -fno-PIC -mno-abicalls -fno-strict-aliasing -fno-inline-functions -ffreestanding -fwrapv -Wall -Wextra $(COMMON_CFLAGS)
Makefile:$(BUILD_DIR)/lib/src/math/%.o: CFLAGS += -fno-builtin
Makefile:# The source-to-source optimizer copt is enabled for audio. This makes it use
Makefile:MAKEFLAGS += --no-builtin-rules
Makefile.orig:CPP       := cpp -P -Wno-trigraphs
Makefile.orig:  CC_CFLAGS := -fno-builtin
Makefile.orig:CC_CHECK_CFLAGS := -fsyntax-only -fsigned-char $(CC_CFLAGS) $(TARGET_CFLAGS) $(INCLUDE_CFLAGS) -std=gnu90 -Wall -Wextra -Wno-format-security -Wno-main -DNON_MATCHING -DAVOID_UB $(VERSION_CFLAGS) $(GRUCODE_CFLAGS)
Makefile.orig:LDFLAGS := -T undefined_syms.txt -T $(BUILD_DIR)/$(LD_SCRIPT) -Map $(BUILD_DIR)/sm64.$(VERSION).map --no-check-sections $(SYMBOL_LINKING_FLAGS)
Makefile.orig:  CFLAGS := -march=vr4300 -mfix4300 -mabi=32 -mno-shared -G 0 -mhard-float -fno-stack-protector -fno-common -fno-zero-initialized-in-bss -I include -I src/ -I $(BUILD_DIR)/include -fno-PIC -mno-abicalls -fno-strict-aliasing -fno-inline-functions -ffreestanding -fwrapv -Wall -Wextra $(COMMON_CFLAGS)
Makefile.orig:$(BUILD_DIR)/lib/src/math/%.o: CFLAGS += -fno-builtin
Makefile.orig:# The source-to-source optimizer copt is enabled for audio. This makes it use
Makefile.orig:MAKEFLAGS += --no-builtin-rules
ScreenPosX:src/game/behaviors/bully.inc.c:        o->oMoveAngleYaw = gMarioState->faceAngle[1];
ScreenPosX:src/game/behaviors/coffin.inc.c:                && (o->oDistanceToMario > 100.0f || gMarioState->action == ACT_SQUISHED)) {
ScreenPosX:src/game/behaviors/metal_box.inc.c:            gMarioState->pos[0] = (gMarioState->pos[0]+o->oPosX)/2;
ScreenPosX:src/game/behaviors/metal_box.inc.c:            gMarioState->pos[2] = (gMarioState->pos[2]+o->oPosZ)/2;
ScreenPosX:src/game/behaviors/mushroom_1up.inc.c:            gMarioState->faceAngle[0] = o->oFaceAngleYaw;
ScreenPosX:src/game/behaviors/mushroom_1up.inc.c:            o->oHomeY = gMarioState->forwardVel;
ScreenPosX:src/game/behaviors/mushroom_1up.inc.c:            gMarioState->pos[0] = o->oPosX + o->oForwardVel * sins(o->oFaceAngleYaw);
ScreenPosX:src/game/behaviors/mushroom_1up.inc.c:            gMarioState->pos[1] = o->oPosY + o->oForwardVel * -sins(o->oFaceAnglePitch);
ScreenPosX:src/game/behaviors/mushroom_1up.inc.c:            gMarioState->pos[2] = o->oPosZ + o->oForwardVel * coss(o->oFaceAngleYaw);
ScreenPosX:src/game/behaviors/mushroom_1up.inc.c:            gMarioState->faceAngle[0] = o->oFaceAngleYaw;
ScreenPosX:src/game/behaviors/mushroom_1up.inc.c:                gMarioState->forwardVel = o->oHomeY;
ScreenPosX:src/game/behaviors/purple_switch.inc.c:                    gMarioState->NewTimer = o->oBehParams2ndByte;
ScreenPosX:src/game/behaviors/scuttlebug.inc.c:        if ((o->oDistanceToMario < 200.0f)&&(o->oPosY-30.0f>gMarioState->pos[1])) {
ScreenPosX:src/game/behaviors/scuttlebug.inc.c:            o->oPosX = gMarioState->pos[0];
ScreenPosX:src/game/behaviors/scuttlebug.inc.c:            o->oPosY = gMarioState->pos[1]+55.0f;
ScreenPosX:src/game/behaviors/scuttlebug.inc.c:            o->oPosZ = gMarioState->pos[2];
ScreenPosX:src/game/behaviors/scuttlebug.inc.c:            o->oMoveAngleYaw = gMarioState->faceAngle[1];
ScreenPosX:src/game/behaviors/tilting_inverted_pyramid.inc.c:            if (gMarioState->pos[1] < o->oPosY-50.0f) {
ScreenPosX:src/game/behaviors/tilting_inverted_pyramid.inc.c:                    if (gMarioState->pos[1] < o->oPosY-50.0f) {
ScreenPosX:src/game/behaviors/tilting_inverted_pyramid.inc.c:                    o->oPosX = gMarioState->pos[0] + (random_u16()/10)-3276.8;
ScreenPosX:src/game/behaviors/tilting_inverted_pyramid.inc.c:                    o->oPosZ = gMarioState->pos[2] + (random_u16()/10)-3276.8;
ScreenPosX:src/game/behaviors/tilting_inverted_pyramid.inc.c:                if ((mdist < 500.0f)&&(gMarioState->pos[1] > o->oPosY-100.0f))  {
ScreenPosX:src/game/behaviors/tilting_inverted_pyramid.inc.c:                    o->oPosX = gMarioState->pos[0];
ScreenPosX:src/game/behaviors/tilting_inverted_pyramid.inc.c:                    o->oPosZ = gMarioState->pos[2];
ScreenPosX:src/game/behaviors/tilting_inverted_pyramid.inc.c:                    o->oPosY = gMarioState->pos[1];
ScreenPosX:src/game/behaviors/tilting_inverted_pyramid.inc.c:        gMarioState->pos[0] = o->oPosX;
ScreenPosX:src/game/behaviors/tilting_inverted_pyramid.inc.c:        if (gMarioState->pos[1] > o->oPosY) {
ScreenPosX:src/game/behaviors/tilting_inverted_pyramid.inc.c:            gMarioState->pos[1] = o->oPosY;
ScreenPosX:src/game/behaviors/tilting_inverted_pyramid.inc.c:        gMarioState->pos[2] = o->oPosZ;
ScreenPosX:src/game/behaviors/tilting_inverted_pyramid.inc.c:        o->oFaceAngleYaw = gMarioState->faceAngle[1];
ScreenPosX:src/game/behaviors/whomp.inc.c:        if (o->oTimer > 100 || (gMarioState->action == ACT_SQUISHED && o->oTimer > 30))
ScreenPosX:src/game/mario.c:    vec3s_copy(gMarioState->faceAngle, gMarioSpawnInfo->startAngle);
ScreenPosX:src/game/mario.c:    vec3s_to_vec3f(gMarioState->pos, gMarioSpawnInfo->startPos);
ScreenPosX:src/game/mario.c.orig:    vec3s_copy(gMarioState->faceAngle, gMarioSpawnInfo->startAngle);
ScreenPosX:src/game/mario.c.orig:    vec3s_to_vec3f(gMarioState->pos, gMarioSpawnInfo->startPos);
Binary file sound/samples/instruments/02.aiff matches
Binary file sound/samples/instruments/03.aiff matches
Binary file sound/samples/instruments/14.aiff matches
Binary file sound/samples/instruments/15.aiff matches
Binary file sound/samples/instruments/16.aiff matches
Binary file sound/samples/instruments/25.aiff matches
Binary file sound/samples/instruments/30.aiff matches
Binary file sound/samples/instruments/3E.aiff matches
Binary file sound/samples/instruments/3F.aiff matches
Binary file sound/samples/instruments/40.aiff matches
Binary file sound/samples/instruments/46.aiff matches
Binary file sound/samples/sfx_1/00_twirl.aiff matches
Binary file sound/samples/sfx_4/00.aiff matches
Binary file sound/samples/sfx_5/00.aiff matches
Binary file sound/samples/sfx_5/0C.aiff matches
Binary file sound/samples/sfx_6/02.aiff matches
Binary file sound/samples/sfx_9/02.aiff matches
Binary file sound/samples/sfx_mario/05.aiff matches
Binary file sound/samples/sfx_mario_peach/01.aiff matches
Binary file sound/samples/sfx_mario_peach/02.aiff matches
Binary file sound/samples/streamed_audio/23_custom_bad_apple.aiff matches
Binary file sound/samples/streamed_audio/24_custom_bonearena.aiff matches
src/audio/external.c:// No-op printf macro which leaves string literals in rodata in IDO. (IDO
src/audio/external.c:// expand to a no-op comma expression.) See also goddard/gd_main.h.
src/audio/external.c:    // There has to be some sort of no-op if here, but it's not exactly clear
src/audio/seqplayer.c:                        portamento->extent = temp_f2 / freqScale - 1.0f;
src/audio/seqplayer.c:                        portamento->extent = sp24 / freqScale - US_FLOAT(1.0);
src/audio/seqplayer.c:                            portamento->speed = US_FLOAT(32512.0) * FLOAT_CAST(seqPlayer->tempo)
src/audio/seqplayer.c:                            portamento->speed = US_FLOAT(127.0) / FLOAT_CAST(layer->portamentoTime);
src/audio/seqplayer.c:                        portamento->cur = 0.0f;
src/audio/seq_channel_layer_process_script.h:                        portamento->extent = sp24 / freqScale - US_FLOAT(1.0);
src/audio/seq_channel_layer_process_script.h:                            portamento->speed = US_FLOAT(32512.0) * FLOAT_CAST((*(seqPlayer)).tempo)
src/audio/seq_channel_layer_process_script.h:                            portamento->speed = US_FLOAT(127.0) / FLOAT_CAST((*(layer)).portamentoTime);
src/audio/seq_channel_layer_process_script.h:                        portamento->cur = 0.0f;
src/audio/synthesis.c:                endPos = loopInfo->end;
src/audio/synthesis.c:                            if (loopInfo->count != 0) {
src/audio/synthesis.c:                            synthesisState->samplePosInt = loopInfo->start;
src/audio/synthesis.c:                            note->samplePosInt = loopInfo->start;
src/engine/graph_node_manager.c: * with the other two 'geo-script vector to internal vector' functions.
src/engine/level_script.c:    vec3s_set(gMarioSpawnInfo->startPos, 0, 0, 0);
src/engine/level_script.c:    vec3s_set(gMarioSpawnInfo->startAngle, 0, 0, 0);
src/engine/level_script.c:    gMarioSpawnInfo->activeAreaIndex = -1;
src/engine/level_script.c:    gMarioSpawnInfo->areaIndex = 0;
src/engine/level_script.c:    gMarioSpawnInfo->behaviorArg = CMD_GET(u32, 4);
src/engine/level_script.c:    gMarioSpawnInfo->behaviorScript = CMD_GET(void *, 8);
src/engine/level_script.c:    gMarioSpawnInfo->unk18 = gLoadedGraphNodes[CMD_GET(u8, 3)];
src/engine/level_script.c:    gMarioSpawnInfo->next = NULL;
src/engine/level_script.c:        spawnInfo->startPos[0] = CMD_GET(s16, 4);
src/engine/level_script.c:        spawnInfo->startPos[1] = CMD_GET(s16, 6);
src/engine/level_script.c:        spawnInfo->startPos[2] = CMD_GET(s16, 8);
src/engine/level_script.c:        spawnInfo->startAngle[0] = CMD_GET(s16, 10) * 0x8000 / 180;
src/engine/level_script.c:        spawnInfo->startAngle[1] = CMD_GET(s16, 12) * 0x8000 / 180;
src/engine/level_script.c:        spawnInfo->startAngle[2] = CMD_GET(s16, 14) * 0x8000 / 180;
src/engine/level_script.c:        spawnInfo->areaIndex = sCurrAreaIndex;
src/engine/level_script.c:        spawnInfo->activeAreaIndex = sCurrAreaIndex;
src/engine/level_script.c:        spawnInfo->behaviorArg = CMD_GET(u32, 16);
src/engine/level_script.c:        spawnInfo->behaviorScript = CMD_GET(void *, 20);
src/engine/level_script.c:        spawnInfo->unk18 = gLoadedGraphNodes[model];
src/engine/level_script.c:        spawnInfo->next = gAreas[sCurrAreaIndex].objectSpawnInfos;
src/engine/level_script.c:    gMarioSpawnInfo->areaIndex = CMD_GET(u8, 2);
src/engine/level_script.c:    vec3s_set(gMarioSpawnInfo->startPos, CMD_GET(s16, 6), CMD_GET(s16, 8), CMD_GET(s16, 10));
src/engine/level_script.c:    vec3s_copy(gMarioSpawnInfo->startPos, CMD_GET(Vec3s, 6));
src/engine/level_script.c:    vec3s_set(gMarioSpawnInfo->startAngle, 0, CMD_GET(s16, 4) * 0x8000 / 180, 0);
src/engine/math_util.c.orig:        asFixedPoint = *t1++ * (1 << 16); //! float-to-integer conversion responsible for PU crashes
src/engine/math_util.c.rej:-        asFixedPoint = *t1++ * (1 << 16); //! float-to-integer conversion responsible for PU crashes
src/engine/surface_collision.c:    // To prevent the Merry-Go-Round room from loading when Mario passes above the hole that leads
src/engine/surface_collision.c.orig:    // To prevent the Merry-Go-Round room from loading when Mario passes above the hole that leads
src/game/area.c:    const BehaviorScript *behavior = virtual_to_segmented(0x13, o->behavior);
src/game/area.c:    u8 sp1F = (o->oBehParams & 0x00FF0000) >> 16;
src/game/area.c:    gMarioSpawnInfo->areaIndex = -1;
src/game/area.c:    load_area(gMarioSpawnInfo->areaIndex);
src/game/area.c:    if (gCurrentArea->index == gMarioSpawnInfo->areaIndex) {
src/game/area.c:        unload_objects_from_area(0, gMarioSpawnInfo->activeAreaIndex);
src/game/area.c:        gMarioObject->header.gfx.unk18 = index, gMarioSpawnInfo->areaIndex = index;
src/game/behaviors/activated_bf_plat.inc.c:    s32 platformType = ((u16)(o->oBehParams >> 16) & 0x0300) >> 8;
src/game/behaviors/activated_bf_plat.inc.c:        o->oActivatedBackAndForthPlatformFlipRotation = 0;
src/game/behaviors/activated_bf_plat.inc.c:        o->oActivatedBackAndForthPlatformFlipRotation = 0x8000;
src/game/behaviors/activated_bf_plat.inc.c:    o->collisionData =
src/game/behaviors/activated_bf_plat.inc.c:    o->oActivatedBackAndForthPlatformMaxOffset = 50.0f * ((u16)(o->oBehParams >> 16) & 0x007F);
src/game/behaviors/activated_bf_plat.inc.c:        o->oActivatedBackAndForthPlatformMaxOffset -= 12.0f;
src/game/behaviors/activated_bf_plat.inc.c:    o->oActivatedBackAndForthPlatformVertical = (u16)(o->oBehParams >> 16) & 0x0080;
src/game/behaviors/activated_bf_plat.inc.c:    o->oActivatedBackAndForthPlatformStartYaw = o->oFaceAngleYaw;
src/game/behaviors/activated_bf_plat.inc.c:        o->oVelY = -6.0f;
src/game/behaviors/activated_bf_plat.inc.c:        o->oVelY = 6.0f;
src/game/behaviors/activated_bf_plat.inc.c:    if (o->oActivatedBackAndForthPlatformVel != 0.0f) {
src/game/behaviors/activated_bf_plat.inc.c:        if (o->oActivatedBackAndForthPlatformCountdown != 0) {
src/game/behaviors/activated_bf_plat.inc.c:            o->oActivatedBackAndForthPlatformCountdown -= 1;
src/game/behaviors/activated_bf_plat.inc.c:            o->oActivatedBackAndForthPlatformOffset += o->oActivatedBackAndForthPlatformVel;
src/game/behaviors/activated_bf_plat.inc.c:            if (clamp_f32(&o->oActivatedBackAndForthPlatformOffset, 0.0f,
src/game/behaviors/activated_bf_plat.inc.c:                          o->oActivatedBackAndForthPlatformMaxOffset)
src/game/behaviors/activated_bf_plat.inc.c:                (o->oActivatedBackAndForthPlatformVel > 0.0f && o->oDistanceToMario > 3000.0f)) {
src/game/behaviors/activated_bf_plat.inc.c:                o->oActivatedBackAndForthPlatformCountdown = 20;
src/game/behaviors/activated_bf_plat.inc.c:                if (o->oVelY < 0.0f || o->oActivatedBackAndForthPlatformVel > 0.0f) {
src/game/behaviors/activated_bf_plat.inc.c:                    o->oActivatedBackAndForthPlatformVel = -o->oActivatedBackAndForthPlatformVel;
src/game/behaviors/activated_bf_plat.inc.c:                    o->oActivatedBackAndForthPlatformVel = 0.0f;
src/game/behaviors/activated_bf_plat.inc.c:                o->oFaceAngleYaw += o->oActivatedBackAndForthPlatformFlipRotation;
src/game/behaviors/activated_bf_plat.inc.c:        if (o->oVelY < 0.0f) {
src/game/behaviors/activated_bf_plat.inc.c:            o->oActivatedBackAndForthPlatformVel = 10.0f;
src/game/behaviors/activated_bf_plat.inc.c:        o->oActivatedBackAndForthPlatformCountdown = 20;
src/game/behaviors/activated_bf_plat.inc.c:    if (o->oActivatedBackAndForthPlatformVertical != FALSE) {
src/game/behaviors/activated_bf_plat.inc.c:        o->oPosY = o->oHomeY + o->oActivatedBackAndForthPlatformOffset;
src/game/behaviors/activated_bf_plat.inc.c:        o->oPosY += o->oVelY;
src/game/behaviors/activated_bf_plat.inc.c:        clamp_f32(&o->oPosY, o->oHomeY - 20.0f, o->oHomeY);
src/game/behaviors/activated_bf_plat.inc.c:        obj_set_dist_from_home(-o->oActivatedBackAndForthPlatformOffset);
src/game/behaviors/amp.inc.c:    o->oHomeX = o->oPosX;
src/game/behaviors/amp.inc.c:    o->oHomeY = o->oPosY;
src/game/behaviors/amp.inc.c:    o->oHomeZ = o->oPosZ;
src/game/behaviors/amp.inc.c:    o->oGravity = 0;
src/game/behaviors/amp.inc.c:    o->oFriction = 1.0;
src/game/behaviors/amp.inc.c:    o->oBuoyancy = 1.0;
src/game/behaviors/amp.inc.c:    o->oHomingAmpAvgY = o->oHomeY;
src/game/behaviors/amp.inc.c:    o->header.gfx.node.flags |= GRAPH_RENDER_INVISIBLE;
src/game/behaviors/amp.inc.c:    if (o->oInteractStatus & INT_STATUS_INTERACTED) {
src/game/behaviors/amp.inc.c:        //     if (o->oInteractStatus & INT_STATUS_INTERACTED)
src/game/behaviors/amp.inc.c:        //         o->oAction = X;
src/game/behaviors/amp.inc.c:        if (o->oInteractStatus & INT_STATUS_INTERACTED) {
src/game/behaviors/amp.inc.c:            o->oAction = AMP_ACT_ATTACK_COOLDOWN;
src/game/behaviors/amp.inc.c:        o->oInteractStatus = 0;
src/game/behaviors/amp.inc.c:    f32 relativeTargetX = gLakituState.goalPos[0] - o->oPosX;
src/game/behaviors/amp.inc.c:    f32 relativeTargetZ = gLakituState.goalPos[2] - o->oPosZ;
src/game/behaviors/amp.inc.c:    o->oMoveAngleYaw = approach_s16_symmetric(o->oMoveAngleYaw, targetYaw, 0x1000);
src/game/behaviors/amp.inc.c:    if (o->oTimer < 30) {
src/game/behaviors/amp.inc.c:        cur_obj_scale(0.1 + 0.9 * (f32)(o->oTimer / 30.0f));
src/game/behaviors/amp.inc.c:        o->oAnimState = 1;
src/game/behaviors/amp.inc.c:    if (o->oTimer >= 91) {
src/game/behaviors/amp.inc.c:        o->oAction = HOMING_AMP_ACT_CHASE;
src/game/behaviors/amp.inc.c:        o->oAmpYPhase = 0;
src/game/behaviors/amp.inc.c:    if ((o->oAngleToMario - 0x400 < o->oMoveAngleYaw)
src/game/behaviors/amp.inc.c:        && (o->oMoveAngleYaw < o->oAngleToMario + 0x400)) {
src/game/behaviors/amp.inc.c:        o->oHomingAmpLockedOn = TRUE;
src/game/behaviors/amp.inc.c:        o->oTimer = 0;
src/game/behaviors/amp.inc.c:    if (o->oHomingAmpLockedOn == TRUE) {
src/game/behaviors/amp.inc.c:        o->oForwardVel = 15.0f;
src/game/behaviors/amp.inc.c:        if (o->oHomingAmpAvgY > gMarioObject->header.gfx.pos[1] + 150.0f) {
src/game/behaviors/amp.inc.c:            o->oHomingAmpAvgY -= 10.0f;
src/game/behaviors/amp.inc.c:            o->oHomingAmpAvgY = gMarioObject->header.gfx.pos[1] + 150.0f;
src/game/behaviors/amp.inc.c:        if (o->oTimer >= 31) {
src/game/behaviors/amp.inc.c:            o->oHomingAmpLockedOn = FALSE;
src/game/behaviors/amp.inc.c:        o->oForwardVel = 10.0f;
src/game/behaviors/amp.inc.c:        if (o->oHomingAmpAvgY < gMarioObject->header.gfx.pos[1] + 250.0f) {
src/game/behaviors/amp.inc.c:            o->oHomingAmpAvgY += 10.0f;
src/game/behaviors/amp.inc.c:    o->oPosY = o->oHomingAmpAvgY + sins(o->oAmpYPhase * 0x400) * 20.0f;
src/game/behaviors/amp.inc.c:    if (is_point_within_radius_of_mario(o->oHomeX, o->oHomeY, o->oHomeZ, 1500) == FALSE) {
src/game/behaviors/amp.inc.c:        o->oAction = HOMING_AMP_ACT_GIVE_UP;
src/game/behaviors/amp.inc.c:    o->oForwardVel = 15.0f;
src/game/behaviors/amp.inc.c:    if (o->oTimer >= 151) {
src/game/behaviors/amp.inc.c:        o->oPosX = o->oHomeX;
src/game/behaviors/amp.inc.c:        o->oPosY = o->oHomeY;
src/game/behaviors/amp.inc.c:        o->oPosZ = o->oHomeZ;
src/game/behaviors/amp.inc.c:        o->header.gfx.node.flags |= GRAPH_RENDER_INVISIBLE;
src/game/behaviors/amp.inc.c:        o->oAction = HOMING_AMP_ACT_INACTIVE;
src/game/behaviors/amp.inc.c:        o->oAnimState = 0;
src/game/behaviors/amp.inc.c:        o->oForwardVel = 0;
src/game/behaviors/amp.inc.c:        o->oHomingAmpAvgY = o->oHomeY;
src/game/behaviors/amp.inc.c:    o->header.gfx.unk38.animFrame += 2;
src/game/behaviors/amp.inc.c:    o->oForwardVel = 0;
src/game/behaviors/amp.inc.c:    if (o->oTimer >= 31) {
src/game/behaviors/amp.inc.c:        o->oAnimState = 0;
src/game/behaviors/amp.inc.c:    if (o->oTimer >= 91) {
src/game/behaviors/amp.inc.c:        o->oAnimState = 1;
src/game/behaviors/amp.inc.c:        o->oAction = HOMING_AMP_ACT_CHASE;
src/game/behaviors/amp.inc.c:    switch (o->oAction) {
src/game/behaviors/amp.inc.c:            if (is_point_within_radius_of_mario(o->oHomeX, o->oHomeY, o->oHomeZ, 800) == TRUE) {
src/game/behaviors/amp.inc.c:                o->oAction = HOMING_AMP_ACT_APPEAR;
src/game/behaviors/amp.inc.c:                o->header.gfx.node.flags &= ~GRAPH_RENDER_INVISIBLE;
src/game/behaviors/amp.inc.c:    o->oAmpYPhase++;
src/game/behaviors/amp.inc.c:    o->oHomeX = o->oPosX;
src/game/behaviors/amp.inc.c:    o->oHomeY = o->oPosY;
src/game/behaviors/amp.inc.c:    o->oHomeZ = o->oPosZ;
src/game/behaviors/amp.inc.c:    o->oAnimState = 1;
src/game/behaviors/amp.inc.c:    switch (o->oBehParams2ndByte) {
src/game/behaviors/amp.inc.c:            o->oAmpRadiusOfRotation = 200.0f;
src/game/behaviors/amp.inc.c:            o->oAmpRadiusOfRotation = 300.0f;
src/game/behaviors/amp.inc.c:            o->oAmpRadiusOfRotation = 400.0f;
src/game/behaviors/amp.inc.c:    o->oMoveAngleYaw = random_u16();
src/game/behaviors/amp.inc.c:    o->oAction = AMP_ACT_IDLE;
src/game/behaviors/amp.inc.c:    f32 xToMario = gMarioObject->header.gfx.pos[0] - o->oPosX;
src/game/behaviors/amp.inc.c:    f32 yToMario = gMarioObject->header.gfx.pos[1] + 120.0f - o->oPosY;
src/game/behaviors/amp.inc.c:    f32 zToMario = gMarioObject->header.gfx.pos[2] - o->oPosZ;
src/game/behaviors/amp.inc.c:    o->oFaceAnglePitch = approach_s16_symmetric(o->oFaceAnglePitch, vAngleToMario, 0x1000);
src/game/behaviors/amp.inc.c:    o->oPosY = o->oHomeY + coss(o->oAmpYPhase * 0x458) * 20.0f;
src/game/behaviors/amp.inc.c:    o->oAmpYPhase++;
src/game/behaviors/amp.inc.c:    o->oPosX = o->oHomeX + sins(o->oMoveAngleYaw) * o->oAmpRadiusOfRotation;
src/game/behaviors/amp.inc.c:    o->oPosZ = o->oHomeZ + coss(o->oMoveAngleYaw) * o->oAmpRadiusOfRotation;
src/game/behaviors/amp.inc.c:    o->oPosY = o->oHomeY + coss(o->oAmpYPhase * 0x8B0) * 30.0f;
src/game/behaviors/amp.inc.c:    o->oMoveAngleYaw += 0x400;
src/game/behaviors/amp.inc.c:    o->oFaceAngleYaw = o->oMoveAngleYaw + 0x4000;
src/game/behaviors/amp.inc.c:    o->oAmpYPhase++;
src/game/behaviors/amp.inc.c:    switch (o->oAction) {
src/game/behaviors/amp.inc.c:            if (o->oBehParams2ndByte == AMP_BP_ROT_RADIUS_0) {
src/game/behaviors/animated_floor_switch.inc.c:    o->parentObj = cur_obj_nearest_object_with_behavior(bhvFloorSwitchAnimatesObject);
src/game/behaviors/animated_floor_switch.inc.c:    if (o->oFloorSwitchPressAnimationUnk100 != 0) {
src/game/behaviors/animated_floor_switch.inc.c:        if (o->parentObj->oAction != 2) {
src/game/behaviors/animated_floor_switch.inc.c:            o->oFloorSwitchPressAnimationUnk100 = 0;
src/game/behaviors/animated_floor_switch.inc.c:        if (o->oFloorSwitchPressAnimationUnkFC != 0) {
src/game/behaviors/animated_floor_switch.inc.c:            o->oFloorSwitchPressAnimationUnkF4 = D_80331ACC[o->oBehParams2ndByte];
src/game/behaviors/animated_floor_switch.inc.c:            o->oFloorSwitchPressAnimationUnkF4 = 0;
src/game/behaviors/animated_floor_switch.inc.c:    } else if (o->parentObj->oAction == 2) {
src/game/behaviors/animated_floor_switch.inc.c:        o->oFloorSwitchPressAnimationUnkFC ^= 1;
src/game/behaviors/animated_floor_switch.inc.c:        o->oFloorSwitchPressAnimationUnk100 = 1;
src/game/behaviors/animated_floor_switch.inc.c:    if (o->oFloorSwitchPressAnimationUnkF4 != 0) {
src/game/behaviors/animated_floor_switch.inc.c:        if (o->oFloorSwitchPressAnimationUnkF4 < 60) {
src/game/behaviors/animated_floor_switch.inc.c:        if (--o->oFloorSwitchPressAnimationUnkF4 == 0) {
src/game/behaviors/animated_floor_switch.inc.c:            o->oFloorSwitchPressAnimationUnkFC = 0;
src/game/behaviors/animated_floor_switch.inc.c:        if (o->oFloorSwitchPressAnimationUnkF8 < 9) {
src/game/behaviors/animated_floor_switch.inc.c:            o->oFloorSwitchPressAnimationUnkF8 += 1;
src/game/behaviors/animated_floor_switch.inc.c:    } else if ((o->oFloorSwitchPressAnimationUnkF8 -= 2) < 0) {
src/game/behaviors/animated_floor_switch.inc.c:        o->oFloorSwitchPressAnimationUnkF8 = 0;
src/game/behaviors/animated_floor_switch.inc.c:        o->oFloorSwitchPressAnimationUnkFC = 1;
src/game/behaviors/animated_floor_switch.inc.c:    o->collisionData = segmented_to_virtual(
src/game/behaviors/animated_floor_switch.inc.c:        D_80331A54[o->oBehParams2ndByte][o->oFloorSwitchPressAnimationUnkF8 / 2].unk00);
src/game/behaviors/animated_floor_switch.inc.c:    cur_obj_set_model(D_80331A54[o->oBehParams2ndByte][o->oFloorSwitchPressAnimationUnkF8 / 2].unk04);
src/game/behaviors/arrow_lift.inc.c:    o->oMoveAngleYaw = o->oFaceAngleYaw - 0x4000;
src/game/behaviors/arrow_lift.inc.c:    o->oVelY = 0;
src/game/behaviors/arrow_lift.inc.c:    o->oForwardVel = 12;
src/game/behaviors/arrow_lift.inc.c:    o->oArrowLiftDisplacement += o->oForwardVel;
src/game/behaviors/arrow_lift.inc.c:    if (o->oArrowLiftDisplacement > 384) {
src/game/behaviors/arrow_lift.inc.c:        o->oForwardVel = 0;
src/game/behaviors/arrow_lift.inc.c:        o->oArrowLiftDisplacement = 384;
src/game/behaviors/arrow_lift.inc.c:    o->oMoveAngleYaw = o->oFaceAngleYaw + 0x4000;
src/game/behaviors/arrow_lift.inc.c:    o->oVelY = 0;
src/game/behaviors/arrow_lift.inc.c:    o->oForwardVel = 12;
src/game/behaviors/arrow_lift.inc.c:    o->oArrowLiftDisplacement -= o->oForwardVel;
src/game/behaviors/arrow_lift.inc.c:    if (o->oArrowLiftDisplacement < 0) {
src/game/behaviors/arrow_lift.inc.c:        o->oForwardVel = 0;
src/game/behaviors/arrow_lift.inc.c:        o->oArrowLiftDisplacement = 0;
src/game/behaviors/arrow_lift.inc.c:    switch (o->oAction) {
src/game/behaviors/arrow_lift.inc.c:            if (o->oTimer > 60) {
src/game/behaviors/arrow_lift.inc.c:                    o->oAction = ARROW_LIFT_ACT_MOVING_AWAY;
src/game/behaviors/arrow_lift.inc.c:                o->oAction = ARROW_LIFT_ACT_MOVING_BACK;
src/game/behaviors/arrow_lift.inc.c:            if (o->oTimer > 60) {
src/game/behaviors/arrow_lift.inc.c:                    o->oAction = ARROW_LIFT_ACT_IDLE;
src/game/behaviors/bbh_haunted_bookshelf.inc.c:    o->oDistanceToMario = dist_between_objects(o, gMarioObject);
src/game/behaviors/bbh_haunted_bookshelf.inc.c:    o->oFaceAngleYaw = 0;
src/game/behaviors/bbh_haunted_bookshelf.inc.c:    switch (o->oAction) {
src/game/behaviors/bbh_haunted_bookshelf.inc.c:            if (o->oTimer == 0) {
src/game/behaviors/bbh_haunted_bookshelf.inc.c:            if (o->oHauntedBookshelfShouldOpen != FALSE) {
src/game/behaviors/bbh_haunted_bookshelf.inc.c:                o->oAction++;
src/game/behaviors/bbh_haunted_bookshelf.inc.c:            o->oPosX += 5.0f;
src/game/behaviors/bbh_haunted_bookshelf.inc.c:            if (o->oTimer > 101) {
src/game/behaviors/bbh_merry_go_round.inc.c: * This is the merry-go-round in BBH.
src/game/behaviors/bbh_merry_go_round.inc.c: * This function handles the merry-go-round's music.
src/game/behaviors/bbh_merry_go_round.inc.c: * merry-go-round's enclosure, and ends the music when he's neither
src/game/behaviors/bbh_merry_go_round.inc.c:    if (o->oMerryGoRoundMusicShouldPlay == FALSE) {
src/game/behaviors/bbh_merry_go_round.inc.c:            // Play the merry-go-round and BBH music at the same time
src/game/behaviors/bbh_merry_go_round.inc.c:            o->oMerryGoRoundMusicShouldPlay++;
src/game/behaviors/bbh_merry_go_round.inc.c:        // All floors in the merry-go-round's enclosure have surface type 0x1A.
src/game/behaviors/bbh_merry_go_round.inc.c:        // The cur_obj_is_mario_on_platform check is redundant since the merry-go-round
src/game/behaviors/bbh_merry_go_round.inc.c:        // has surface type 0x1A, so Mario cannot be on the merry-go-round
src/game/behaviors/bbh_merry_go_round.inc.c:            // If Mario is in the merry-go-round's enclosure, play only the merry-go-round music.
src/game/behaviors/bbh_merry_go_round.inc.c:            // If Mario is not in the merry-go-round's enclosure,
src/game/behaviors/bbh_merry_go_round.inc.c:            // i.e. he's around it, play both the merry-go-round music and the BBH music.
src/game/behaviors/bbh_merry_go_round.inc.c:        // If Mario is not in the merry-go-round's area of the basement anymore,
src/game/behaviors/bbh_merry_go_round.inc.c:            // The merry-go-round is a dynamic surface.
src/game/behaviors/bbh_merry_go_round.inc.c:            o->oMerryGoRoundMusicShouldPlay = FALSE;
src/game/behaviors/bbh_merry_go_round.inc.c: * Merry-go-round update function.
src/game/behaviors/bbh_merry_go_round.inc.c:    // Surprisingly, the merry-go-round is what's responsible
src/game/behaviors/bbh_merry_go_round.inc.c:    if (!o->oMerryGoRoundMarioIsOutside) {
src/game/behaviors/bbh_merry_go_round.inc.c:            o->oMerryGoRoundMarioIsOutside++;
src/game/behaviors/bbh_merry_go_round.inc.c:            o->oMerryGoRoundMarioIsOutside = FALSE;
src/game/behaviors/bbh_merry_go_round.inc.c:    // Rotate the merry-go-round and play appropriate music if it's not stopped.
src/game/behaviors/bbh_merry_go_round.inc.c:    if (o->oMerryGoRoundStopped == FALSE) {
src/game/behaviors/bbh_merry_go_round.inc.c:        o->oAngleVelYaw = 0x80;
src/game/behaviors/bbh_merry_go_round.inc.c:        o->oMoveAngleYaw += o->oAngleVelYaw;
src/game/behaviors/bbh_merry_go_round.inc.c:        o->oFaceAngleYaw += o->oAngleVelYaw;
src/game/behaviors/bbh_merry_go_round.inc.c:        o->oAngleVelYaw = 0;
src/game/behaviors/bbh_tilting_trap.inc.c: * that drops the player into the merry-go-round area.
src/game/behaviors/bbh_tilting_trap.inc.c:        o->oAction = BBH_TILTING_TRAP_PLATFORM_ACT_MARIO_ON;
src/game/behaviors/bbh_tilting_trap.inc.c:        o->oAction = BBH_TILTING_TRAP_PLATFORM_ACT_MARIO_OFF;
src/game/behaviors/bbh_tilting_trap.inc.c:    if (o->oAction == BBH_TILTING_TRAP_PLATFORM_ACT_MARIO_ON) {
src/game/behaviors/bbh_tilting_trap.inc.c:        o->oAngleVelPitch = (s32)(o->oDistanceToMario * coss(o->oAngleToMario));
src/game/behaviors/bbh_tilting_trap.inc.c:        o->oFaceAnglePitch += o->oAngleVelPitch;
src/game/behaviors/bbh_tilting_trap.inc.c:        if ((absi(o->oFaceAnglePitch) < 3000) || (o->oTimer >= 16))
src/game/behaviors/bbh_tilting_trap.inc.c:        o->oAngleVelPitch = 0;
src/game/behaviors/bbh_tilting_trap.inc.c:        if ((s16) o->oFaceAnglePitch > 0) {
src/game/behaviors/bbh_tilting_trap.inc.c:            if (o->oFaceAnglePitch < 200) {
src/game/behaviors/bbh_tilting_trap.inc.c:                o->oFaceAnglePitch = 0;
src/game/behaviors/bbh_tilting_trap.inc.c:                o->oAngleVelPitch = -200;
src/game/behaviors/bbh_tilting_trap.inc.c:            if (o->oFaceAnglePitch > -200) {
src/game/behaviors/bbh_tilting_trap.inc.c:                o->oFaceAnglePitch = 0;
src/game/behaviors/bbh_tilting_trap.inc.c:                o->oAngleVelPitch = 200;
src/game/behaviors/bbh_tilting_trap.inc.c:    o->oFaceAnglePitch += o->oAngleVelPitch;
src/game/behaviors/beta_boo_key.inc.c: * is loaded in script_func_global_10, which contains boo-themed models used in
src/game/behaviors/beta_boo_key.inc.c:    o->oFaceAngleRoll += 0x200;
src/game/behaviors/beta_boo_key.inc.c:    o->oFaceAngleYaw += 0x200;
src/game/behaviors/beta_boo_key.inc.c:        o->parentObj->oBooDeathStatus = BOO_DEATH_STATUS_DYING;
src/game/behaviors/beta_boo_key.inc.c:    if (o->oGraphYOffset < 26.0f) {
src/game/behaviors/beta_boo_key.inc.c:        o->oGraphYOffset += 2.0f;
src/game/behaviors/beta_boo_key.inc.c:    if (o->oFaceAngleRoll & 0xFFFF) {
src/game/behaviors/beta_boo_key.inc.c:        o->oFaceAngleRoll &= 0xF800;
src/game/behaviors/beta_boo_key.inc.c:        o->oFaceAngleRoll += 0x800;
src/game/behaviors/beta_boo_key.inc.c:    if (o->oMoveFlags & OBJ_MOVE_ON_GROUND) {
src/game/behaviors/beta_boo_key.inc.c:        o->oVelX = 0.0f;
src/game/behaviors/beta_boo_key.inc.c:        o->oVelZ = 0.0f;
src/game/behaviors/beta_boo_key.inc.c:    o->oFaceAngleYaw += 0x800;
src/game/behaviors/beta_boo_key.inc.c:    if (o->oTimer > 90 || o->oMoveFlags & OBJ_MOVE_LANDED) {
src/game/behaviors/beta_boo_key.inc.c:            // o->parentObj is set to the parent boo's parentObj. This means that
src/game/behaviors/beta_boo_key.inc.c:            o->parentObj->oInteractStatus = INT_STATUS_HOOT_GRABBED_BY_MARIO;
src/game/behaviors/beta_boo_key.inc.c:    struct Object *parent = o->parentObj;
src/game/behaviors/beta_boo_key.inc.c:    if (o->oTimer == 0) {
src/game/behaviors/beta_boo_key.inc.c:        o->parentObj = parent->parentObj;
src/game/behaviors/beta_boo_key.inc.c:        o->oAction = BETA_BOO_KEY_ACT_DROPPED;
src/game/behaviors/beta_boo_key.inc.c:        o->oVelX = sins(velocityDirection) * velocityMagnitude;
src/game/behaviors/beta_boo_key.inc.c:        o->oVelZ = coss(velocityDirection) * velocityMagnitude;
src/game/behaviors/beta_boo_key.inc.c:        o->oVelY = 40.0f;
src/game/behaviors/beta_boo_key.inc.c:    o->oFaceAngleYaw += 0x200;
src/game/behaviors/beta_boo_key.inc.c:    o->oFaceAngleRoll += 0x200;
src/game/behaviors/beta_boo_key.inc.c:    struct Object *parent = o->parentObj;
src/game/behaviors/beta_boo_key.inc.c:    o->oPosY += 40.0f;
src/game/behaviors/beta_boo_key.inc.c:        o->oAction = BETA_BOO_KEY_ACT_DROPPING;
src/game/behaviors/beta_boo_key.inc.c:    o->oFaceAngleRoll += 0x200;
src/game/behaviors/beta_boo_key.inc.c:    o->oFaceAngleYaw += 0x200;
src/game/behaviors/beta_bowser_anchor.inc.c:    o->hitboxRadius = gDebugInfo[4][0] + 100;
src/game/behaviors/beta_bowser_anchor.inc.c:    o->hitboxHeight = gDebugInfo[4][1] + 300;
src/game/behaviors/beta_chest.inc.c:    o->oMoveAngleYaw = random_u16();
src/game/behaviors/beta_chest.inc.c:    o->oMoveAngleYaw = 0;
src/game/behaviors/beta_chest.inc.c:    switch (o->oAction) {
src/game/behaviors/beta_chest.inc.c:            if (dist_between_objects(o->parentObj, gMarioObject) < 300.0f) {
src/game/behaviors/beta_chest.inc.c:                o->oAction++; // Set to BETA_CHEST_ACT_OPENING
src/game/behaviors/beta_chest.inc.c:            if (o->oTimer == 0) {
src/game/behaviors/beta_chest.inc.c:                play_sound(SOUND_GENERAL_CLAM_SHELL1, o->header.gfx.cameraToObject);
src/game/behaviors/beta_chest.inc.c:            o->oFaceAnglePitch -= 0x400;
src/game/behaviors/beta_chest.inc.c:            if (o->oFaceAnglePitch < -0x4000) {
src/game/behaviors/beta_chest.inc.c:                o->oAction++; // Set to BETA_CHEST_ACT_IDLE_OPEN
src/game/behaviors/beta_fish_splash_spawner.inc.c:    UNUSED f32 water_level = find_water_level(o->oPosX, o->oPosZ);
src/game/behaviors/beta_holdable_object.inc.c:    o->oGravity = 2.5;
src/game/behaviors/beta_holdable_object.inc.c:    o->oFriction = 0.8;
src/game/behaviors/beta_holdable_object.inc.c:    o->oBuoyancy = 1.3;
src/game/behaviors/beta_holdable_object.inc.c:    o->oHeldState = HELD_FREE;
src/game/behaviors/beta_holdable_object.inc.c:    o->oForwardVel = 0;
src/game/behaviors/beta_holdable_object.inc.c:    o->oVelY = 0;
src/game/behaviors/beta_holdable_object.inc.c:    o->oHeldState = HELD_FREE;
src/game/behaviors/beta_holdable_object.inc.c:    o->oFlags &= ~OBJ_FLAG_SET_FACE_YAW_TO_MOVE_YAW;
src/game/behaviors/beta_holdable_object.inc.c:    o->oForwardVel = 40.0;
src/game/behaviors/beta_holdable_object.inc.c:    o->oVelY = 20.0;
src/game/behaviors/beta_holdable_object.inc.c:    switch (o->oHeldState) {
src/game/behaviors/beta_trampoline.inc.c:    obj_copy_pos_and_angle(o, o->parentObj);
src/game/behaviors/beta_trampoline.inc.c:    obj_copy_graph_y_offset(o, o->parentObj);
src/game/behaviors/beta_trampoline.inc.c:    o->oPosY -= 75.0f;
src/game/behaviors/beta_trampoline.inc.c:    if ((yDisplacement = o->oPosY - o->oHomeY) >= 0) {
src/game/behaviors/beta_trampoline.inc.c:    if (o->oTimer == 0) {
src/game/behaviors/beta_trampoline.inc.c:    // Update o->oBetaTrampolineMarioOnTrampoline, and reset
src/game/behaviors/beta_trampoline.inc.c:        o->oBetaTrampolineMarioOnTrampoline = TRUE;
src/game/behaviors/beta_trampoline.inc.c:        o->oBetaTrampolineMarioOnTrampoline = FALSE;
src/game/behaviors/beta_trampoline.inc.c:        o->oPosY = o->oHomeY;
src/game/behaviors/bird.inc.c:    if (o->oBehParams2ndByte == BIRD_BP_SPAWNED || o->oDistanceToMario < 2000.0f) {
src/game/behaviors/bird.inc.c:        if (o->oBehParams2ndByte != BIRD_BP_SPAWNED) {
src/game/behaviors/bird.inc.c:            o->oHomeX = -20.0f;
src/game/behaviors/bird.inc.c:            o->oHomeZ = -3990.0f;
src/game/behaviors/bird.inc.c:        o->oAction = BIRD_ACT_FLY;
src/game/behaviors/bird.inc.c:        o->oMoveAnglePitch = 5000 - (s32)(4000.0f * random_float());
src/game/behaviors/bird.inc.c:        o->oMoveAngleYaw = random_u16();
src/game/behaviors/bird.inc.c:        o->oBirdSpeed = 40.0f;
src/game/behaviors/bird.inc.c:    obj_compute_vel_from_move_pitch(o->oBirdSpeed);
src/game/behaviors/bird.inc.c:    if (o->parentObj->oPosY > 8000.0f) {
src/game/behaviors/bird.inc.c:        if (o->oBehParams2ndByte != BIRD_BP_SPAWNED) {
src/game/behaviors/bird.inc.c:            o->oBirdTargetPitch = atan2s(distance, o->oPosY - 10000.0f);
src/game/behaviors/bird.inc.c:            o->oBirdTargetYaw = cur_obj_angle_to_home();
src/game/behaviors/bird.inc.c:            distance = lateral_dist_between_objects(o, o->parentObj);
src/game/behaviors/bird.inc.c:            o->oBirdTargetPitch = atan2s(distance, o->oPosY - o->parentObj->oPosY);
src/game/behaviors/bird.inc.c:            o->oBirdTargetYaw = obj_angle_to_object(o, o->parentObj);
src/game/behaviors/bird.inc.c:            o->oBirdSpeed = 0.04f * dist_between_objects(o, o->parentObj) + 20.0f;
src/game/behaviors/bird.inc.c:        obj_move_pitch_approach(o->oBirdTargetPitch, 140);
src/game/behaviors/bird.inc.c:        cur_obj_rotate_yaw_toward(o->oBirdTargetYaw, 800);
src/game/behaviors/bird.inc.c:        obj_roll_to_match_yaw_turn(o->oBirdTargetYaw, 0x3000, 600);
src/game/behaviors/bird.inc.c:    switch (o->oAction) {
src/game/behaviors/blue_coin.inc.c:    switch (o->oAction) {
src/game/behaviors/blue_coin.inc.c:            o->oHiddenBlueCoinSwitch = cur_obj_nearest_object_with_behavior(bhvBlueCoinSwitch);
src/game/behaviors/blue_coin.inc.c:            if (o->oHiddenBlueCoinSwitch != NULL) {
src/game/behaviors/blue_coin.inc.c:                o->oAction++;
src/game/behaviors/blue_coin.inc.c:            blueCoinSwitch = o->oHiddenBlueCoinSwitch;
src/game/behaviors/blue_coin.inc.c:                o->oAction++; // Set to HIDDEN_BLUE_COIN_ACT_ACTIVE
src/game/behaviors/blue_coin.inc.c:            if (o->oInteractStatus & INT_STATUS_INTERACTED) {
src/game/behaviors/blue_coin.inc.c:    o->oInteractStatus = 0;
src/game/behaviors/blue_coin.inc.c:    switch (o->oAction) {
src/game/behaviors/blue_coin.inc.c:                    o->oAction++;
src/game/behaviors/blue_coin.inc.c:                    o->oVelY = -20.0f;
src/game/behaviors/blue_coin.inc.c:                    o->oGravity = 0.0f;
src/game/behaviors/blue_coin.inc.c:            if (o->oTimer > 5) {
src/game/behaviors/blue_coin.inc.c:                o->oAction++;
src/game/behaviors/blue_coin.inc.c:                o->oPosY = gMarioObject->oPosY - 40.0f;
src/game/behaviors/blue_coin.inc.c:            if (o->oTimer < 200) {
src/game/behaviors/blue_coin.inc.c:            if (cur_obj_nearest_object_with_behavior(bhvHiddenBlueCoin) == NULL || o->oTimer > 240) {
src/game/behaviors/blue_fish.inc.c:    switch (o->oAction) {
src/game/behaviors/blue_fish.inc.c:            if (o->oTimer == 0) {
src/game/behaviors/blue_fish.inc.c:                o->oBlueFishRandomAngle = random_sign() << 11;
src/game/behaviors/blue_fish.inc.c:                o->oBlueFishRandomVel = random_float() * 2;
src/game/behaviors/blue_fish.inc.c:                o->oBlueFishRandomTime = (s32)(random_float() * 30) & 0xFE;
src/game/behaviors/blue_fish.inc.c:                    o->oAngleVelPitch = random_f32_around_zero(128);
src/game/behaviors/blue_fish.inc.c:                    o->oAngleVelPitch = 0;
src/game/behaviors/blue_fish.inc.c:            o->oForwardVel = o->oBlueFishRandomVel + 3.0f;
src/game/behaviors/blue_fish.inc.c:            if (o->oTimer >= o->oBlueFishRandomTime + 60) {
src/game/behaviors/blue_fish.inc.c:                o->oAction++;
src/game/behaviors/blue_fish.inc.c:            if (o->oTimer < (o->oBlueFishRandomTime + 60) / 2) {
src/game/behaviors/blue_fish.inc.c:                o->oFaceAnglePitch += o->oAngleVelPitch;
src/game/behaviors/blue_fish.inc.c:                o->oFaceAnglePitch -= o->oAngleVelPitch;
src/game/behaviors/blue_fish.inc.c:            o->oVelY = -sins(o->oFaceAnglePitch) * o->oForwardVel;
src/game/behaviors/blue_fish.inc.c:            o->oMoveAngleYaw = (s32)(o->oBlueFishRandomAngle + o->oMoveAngleYaw);
src/game/behaviors/blue_fish.inc.c:            if (o->oTimer == 15) {
src/game/behaviors/blue_fish.inc.c:                o->oAction++;
src/game/behaviors/blue_fish.inc.c:            if (o->oTimer >= o->oBlueFishRandomTime + 60) {
src/game/behaviors/blue_fish.inc.c:                o->oAction++;
src/game/behaviors/blue_fish.inc.c:            if (o->oTimer < (o->oBlueFishRandomTime + 60) / 2) {
src/game/behaviors/blue_fish.inc.c:                o->oFaceAnglePitch -= o->oAngleVelPitch;
src/game/behaviors/blue_fish.inc.c:                o->oFaceAnglePitch += o->oAngleVelPitch;
src/game/behaviors/blue_fish.inc.c:            o->oMoveAngleYaw = (s32)(o->oBlueFishRandomAngle + o->oMoveAngleYaw);
src/game/behaviors/blue_fish.inc.c:            if (o->oTimer == 15) {
src/game/behaviors/blue_fish.inc.c:                o->oAction = BLUE_FISH_ACT_DIVE;
src/game/behaviors/blue_fish.inc.c:    o->oVelY = -sins(o->oFaceAnglePitch) * o->oForwardVel;
src/game/behaviors/blue_fish.inc.c:    if (o->parentObj->oAction == BLUE_FISH_ACT_DUPLICATE) {
src/game/behaviors/blue_fish.inc.c:    switch (o->oAction) {
src/game/behaviors/blue_fish.inc.c:                o->oAction++;
src/game/behaviors/blue_fish.inc.c:                o->oAction++;
src/game/behaviors/blue_fish.inc.c:            o->oAction = BLUE_FISH_ACT_SPAWN;
src/game/behaviors/bobomb.inc.c:    o->oGravity = 2.5;
src/game/behaviors/bobomb.inc.c:    o->oFriction = 0.8;
src/game/behaviors/bobomb.inc.c:    o->oBuoyancy = 1.3;
src/game/behaviors/bobomb.inc.c:    o->oInteractionSubtype = INT_SUBTYPE_KICKABLE;
src/game/behaviors/bobomb.inc.c:    if (((o->oBehParams >> 8) & 0x1) == 0) {
src/game/behaviors/bobomb.inc.c:        o->oBehParams = 0x100;
src/game/behaviors/bobomb.inc.c:    if (o->oTimer < 5)
src/game/behaviors/bobomb.inc.c:        cur_obj_scale(1.0 + (f32) o->oTimer / 5.0);
src/game/behaviors/bobomb.inc.c:        o->activeFlags = ACTIVE_FLAG_DEACTIVATED;
src/game/behaviors/bobomb.inc.c:    if ((o->oInteractStatus & INT_STATUS_INTERACTED) != 0)
src/game/behaviors/bobomb.inc.c:        if ((o->oInteractStatus & INT_STATUS_MARIO_UNK1) != 0)
src/game/behaviors/bobomb.inc.c:            o->oMoveAngleYaw = gMarioObject->header.gfx.angle[1];
src/game/behaviors/bobomb.inc.c:            o->oForwardVel = 25.0;
src/game/behaviors/bobomb.inc.c:            o->oVelY = 30.0;
src/game/behaviors/bobomb.inc.c:            o->oAction = BOBOMB_ACT_LAUNCHED;
src/game/behaviors/bobomb.inc.c:        if ((o->oInteractStatus & INT_STATUS_TOUCHED_BOB_OMB) != 0)
src/game/behaviors/bobomb.inc.c:            o->oAction = BOBOMB_ACT_EXPLODE;
src/game/behaviors/bobomb.inc.c:        o->oInteractStatus = 0;
src/game/behaviors/bobomb.inc.c:        o->oAction = BOBOMB_ACT_EXPLODE;
src/game/behaviors/bobomb.inc.c:    sp22 = o->header.gfx.unk38.animFrame;
src/game/behaviors/bobomb.inc.c:    o->oForwardVel = 5.0;
src/game/behaviors/bobomb.inc.c:    if ((obj_return_home_if_safe(o, o->oHomeX, o->oHomeY, o->oHomeZ, 400) == 1)
src/game/behaviors/bobomb.inc.c:        && (obj_check_if_facing_toward_angle(o->oMoveAngleYaw, o->oAngleToMario, 0x2000) == 1)) {
src/game/behaviors/bobomb.inc.c:        o->oBobombFuseLit = 1;
src/game/behaviors/bobomb.inc.c:        o->oAction = BOBOMB_ACT_CHASE_MARIO;
src/game/behaviors/bobomb.inc.c:    sp1a = ++o->header.gfx.unk38.animFrame;
src/game/behaviors/bobomb.inc.c:    o->oForwardVel = 20.0;
src/game/behaviors/bobomb.inc.c:        o->oAction = BOBOMB_ACT_EXPLODE; /* bit 0 */
src/game/behaviors/bobomb.inc.c:    switch (o->oAction) {
src/game/behaviors/bobomb.inc.c:            o->activeFlags = ACTIVE_FLAG_DEACTIVATED;
src/game/behaviors/bobomb.inc.c:        o->oPosZ = 0.0f;
src/game/behaviors/bobomb.inc.c:    if (o->oBobombFuseTimer >= 151)
src/game/behaviors/bobomb.inc.c:        o->oAction = 3;
src/game/behaviors/bobomb.inc.c:    switch (o->oAction) {
src/game/behaviors/bobomb.inc.c:            o->activeFlags = ACTIVE_FLAG_DEACTIVATED;
src/game/behaviors/bobomb.inc.c:    if (o->oBobombFuseTimer >= 151)
src/game/behaviors/bobomb.inc.c:        o->oAction = 3;
src/game/behaviors/bobomb.inc.c:    if (o->oBehParams2ndByte == BOBOMB_BP_STYPE_GENERIC)
src/game/behaviors/bobomb.inc.c:    o->header.gfx.node.flags |= GRAPH_RENDER_INVISIBLE;
src/game/behaviors/bobomb.inc.c:    o->oBobombFuseLit = 1;
src/game/behaviors/bobomb.inc.c:    if (o->oBobombFuseTimer >= 151) {
src/game/behaviors/bobomb.inc.c:        o->oAction = BOBOMB_ACT_EXPLODE;
src/game/behaviors/bobomb.inc.c:    o->header.gfx.node.flags &= ~GRAPH_RENDER_INVISIBLE;
src/game/behaviors/bobomb.inc.c:    o->oHeldState = 0;
src/game/behaviors/bobomb.inc.c:    o->oAction = BOBOMB_ACT_PATROL;
src/game/behaviors/bobomb.inc.c:    o->header.gfx.node.flags &= ~GRAPH_RENDER_INVISIBLE;
src/game/behaviors/bobomb.inc.c:    o->oHeldState = 0;
src/game/behaviors/bobomb.inc.c:    o->oFlags &= ~0x8; /* bit 3 */
src/game/behaviors/bobomb.inc.c:    o->oForwardVel = 25.0;
src/game/behaviors/bobomb.inc.c:    o->oVelY = 20.0;
src/game/behaviors/bobomb.inc.c:    o->oAction = BOBOMB_ACT_LAUNCHED;
src/game/behaviors/bobomb.inc.c:            o->oAnimState = 1;
src/game/behaviors/bobomb.inc.c:            o->oAnimState = 0;
src/game/behaviors/bobomb.inc.c:            o->oAnimState = 1;
src/game/behaviors/bobomb.inc.c:            o->oAnimState = 0;
src/game/behaviors/bobomb.inc.c:    if (is_point_within_radius_of_mario(o->oPosX, o->oPosY, o->oPosZ, 4000) != 0) {
src/game/behaviors/bobomb.inc.c:        switch (o->oHeldState) {
src/game/behaviors/bobomb.inc.c:        curr_obj_random_blink(&o->oBobombBlinkTimer);
src/game/behaviors/bobomb.inc.c:        if (o->oBobombFuseLit == 1) {
src/game/behaviors/bobomb.inc.c:            if (o->oBobombFuseTimer >= 121)
src/game/behaviors/bobomb.inc.c:            if ((dustPeriodMinus1 & o->oBobombFuseTimer)
src/game/behaviors/bobomb.inc.c:            o->oBobombFuseTimer++;
src/game/behaviors/bobomb.inc.c:    o->oPosX += (s32)(random_float() * 80.0f) - 40;
src/game/behaviors/bobomb.inc.c:    o->oPosY += (s32)(random_float() * 80.0f) + 60;
src/game/behaviors/bobomb.inc.c:    o->oPosZ += (s32)(random_float() * 80.0f) - 40;
src/game/behaviors/bobomb.inc.c:    o->oGravity = 2.5;
src/game/behaviors/bobomb.inc.c:    o->oFriction = 0.8;
src/game/behaviors/bobomb.inc.c:    o->oBuoyancy = 1.3;
src/game/behaviors/bobomb.inc.c:    o->oInteractionSubtype = INT_SUBTYPE_NPC;
src/game/behaviors/bobomb.inc.c:    s16 sp1a = o->header.gfx.unk38.animFrame;
src/game/behaviors/bobomb.inc.c:    o->oBobombBuddyPosXCopy = o->oPosX;
src/game/behaviors/bobomb.inc.c:    o->oBobombBuddyPosYCopy = o->oPosY;
src/game/behaviors/bobomb.inc.c:    o->oBobombBuddyPosZCopy = o->oPosZ;
src/game/behaviors/bobomb.inc.c:    if (o->oDistanceToMario < 1000.0f)
src/game/behaviors/bobomb.inc.c:        o->oMoveAngleYaw = approach_s16_symmetric(o->oMoveAngleYaw, o->oAngleToMario, 0x140);
src/game/behaviors/bobomb.inc.c:    if (o->oInteractStatus == INT_STATUS_INTERACTED)
src/game/behaviors/bobomb.inc.c:        o->oAction = BOBOMB_BUDDY_ACT_TURN_TO_TALK;
src/game/behaviors/bobomb.inc.c:    switch (o->oBobombBuddyCannonStatus) {
src/game/behaviors/bobomb.inc.c:                    o->oBobombBuddyCannonStatus = BOBOMB_BUDDY_CANNON_OPENING;
src/game/behaviors/bobomb.inc.c:                    o->oBobombBuddyCannonStatus = BOBOMB_BUDDY_CANNON_STOP_TALKING;
src/game/behaviors/bobomb.inc.c:                o->oBobombBuddyCannonStatus = BOBOMB_BUDDY_CANNON_OPENED;
src/game/behaviors/bobomb.inc.c:                o->oBobombBuddyCannonStatus = BOBOMB_BUDDY_CANNON_STOP_TALKING;
src/game/behaviors/bobomb.inc.c:            o->activeFlags &= ~ACTIVE_FLAG_INITIATED_TIME_STOP;
src/game/behaviors/bobomb.inc.c:            o->oBobombBuddyHasTalkedToMario = BOBOMB_BUDDY_HAS_TALKED;
src/game/behaviors/bobomb.inc.c:            o->oInteractStatus = 0;
src/game/behaviors/bobomb.inc.c:            o->oAction = BOBOMB_BUDDY_ACT_IDLE;
src/game/behaviors/bobomb.inc.c:            o->oBobombBuddyCannonStatus = BOBOMB_BUDDY_CANNON_OPENED;
src/game/behaviors/bobomb.inc.c:        o->activeFlags |= ACTIVE_FLAG_INITIATED_TIME_STOP;
src/game/behaviors/bobomb.inc.c:        switch (o->oBobombBuddyRole) {
src/game/behaviors/bobomb.inc.c:                if (cutscene_object_with_dialog(CUTSCENE_DIALOG, o, o->oBehParams2ndByte)
src/game/behaviors/bobomb.inc.c:                    o->activeFlags &= ~ACTIVE_FLAG_INITIATED_TIME_STOP;
src/game/behaviors/bobomb.inc.c:                    o->oBobombBuddyHasTalkedToMario = BOBOMB_BUDDY_HAS_TALKED;
src/game/behaviors/bobomb.inc.c:                    o->oInteractStatus = 0;
src/game/behaviors/bobomb.inc.c:                    o->oAction = BOBOMB_BUDDY_ACT_IDLE;
src/game/behaviors/bobomb.inc.c:                    if ((o->oBehParams2ndByte == 3)&&(gMarioState->DeadRexMissionActivate == 0)) {
src/game/behaviors/bobomb.inc.c:                    if ((o->oBehParams2ndByte == 66)&&(gMarioState->DeadRexMissionActivate == 0)) {
src/game/behaviors/bobomb.inc.c:                    if (o->oBehParams2ndByte == 30) {
src/game/behaviors/bobomb.inc.c:                        o->oBehParams2ndByte = 1;
src/game/behaviors/bobomb.inc.c:                    if (o->oBehParams2ndByte == 36) {
src/game/behaviors/bobomb.inc.c:                        o->oBehParams2ndByte = 1;
src/game/behaviors/bobomb.inc.c:                    if ((o->oBehParams2ndByte == 41)&&(gMarioState->CheeseMissionActivate == 0)) {
src/game/behaviors/bobomb.inc.c:                    if ((o->oBehParams2ndByte == 42)&&(gMarioState->SockMissionActivate == 0)) {
src/game/behaviors/bobomb.inc.c:                if ((o->oBehParams2ndByte == 4 )&&(givestar)) {
src/game/behaviors/bobomb.inc.c:                    o->oBehParams2ndByte = 6;
src/game/behaviors/bobomb.inc.c:                if (cutscene_object_with_dialog(CUTSCENE_DIALOG, o, o->oBehParams2ndByte)
src/game/behaviors/bobomb.inc.c:                    o->activeFlags &= ~ACTIVE_FLAG_INITIATED_TIME_STOP;
src/game/behaviors/bobomb.inc.c:                    o->oBobombBuddyHasTalkedToMario = BOBOMB_BUDDY_HAS_TALKED;
src/game/behaviors/bobomb.inc.c:                    o->oInteractStatus = 0;
src/game/behaviors/bobomb.inc.c:                    o->oAction = BOBOMB_BUDDY_ACT_IDLE;
src/game/behaviors/bobomb.inc.c:                    if (o->oBehParams2ndByte == 6) {
src/game/behaviors/bobomb.inc.c:                        o->oBehParams2ndByte = 7;
src/game/behaviors/bobomb.inc.c:                        spawn_default_star(o->oPosX, o->oPosY+ 400.0f, o->oPosZ+400.0f);
src/game/behaviors/bobomb.inc.c:                    o->activeFlags &= ~ACTIVE_FLAG_INITIATED_TIME_STOP;
src/game/behaviors/bobomb.inc.c:                    o->oBobombBuddyHasTalkedToMario = BOBOMB_BUDDY_HAS_TALKED;
src/game/behaviors/bobomb.inc.c:                    o->oInteractStatus = 0;
src/game/behaviors/bobomb.inc.c:                    o->oAction = BOBOMB_BUDDY_ACT_IDLE;
src/game/behaviors/bobomb.inc.c:    s16 sp1e = o->header.gfx.unk38.animFrame;
src/game/behaviors/bobomb.inc.c:    o->oMoveAngleYaw = approach_s16_symmetric(o->oMoveAngleYaw, o->oAngleToMario, 0x1000);
src/game/behaviors/bobomb.inc.c:    if (((s16) o->oMoveAngleYaw == (s16) o->oAngleToMario) || (o->oBobombBuddyRole == 3))
src/game/behaviors/bobomb.inc.c:        o->oAction = BOBOMB_BUDDY_ACT_TALK;
src/game/behaviors/bobomb.inc.c:    if ((o->oBehParams2ndByte == 3)&&(gMarioState->DeadRexMissionActivate == 1)&&(gMarioState->DeadRexes > 9)) {
src/game/behaviors/bobomb.inc.c:        spawn_default_star(o->oPosX,o->oPosY+300.0f,o->oPosZ+200.0f);
src/game/behaviors/bobomb.inc.c:    if ((o->oBehParams2ndByte == 41)&&(gMarioState->CheeseMissionActivate == 1)&&(gMarioState->CheeseCollection > 4)) {
src/game/behaviors/bobomb.inc.c:        spawn_default_star(o->oPosX,o->oPosY+300.0f,o->oPosZ+200.0f);
src/game/behaviors/bobomb.inc.c:    if ((o->oBehParams2ndByte == 42)&&(gMarioState->SockMissionActivate == 1)&&(gMarioState->SockCollection > 6)) {
src/game/behaviors/bobomb.inc.c:        spawn_default_star(o->oPosX,o->oPosY+300.0f,o->oPosZ+200.0f);
src/game/behaviors/bobomb.inc.c:    if ((o->oBehParams2ndByte == 43)&&(gMarioState->SwitchPressed == 10)) {
src/game/behaviors/bobomb.inc.c:        spawn_default_star(o->oPosX,o->oPosY+300.0f,o->oPosZ+200.0f);
src/game/behaviors/bobomb.inc.c:        o->oBehParams2ndByte = 44;
src/game/behaviors/bobomb.inc.c:    if ((o->oBehParams2ndByte == 66)&&(gMarioState->DeadCowboyMissionActivate == 1)&&(gMarioState->DeadRexes > 6)) {
src/game/behaviors/bobomb.inc.c:        spawn_default_star(o->oPosX,o->oPosY+300.0f,o->oPosZ+200.0f);
src/game/behaviors/bobomb.inc.c:    switch (o->oAction) {
src/game/behaviors/bobomb.inc.c:    if (o->oBobombBuddyRole == 2) {
src/game/behaviors/bobomb.inc.c:        o->oExtraVariable1 ++;
src/game/behaviors/bobomb.inc.c:        o->oGraphYOffset = sins(o->oExtraVariable1*0x200) * 20.0f;
src/game/behaviors/bobomb.inc.c:    curr_obj_random_blink(&o->oBobombBuddyBlinkTimer);
src/game/behaviors/bobomb.inc.c:    if ((o->oTimer%20==0)&&(o->oBobombBuddyRole==3)) {
src/game/behaviors/bobomb.inc.c:        o->oVelY=12.0f;
src/game/behaviors/bobomb.inc.c:    if (o->oBobombBuddyRole==4) {
src/game/behaviors/bobomb.inc.c:        o->oAnimState = 0;
src/game/behaviors/bobomb.inc.c:            o->oAnimState = 1;
src/game/behaviors/bobomb.inc.c:    o->oInteractStatus = 0;
src/game/behaviors/bomp.inc.c:    o->oFaceAngleYaw -= 0x4000;
src/game/behaviors/bomp.inc.c:    o->oSmallBompInitX = o->oPosX;
src/game/behaviors/bomp.inc.c:    o->oTimer = random_float() * 100.0f;
src/game/behaviors/bomp.inc.c:    switch (o->oAction) {
src/game/behaviors/bomp.inc.c:            if (o->oTimer >= 101) {
src/game/behaviors/bomp.inc.c:                o->oAction = BOMP_ACT_POKE_OUT;
src/game/behaviors/bomp.inc.c:                o->oForwardVel = 30.0f;
src/game/behaviors/bomp.inc.c:            if (o->oPosX > 3450.0f) {
src/game/behaviors/bomp.inc.c:                o->oPosX = 3450.0f;
src/game/behaviors/bomp.inc.c:                o->oForwardVel = 0;
src/game/behaviors/bomp.inc.c:            if (o->oTimer == 15.0) {
src/game/behaviors/bomp.inc.c:                o->oAction = BOMP_ACT_EXTEND;
src/game/behaviors/bomp.inc.c:                o->oForwardVel = 40.0f;
src/game/behaviors/bomp.inc.c:            if (o->oPosX > 3830.0f) {
src/game/behaviors/bomp.inc.c:                o->oPosX = 3830.0f;
src/game/behaviors/bomp.inc.c:                o->oForwardVel = 0;
src/game/behaviors/bomp.inc.c:            if (o->oTimer == 60) {
src/game/behaviors/bomp.inc.c:                o->oAction = BOMP_ACT_RETRACT;
src/game/behaviors/bomp.inc.c:                o->oForwardVel = 10.0f;
src/game/behaviors/bomp.inc.c:                o->oMoveAngleYaw -= 0x8000;
src/game/behaviors/bomp.inc.c:            if (o->oPosX < 3330.0f) {
src/game/behaviors/bomp.inc.c:                o->oPosX = 3330.0f;
src/game/behaviors/bomp.inc.c:                o->oForwardVel = 0;
src/game/behaviors/bomp.inc.c:            if (o->oTimer == 90) {
src/game/behaviors/bomp.inc.c:                o->oAction = BOMP_ACT_POKE_OUT;
src/game/behaviors/bomp.inc.c:                o->oForwardVel = 25.0f;
src/game/behaviors/bomp.inc.c:                o->oMoveAngleYaw -= 0x8000;
src/game/behaviors/bomp.inc.c:    o->oMoveAngleYaw += 0x4000;
src/game/behaviors/bomp.inc.c:    o->oTimer = random_float() * 100.0f;
src/game/behaviors/bomp.inc.c:    switch (o->oAction) {
src/game/behaviors/bomp.inc.c:            if (o->oTimer >= 101) {
src/game/behaviors/bomp.inc.c:                o->oAction = BOMP_ACT_POKE_OUT;
src/game/behaviors/bomp.inc.c:                o->oForwardVel = 30.0f;
src/game/behaviors/bomp.inc.c:            if (o->oPosX > 3450.0f) {
src/game/behaviors/bomp.inc.c:                o->oPosX = 3450.0f;
src/game/behaviors/bomp.inc.c:                o->oForwardVel = 0;
src/game/behaviors/bomp.inc.c:            if (o->oTimer == 15.0) {
src/game/behaviors/bomp.inc.c:                o->oAction = BOMP_ACT_EXTEND;
src/game/behaviors/bomp.inc.c:                o->oForwardVel = 10.0f;
src/game/behaviors/bomp.inc.c:            if (o->oPosX > 3830.0f) {
src/game/behaviors/bomp.inc.c:                o->oPosX = 3830.0f;
src/game/behaviors/bomp.inc.c:                o->oForwardVel = 0;
src/game/behaviors/bomp.inc.c:            if (o->oTimer == 60) {
src/game/behaviors/bomp.inc.c:                o->oAction = BOMP_ACT_RETRACT;
src/game/behaviors/bomp.inc.c:                o->oForwardVel = 10.0f;
src/game/behaviors/bomp.inc.c:                o->oMoveAngleYaw -= 0x8000;
src/game/behaviors/bomp.inc.c:            if (o->oPosX < 3330.0f) {
src/game/behaviors/bomp.inc.c:                o->oPosX = 3330.0f;
src/game/behaviors/bomp.inc.c:                o->oForwardVel = 0;
src/game/behaviors/bomp.inc.c:            if (o->oTimer == 90) {
src/game/behaviors/bomp.inc.c:                o->oAction = BOMP_ACT_POKE_OUT;
src/game/behaviors/bomp.inc.c:                o->oForwardVel = 25.0f;
src/game/behaviors/bomp.inc.c:                o->oMoveAngleYaw -= 0x8000;
src/game/behaviors/boo.inc.c:    o->oForwardVel = 0.0f;
src/game/behaviors/boo.inc.c:    o->oVelY = 0.0f;
src/game/behaviors/boo.inc.c:    o->oGravity = 0.0f;
src/game/behaviors/boo.inc.c:    o->oBooInitialMoveYaw = o->oMoveAngleYaw;
src/game/behaviors/boo.inc.c:        if (o->activeFlags & ACTIVE_FLAG_IN_DIFFERENT_ROOM) {
src/game/behaviors/boo.inc.c:        if (o->oRoom == 10) {
src/game/behaviors/boo.inc.c:    } else if (o->oRoom == -1) {
src/game/behaviors/boo.inc.c:        if (o->oDistanceToMario < activationRadius) {
src/game/behaviors/boo.inc.c:            o->oDistanceToMario < activationRadius &&
src/game/behaviors/boo.inc.c:            (o->oRoom == gMarioCurrentRoom || gMarioCurrentRoom == 0)
src/game/behaviors/boo.inc.c:            boo->oMoveAngleYaw = random_u16();
src/game/behaviors/boo.inc.c:    if (o->oBooTargetOpacity != o->oOpacity) {
src/game/behaviors/boo.inc.c:        if (o->oBooTargetOpacity > o->oOpacity) {
src/game/behaviors/boo.inc.c:            o->oOpacity += 20;
src/game/behaviors/boo.inc.c:            if (o->oBooTargetOpacity < o->oOpacity) {
src/game/behaviors/boo.inc.c:                o->oOpacity = o->oBooTargetOpacity;
src/game/behaviors/boo.inc.c:            o->oOpacity -= 20;
src/game/behaviors/boo.inc.c:            if (o->oBooTargetOpacity > o->oOpacity) {
src/game/behaviors/boo.inc.c:                o->oOpacity = o->oBooTargetOpacity;
src/game/behaviors/boo.inc.c:    scale = (o->oOpacity/255.0f * 0.4 + 0.6) * o->oBooBaseScale;
src/game/behaviors/boo.inc.c:    o->oFaceAnglePitch = sins(o->oBooOscillationTimer) * 0x400;
src/game/behaviors/boo.inc.c:    if (o->oOpacity == 0xFF || ignoreOpacity == TRUE) {
src/game/behaviors/boo.inc.c:        o->header.gfx.scale[0] = sins(o->oBooOscillationTimer) * 0.08 + o->oBooBaseScale;
src/game/behaviors/boo.inc.c:        o->header.gfx.scale[1] = -sins(o->oBooOscillationTimer) * 0.08 + o->oBooBaseScale;
src/game/behaviors/boo.inc.c:        o->header.gfx.scale[2] = o->header.gfx.scale[0];
src/game/behaviors/boo.inc.c:        o->oGravity = sins(o->oBooOscillationTimer) * o->oBooBaseScale;
src/game/behaviors/boo.inc.c:        o->oBooOscillationTimer += 0x400;
src/game/behaviors/boo.inc.c:    s16 relativeAngleToMario = abs_angle_diff(o->oAngleToMario, o->oMoveAngleYaw);
src/game/behaviors/boo.inc.c:    s16 relativeMarioFaceAngle = abs_angle_diff(o->oMoveAngleYaw, gMarioObject->oFaceAngleYaw);
src/game/behaviors/boo.inc.c:    o->oVelY = 0.0f;
src/game/behaviors/boo.inc.c:        if (o->oOpacity == 40) {
src/game/behaviors/boo.inc.c:            o->oBooTargetOpacity = 255;
src/game/behaviors/boo.inc.c:        if (o->oOpacity > 180) {
src/game/behaviors/boo.inc.c:    } else if (o->oOpacity == 255) {
src/game/behaviors/boo.inc.c:        o->oBooTargetOpacity = 40;
src/game/behaviors/boo.inc.c:    o->oFlags &= ~OBJ_FLAG_SET_FACE_YAW_TO_MOVE_YAW;
src/game/behaviors/boo.inc.c:    o->oBooMoveYawBeforeHit = (f32) o->oMoveAngleYaw;
src/game/behaviors/boo.inc.c:        o->oBooMoveYawDuringHit = gMarioObject->oMoveAngleYaw;
src/game/behaviors/boo.inc.c:    } else if (coss((s16)o->oMoveAngleYaw - (s16)o->oAngleToMario) < 0.0f) {
src/game/behaviors/boo.inc.c:        o->oBooMoveYawDuringHit = o->oMoveAngleYaw;
src/game/behaviors/boo.inc.c:        o->oBooMoveYawDuringHit = (s16)(o->oMoveAngleYaw + 0x8000);
src/game/behaviors/boo.inc.c:    s32 oscillationVel = o->oTimer * 0x800 + 0x800;
src/game/behaviors/boo.inc.c:    o->oForwardVel = fVel;
src/game/behaviors/boo.inc.c:    o->oVelY = coss(oscillationVel)*10.0f;
src/game/behaviors/boo.inc.c:    o->oMoveAngleYaw = o->oBooMoveYawDuringHit;
src/game/behaviors/boo.inc.c:        o->oFaceAngleYaw  += D_8032F0CC[o->oTimer];
src/game/behaviors/boo.inc.c:        o->oFaceAngleRoll += D_8032F0CC[o->oTimer];
src/game/behaviors/boo.inc.c:    s32 oscillationVel = o->oTimer * 0x2000 - 0x3E000;
src/game/behaviors/boo.inc.c:    o->oFaceAngleYaw += coss(oscillationVel) * 0x400;
src/game/behaviors/boo.inc.c:    o->oMoveAngleYaw = o->oBooMoveYawBeforeHit;
src/game/behaviors/boo.inc.c:    o->oFlags |= OBJ_FLAG_SET_FACE_YAW_TO_MOVE_YAW;
src/game/behaviors/boo.inc.c:    o->oInteractStatus = 0;
src/game/behaviors/boo.inc.c:    if (o->oTimer == 0) {
src/game/behaviors/boo.inc.c:    if (o->oTimer < 32) {
src/game/behaviors/boo.inc.c:        boo_move_during_hit(FALSE, D_8032F0CC[o->oTimer]/5000.0f * a0);
src/game/behaviors/boo.inc.c:        o->oAction = 1;
src/game/behaviors/boo.inc.c:    if (o->oTimer == 0) {
src/game/behaviors/boo.inc.c:    if (o->oTimer < 32) {
src/game/behaviors/boo.inc.c:        boo_move_during_hit(TRUE, D_8032F0CC[o->oTimer]/5000.0f * a0);
src/game/behaviors/boo.inc.c:    } else if (o->oTimer < 48) {
src/game/behaviors/boo.inc.c:        o->oAction = 1;
src/game/behaviors/boo.inc.c:    if (o->oTimer == 0) {
src/game/behaviors/boo.inc.c:        o->oForwardVel = 40.0f;
src/game/behaviors/boo.inc.c:        o->oMoveAngleYaw = gMarioObject->oMoveAngleYaw;
src/game/behaviors/boo.inc.c:        o->oBooDeathStatus = BOO_DEATH_STATUS_DYING;
src/game/behaviors/boo.inc.c:        o->oFlags &= ~OBJ_FLAG_SET_FACE_YAW_TO_MOVE_YAW;
src/game/behaviors/boo.inc.c:        if (o->oTimer == 5) {
src/game/behaviors/boo.inc.c:            o->oBooTargetOpacity = 0;
src/game/behaviors/boo.inc.c:        if (o->oTimer > 30 || o->oMoveFlags & 0x200) {
src/game/behaviors/boo.inc.c:            o->oBooDeathStatus = BOO_DEATH_STATUS_DEAD;
src/game/behaviors/boo.inc.c:            if (o->oBooParentBigBoo != NULL) {
src/game/behaviors/boo.inc.c:                parentBigBoo = o->oBooParentBigBoo;
src/game/behaviors/boo.inc.c:                    parentBigBoo->oBigBooNumMinionBoosKilled++;
src/game/behaviors/boo.inc.c:                parentBigBoo->oBigBooNumMinionBoosKilled++;
src/game/behaviors/boo.inc.c:    o->oVelY = 5.0f;
src/game/behaviors/boo.inc.c:    o->oFaceAngleRoll += 0x800;
src/game/behaviors/boo.inc.c:    o->oFaceAngleYaw += 0x800;
src/game/behaviors/boo.inc.c:    if ((o->oInteractStatus & INT_STATUS_ATTACK_MASK) == attackType) {
src/game/behaviors/boo.inc.c:    if (o->oInteractStatus & INT_STATUS_INTERACTED) {
src/game/behaviors/boo.inc.c:        if ((o->oInteractStatus & INT_STATUS_WAS_ATTACKED) && obj_has_attack_type(ATTACK_FROM_ABOVE) == FALSE) {
src/game/behaviors/boo.inc.c:            o->oInteractStatus = 0;
src/game/behaviors/boo.inc.c:            o->oInteractStatus = 0;
src/game/behaviors/boo.inc.c:        o->oInteractType = 0x8000;
src/game/behaviors/boo.inc.c:            sp1A = o->oAngleToMario;
src/game/behaviors/boo.inc.c:        o->oVelY = 0.0f;
src/game/behaviors/boo.inc.c:            sp1C = o->oPosY - gMarioObject->oPosY;
src/game/behaviors/boo.inc.c:                o->oVelY = increment_velocity_toward_range(o->oPosY, gMarioObject->oPosY + 50.0f, 10.f, 2.0f);
src/game/behaviors/boo.inc.c:        cur_obj_set_vel_from_mario_vel(10.0f - o->oBooNegatedAggressiveness, a2);
src/game/behaviors/boo.inc.c:        if (o->oForwardVel != 0.0f) {
src/game/behaviors/boo.inc.c:        o->oInteractType = 0;
src/game/behaviors/boo.inc.c:        o->oForwardVel = 0.0f;
src/game/behaviors/boo.inc.c:        o->oVelY = 0.0f;
src/game/behaviors/boo.inc.c:        o->oGravity = 0.0f;
src/game/behaviors/boo.inc.c:    o->activeFlags |= ACTIVE_FLAG_MOVE_THROUGH_GRATE;
src/game/behaviors/boo.inc.c:    if (o->oBehParams2ndByte == 2) {
src/game/behaviors/boo.inc.c:        o->oRoom = 10;
src/game/behaviors/boo.inc.c:    o->oMoveAngleYaw = o->oBooInitialMoveYaw;
src/game/behaviors/boo.inc.c:    o->oBooParentBigBoo = cur_obj_nearest_object_with_behavior(bhvGhostHuntBigBoo);
src/game/behaviors/boo.inc.c:    o->oBooBaseScale = 1.0f;
src/game/behaviors/boo.inc.c:    o->oBooTargetOpacity = 0xFF;
src/game/behaviors/boo.inc.c:        if (o->oBehParams2ndByte == 2) {
src/game/behaviors/boo.inc.c:            o->oBooParentBigBoo = NULL;
src/game/behaviors/boo.inc.c:            o->oAction = 5;
src/game/behaviors/boo.inc.c:            o->oAction = 1;
src/game/behaviors/boo.inc.c:    if (o->oTimer < 30) {
src/game/behaviors/boo.inc.c:        o->oVelY = 0.0f;
src/game/behaviors/boo.inc.c:        o->oForwardVel = 13.0f;
src/game/behaviors/boo.inc.c:        o->oWallHitboxRadius = 0.0f;
src/game/behaviors/boo.inc.c:        o->oAction = 1;
src/game/behaviors/boo.inc.c:        o->oWallHitboxRadius = 30.0f;
src/game/behaviors/boo.inc.c:    if (o->oTimer == 0) {
src/game/behaviors/boo.inc.c:        o->oBooNegatedAggressiveness = -random_float() * 5.0f;
src/game/behaviors/boo.inc.c:        o->oBooTurningSpeed = (s32)(random_float() * 128.0f);
src/game/behaviors/boo.inc.c:    boo_chase_mario(-100.0f, o->oBooTurningSpeed + 0x180, 0.5f);
src/game/behaviors/boo.inc.c:        o->oAction = 0;
src/game/behaviors/boo.inc.c:        o->oAction = 2;
src/game/behaviors/boo.inc.c:        o->oAction = 3;
src/game/behaviors/boo.inc.c:        o->oAction = 1;
src/game/behaviors/boo.inc.c:    if (obj_has_behavior(o->parentObj, bhvMerryGoRoundBooManager)) {
src/game/behaviors/boo.inc.c:        if (o->activeFlags == ACTIVE_FLAG_DEACTIVATED) {
src/game/behaviors/boo.inc.c:            o->parentObj->oMerryGoRoundBooManagerNumBoosKilled++;
src/game/behaviors/boo.inc.c:    if (o->oDistanceToMario < 4000.0f) {
src/game/behaviors/boo.inc.c:        o->header.gfx.node.flags &= ~GRAPH_RENDER_INVISIBLE;
src/game/behaviors/boo.inc.c:        o->header.gfx.node.flags |= GRAPH_RENDER_INVISIBLE;
src/game/behaviors/boo.inc.c:    o->oInteractStatus = 0;
src/game/behaviors/boo.inc.c:        o->oBigBooNumMinionBoosKilled = 10;
src/game/behaviors/boo.inc.c:    o->oBooParentBigBoo = NULL;
src/game/behaviors/boo.inc.c:    if (boo_should_be_active() && gDebugInfo[5][0] + 5 <= o->oBigBooNumMinionBoosKilled) {
src/game/behaviors/boo.inc.c:    if (boo_should_be_active() && o->oBigBooNumMinionBoosKilled >= 5) {
src/game/behaviors/boo.inc.c:        o->oAction = 1;
src/game/behaviors/boo.inc.c:        o->oMoveAngleYaw = o->oBooInitialMoveYaw;
src/game/behaviors/boo.inc.c:        o->oBooTargetOpacity = 0xFF;
src/game/behaviors/boo.inc.c:        o->oBooBaseScale = 3.0f;
src/game/behaviors/boo.inc.c:        o->oHealth = 5;
src/game/behaviors/boo.inc.c:    if (o->oHealth == 3) {
src/game/behaviors/boo.inc.c:    } else if (o->oHealth == 2) {
src/game/behaviors/boo.inc.c:            o->oAction = 0;
src/game/behaviors/boo.inc.c:        o->oAction = 0;
src/game/behaviors/boo.inc.c:        o->oAction = 2;
src/game/behaviors/boo.inc.c:        o->oAction = 3;
src/game/behaviors/boo.inc.c:        o->oAction = 1;
src/game/behaviors/boo.inc.c:    if (o->oTimer == 0) {
src/game/behaviors/boo.inc.c:        o->oHealth--;
src/game/behaviors/boo.inc.c:    if (o->oHealth == 0) {
src/game/behaviors/boo.inc.c:            o->oAction = 4;
src/game/behaviors/boo.inc.c:            if (o->oBehParams2ndByte == 0) {
src/game/behaviors/boo.inc.c:            } else if (o->oBehParams2ndByte == 1) {
src/game/behaviors/boo.inc.c:        if (o->oTimer == 0) {
src/game/behaviors/boo.inc.c:            o->oBooBaseScale -= 0.5;
src/game/behaviors/boo.inc.c:            o->oAction = 1;
src/game/behaviors/boo.inc.c:    if (o->oBehParams2ndByte == 0) {
src/game/behaviors/boo.inc.c:        if (o->oTimer > 60 && o->oDistanceToMario < 600.0f) {
src/game/behaviors/boo.inc.c:    o->oGraphYOffset = o->oBooBaseScale * 60.0f;
src/game/behaviors/boo.inc.c:    o->oInteractStatus = 0;
src/game/behaviors/boo.inc.c:    o->oBooParentBigBoo = NULL;
src/game/behaviors/boo.inc.c:    o->oBooTargetOpacity = 0xFF;
src/game/behaviors/boo.inc.c:    o->oBooBaseScale = 2.0f;
src/game/behaviors/boo.inc.c:        o->oAction = 1;
src/game/behaviors/boo.inc.c:        o->oAction = 0;
src/game/behaviors/boo.inc.c:        o->oAction = 2;
src/game/behaviors/boo.inc.c:        o->oAction = 3;
src/game/behaviors/boo.inc.c:        o->oAction = 1;
src/game/behaviors/boo.inc.c:        cage->oBehParams = o->oBehParams;
src/game/behaviors/boo.inc.c:    o->oInteractStatus = 0;
src/game/behaviors/boo.inc.c:    switch (o->oAction) {
src/game/behaviors/boo.inc.c:            if (o->oDistanceToMario < 1000.0f) {
src/game/behaviors/boo.inc.c:                if (o->oMerryGoRoundBooManagerNumBoosKilled < 5) {
src/game/behaviors/boo.inc.c:                    if (o->oMerryGoRoundBooManagerNumBoosSpawned != 5) {
src/game/behaviors/boo.inc.c:                        if (o->oMerryGoRoundBooManagerNumBoosSpawned - o->oMerryGoRoundBooManagerNumBoosKilled < 2) {
src/game/behaviors/boo.inc.c:                            o->oMerryGoRoundBooManagerNumBoosSpawned++;
src/game/behaviors/boo.inc.c:                    o->oAction++;
src/game/behaviors/boo.inc.c:                if (o->oMerryGoRoundBooManagerNumBoosKilled > 4) {
src/game/behaviors/boo.inc.c:                    o->oAction = 2;
src/game/behaviors/boo.inc.c:            if (o->oTimer > 60) {
src/game/behaviors/boo.inc.c:                o->oAction = 0;
src/game/behaviors/boo.inc.c:    o->oBooBaseScale = 2.0f;
src/game/behaviors/boo.inc.c:    if (o->oAction == 0) {
src/game/behaviors/boo.inc.c:            o->oAction++;
src/game/behaviors/boo.inc.c:    } else if (o->oAction == 1) {
src/game/behaviors/boo.inc.c:        o->oOpacity = 180;
src/game/behaviors/boo.inc.c:        if (o->oTimer == 0) {
src/game/behaviors/boo.inc.c:            cur_obj_scale(o->oBooBaseScale);
src/game/behaviors/boo.inc.c:        if (o->oDistanceToMario < 1000.0f) {
src/game/behaviors/boo.inc.c:            o->oAction++;
src/game/behaviors/boo.inc.c:        o->oForwardVel = 0.0f;
src/game/behaviors/boo.inc.c:        targetAngle = o->oAngleToMario;
src/game/behaviors/boo.inc.c:        o->oHomeX = -1000.0f;
src/game/behaviors/boo.inc.c:        o->oHomeZ = -9000.0f;
src/game/behaviors/boo.inc.c:        if (o->oPosZ < -5000.0f) {
src/game/behaviors/boo.inc.c:            if (o->oOpacity > 0) {
src/game/behaviors/boo.inc.c:                o->oOpacity -= 20;
src/game/behaviors/boo.inc.c:                o->oOpacity = 0;
src/game/behaviors/boo.inc.c:        if (o->activeFlags & ACTIVE_FLAG_IN_DIFFERENT_ROOM) {
src/game/behaviors/boo.inc.c:            o->oAction = 1;
src/game/behaviors/boo.inc.c:    o->oVelY = 0.0f;
src/game/behaviors/boo.inc.c:    switch (o->oBehParams2ndByte) {
src/game/behaviors/boo.inc.c:    switch(o->oAction) {
src/game/behaviors/boo.inc.c:            o->oPosY = o->oHomeY - 620.0f;
src/game/behaviors/boo.inc.c:            o->oAction++;
src/game/behaviors/boo.inc.c:            o->oPosY += 8.0f;
src/game/behaviors/boo.inc.c:            if (o->oPosY > targetY) {
src/game/behaviors/boo.inc.c:                o->oPosY = targetY;
src/game/behaviors/boo.inc.c:                o->oAction++;
src/game/behaviors/boo.inc.c:            if (o->oTimer == 0) {
src/game/behaviors/boo.inc.c:            if (cur_obj_move_up_and_down(o->oTimer)) {
src/game/behaviors/boo.inc.c:                o->oAction++;
src/game/behaviors/boo.inc.c:            if (o->oTimer == 0 && o->oBehParams2ndByte == 1) {
src/game/behaviors/boo_cage.inc.c:    switch (o->oAction) {
src/game/behaviors/boo_cage.inc.c:                o->oAction = BOO_CAGE_ACT_ON_GROUND;
src/game/behaviors/boo_cage.inc.c:                obj_copy_pos_and_angle(o, o->parentObj);
src/game/behaviors/boo_cage.inc.c:            o->oFaceAnglePitch = 0;
src/game/behaviors/boo_cage.inc.c:            o->oFaceAngleRoll = 0;
src/game/behaviors/boo_cage.inc.c:            if (o->oMoveFlags & OBJ_MOVE_LANDED) {
src/game/behaviors/boo_cage.inc.c:            if (o->oMoveFlags
src/game/behaviors/boo_cage.inc.c:                o->oAction++;
src/game/behaviors/boo_cage.inc.c:                o->oAction++;
src/game/behaviors/boo_cage.inc.c:            if (o->oTimer > 100) {
src/game/behaviors/boo_cage.inc.c:                o->oAction++;
src/game/behaviors/boulder.inc.c:    o->oHomeX = o->oPosX;
src/game/behaviors/boulder.inc.c:    o->oHomeY = o->oPosY;
src/game/behaviors/boulder.inc.c:    o->oHomeZ = o->oPosZ;
src/game/behaviors/boulder.inc.c:    o->oGravity = 8.0f;
src/game/behaviors/boulder.inc.c:    o->oFriction = 0.999f;
src/game/behaviors/boulder.inc.c:    o->oBuoyancy = 2.0f;
src/game/behaviors/boulder.inc.c:    if ((sp1E & 0x09) == 0x01 && o->oVelY > 10.0f) {
src/game/behaviors/boulder.inc.c:    if (o->oForwardVel > 70.0)
src/game/behaviors/boulder.inc.c:        o->oForwardVel = 70.0f;
src/game/behaviors/boulder.inc.c:    if (o->oPosY < -1000.0f)
src/game/behaviors/boulder.inc.c:        o->activeFlags = ACTIVE_FLAG_DEACTIVATED;
src/game/behaviors/boulder.inc.c:    o->oGraphYOffset = 270.0f;
src/game/behaviors/boulder.inc.c:    switch (o->oAction) {
src/game/behaviors/boulder.inc.c:            o->oForwardVel = 40.0f;
src/game/behaviors/boulder.inc.c:            o->oAction = 1;
src/game/behaviors/boulder.inc.c:    if (o->oTimer >= 256) {
src/game/behaviors/boulder.inc.c:        o->oTimer = 0;
src/game/behaviors/boulder.inc.c:    if (!current_mario_room_check(4) || is_point_within_radius_of_mario(o->oPosX, o->oPosY, o->oPosZ, 1500))
src/game/behaviors/boulder.inc.c:    if (is_point_within_radius_of_mario(o->oPosX, o->oPosY, o->oPosZ, 6000)) {
src/game/behaviors/boulder.inc.c:        if ((o->oTimer & 0x3F) == 0) {
src/game/behaviors/boulder.inc.c:        if ((o->oTimer & 0x7F) == 0) {
src/game/behaviors/bouncing_fireball.inc.c:    o->activeFlags |= ACTIVE_FLAG_UNK10;
src/game/behaviors/bouncing_fireball.inc.c:    switch (o->oAction) {
src/game/behaviors/bouncing_fireball.inc.c:            if (o->oTimer == 0) {
src/game/behaviors/bouncing_fireball.inc.c:                o->oAnimState = random_float() * 10.0f;
src/game/behaviors/bouncing_fireball.inc.c:                o->oVelY = 30.0f;
src/game/behaviors/bouncing_fireball.inc.c:            if (o->oMoveFlags & 1)
src/game/behaviors/bouncing_fireball.inc.c:                o->oAction++;
src/game/behaviors/bouncing_fireball.inc.c:            if (o->oTimer == 0) {
src/game/behaviors/bouncing_fireball.inc.c:                o->oVelY = 50.0f;
src/game/behaviors/bouncing_fireball.inc.c:                o->oForwardVel = 30.0f;
src/game/behaviors/bouncing_fireball.inc.c:            if (o->oMoveFlags & (0x40 | 0x10 | 0x2) && o->oTimer > 100)
src/game/behaviors/bouncing_fireball.inc.c:    if (o->oTimer > 300)
src/game/behaviors/bouncing_fireball.inc.c:    o->oInteractStatus = 0;
src/game/behaviors/bouncing_fireball.inc.c:    switch (o->oAction) {
src/game/behaviors/bouncing_fireball.inc.c:            if (o->oDistanceToMario < 2000.0f)
src/game/behaviors/bouncing_fireball.inc.c:                o->oAction = 1;
src/game/behaviors/bouncing_fireball.inc.c:            sp28 = (10 - o->oTimer) * 0.5;
src/game/behaviors/bouncing_fireball.inc.c:            if (o->oTimer == 0)
src/game/behaviors/bouncing_fireball.inc.c:            if (o->oTimer > 10)
src/game/behaviors/bouncing_fireball.inc.c:                o->oAction++;
src/game/behaviors/bouncing_fireball.inc.c:            if (o->oTimer == 0)
src/game/behaviors/bouncing_fireball.inc.c:                o->oBouncingFireBallUnkF4 = random_float() * 100.0f;
src/game/behaviors/bouncing_fireball.inc.c:            if (o->oBouncingFireBallUnkF4 + 100 < o->oTimer)
src/game/behaviors/bouncing_fireball.inc.c:                o->oAction = 0;
src/game/behaviors/bowling_ball.inc.c:    o->oGravity = 5.5f;
src/game/behaviors/bowling_ball.inc.c:    o->oFriction = 1.0f;
src/game/behaviors/bowling_ball.inc.c:    o->oBuoyancy = 2.0f;
src/game/behaviors/bowling_ball.inc.c:    if (o->oInteractStatus & INT_STATUS_INTERACTED)
src/game/behaviors/bowling_ball.inc.c:        o->oInteractStatus = 0;
src/game/behaviors/bowling_ball.inc.c:    switch (o->oBehParams2ndByte) {
src/game/behaviors/bowling_ball.inc.c:            o->oPathedWaypointsS16 = segmented_to_virtual(bob_seg7_metal_ball_path0);
src/game/behaviors/bowling_ball.inc.c:            o->oPathedWaypointsS16 = segmented_to_virtual(ttm_seg7_trajectory_070170A0);
src/game/behaviors/bowling_ball.inc.c:            o->oPathedWaypointsS16 = segmented_to_virtual(bob_seg7_metal_ball_path1);
src/game/behaviors/bowling_ball.inc.c:            o->oPathedWaypointsS16 = D_803315B4;
src/game/behaviors/bowling_ball.inc.c:            o->oPathedWaypointsS16 = D_80331608;
src/game/behaviors/bowling_ball.inc.c:    o->oBowlingBallTargetYaw = o->oPathedTargetYaw;
src/game/behaviors/bowling_ball.inc.c:    o->oMoveAngleYaw = approach_s16_symmetric(o->oMoveAngleYaw, o->oBowlingBallTargetYaw, 0x400);
src/game/behaviors/bowling_ball.inc.c:    if (o->oForwardVel > 70.0) {
src/game/behaviors/bowling_ball.inc.c:        o->oForwardVel = 70.0;
src/game/behaviors/bowling_ball.inc.c:        if (is_point_within_radius_of_mario(o->oPosX, o->oPosY, o->oPosZ, 7000)) {
src/game/behaviors/bowling_ball.inc.c:        o->activeFlags = ACTIVE_FLAG_DEACTIVATED;
src/game/behaviors/bowling_ball.inc.c:    if ((collisionFlags & OBJ_COL_FLAG_GROUNDED) && (o->oVelY > 5.0f))
src/game/behaviors/bowling_ball.inc.c:    o->oMoveAngleYaw = o->oPathedTargetYaw;
src/game/behaviors/bowling_ball.inc.c:    switch (o->oBehParams2ndByte) {
src/game/behaviors/bowling_ball.inc.c:            o->oForwardVel = 20.0f;
src/game/behaviors/bowling_ball.inc.c:            o->oForwardVel = 10.0f;
src/game/behaviors/bowling_ball.inc.c:            o->oForwardVel = 20.0f;
src/game/behaviors/bowling_ball.inc.c:            o->oForwardVel = 25.0f;
src/game/behaviors/bowling_ball.inc.c:            o->oForwardVel = 10.0f;
src/game/behaviors/bowling_ball.inc.c:            o->oGraphYOffset = 39.0f;
src/game/behaviors/bowling_ball.inc.c:    switch (o->oAction) {
src/game/behaviors/bowling_ball.inc.c:            o->oAction = BBALL_ACT_ROLL;
src/game/behaviors/bowling_ball.inc.c:    if (o->oBehParams2ndByte != 4)
src/game/behaviors/bowling_ball.inc.c:        set_camera_shake_from_point(SHAKE_POS_BOWLING_BALL, o->oPosX, o->oPosY, o->oPosZ);
src/game/behaviors/bowling_ball.inc.c:    switch (o->oBehParams2ndByte) {
src/game/behaviors/bowling_ball.inc.c:            o->oBBallSpawnerMaxSpawnDist = 7000.0f;
src/game/behaviors/bowling_ball.inc.c:            o->oBBallSpawnerSpawnOdds = 2.0f;
src/game/behaviors/bowling_ball.inc.c:            o->oBBallSpawnerMaxSpawnDist = 8000.0f;
src/game/behaviors/bowling_ball.inc.c:            o->oBBallSpawnerSpawnOdds = 1.0f;
src/game/behaviors/bowling_ball.inc.c:            o->oBBallSpawnerMaxSpawnDist = 6000.0f;
src/game/behaviors/bowling_ball.inc.c:            o->oBBallSpawnerSpawnOdds = 2.0f;
src/game/behaviors/bowling_ball.inc.c:    if (o->oTimer == 256)
src/game/behaviors/bowling_ball.inc.c:        o->oTimer = 0;
src/game/behaviors/bowling_ball.inc.c:    if (is_point_within_radius_of_mario(o->oPosX, o->oPosY, o->oPosZ, 1000)
src/game/behaviors/bowling_ball.inc.c:        || (o->oPosY < gMarioObject->header.gfx.pos[1]))
src/game/behaviors/bowling_ball.inc.c:    if ((o->oTimer & o->oBBallSpawnerPeriodMinus1) == 0) /* Modulus */
src/game/behaviors/bowling_ball.inc.c:        if (is_point_within_radius_of_mario(o->oPosX, o->oPosY, o->oPosZ, o->oBBallSpawnerMaxSpawnDist)) {
src/game/behaviors/bowling_ball.inc.c:            if ((s32)(random_float() * o->oBBallSpawnerSpawnOdds) == 0) {
src/game/behaviors/bowling_ball.inc.c:                bowlingBall->oBehParams2ndByte = o->oBehParams2ndByte;
src/game/behaviors/bowling_ball.inc.c:    if (o->oTimer == 256)
src/game/behaviors/bowling_ball.inc.c:        o->oTimer = 0;
src/game/behaviors/bowling_ball.inc.c:    if (is_point_within_radius_of_mario(o->oPosX, o->oPosY, o->oPosZ, 800)
src/game/behaviors/bowling_ball.inc.c:        || (o->oPosY < gMarioObject->header.gfx.pos[1]))
src/game/behaviors/bowling_ball.inc.c:    if ((o->oTimer % 64) == 0) {
src/game/behaviors/bowling_ball.inc.c:        if (is_point_within_radius_of_mario(o->oPosX, o->oPosY, o->oPosZ, 12000)) {
src/game/behaviors/bowling_ball.inc.c:                bowlingBall->oBehParams2ndByte = o->oBehParams2ndByte;
src/game/behaviors/bowling_ball.inc.c:    o->oGravity = 12.0f;
src/game/behaviors/bowling_ball.inc.c:    o->oFriction = 1.0f;
src/game/behaviors/bowling_ball.inc.c:    o->oBuoyancy = 2.0f;
src/game/behaviors/bowling_ball.inc.c:    find_floor_height_and_data(o->oPosX, o->oPosY, o->oPosZ, &sp1c);
src/game/behaviors/bowling_ball.inc.c:        o->oForwardVel = 28.0f;
src/game/behaviors/bowling_ball.inc.c:    set_camera_shake_from_point(SHAKE_POS_BOWLING_BALL, o->oPosX, o->oPosY, o->oPosZ);
src/game/behaviors/bowling_ball.inc.c:    o->oGravity = 5.5f;
src/game/behaviors/bowling_ball.inc.c:    o->oFriction = 1.0f;
src/game/behaviors/bowling_ball.inc.c:    o->oBuoyancy = 2.0f;
src/game/behaviors/bowling_ball.inc.c:    o->oHomeX = o->oPosX;
src/game/behaviors/bowling_ball.inc.c:    o->oHomeY = o->oPosY;
src/game/behaviors/bowling_ball.inc.c:    o->oHomeZ = o->oPosZ;
src/game/behaviors/bowling_ball.inc.c:    o->oForwardVel = 0;
src/game/behaviors/bowling_ball.inc.c:    o->oMoveAngleYaw = 0;
src/game/behaviors/bowling_ball.inc.c:    if (o->oForwardVel > 10.0f) {
src/game/behaviors/bowling_ball.inc.c:        set_camera_shake_from_point(SHAKE_POS_BOWLING_BALL, o->oPosX, o->oPosY, o->oPosZ);
src/game/behaviors/bowling_ball.inc.c:    if (!is_point_within_radius_of_mario(o->oPosX, o->oPosY, o->oPosZ, 6000)) {
src/game/behaviors/bowling_ball.inc.c:        o->header.gfx.node.flags |= GRAPH_RENDER_INVISIBLE;
src/game/behaviors/bowling_ball.inc.c:        o->oPosX = o->oHomeX;
src/game/behaviors/bowling_ball.inc.c:        o->oPosY = o->oHomeY;
src/game/behaviors/bowling_ball.inc.c:        o->oPosZ = o->oHomeZ;
src/game/behaviors/bowling_ball.inc.c:        o->oAction = FREE_BBALL_ACT_RESET;
src/game/behaviors/bowling_ball.inc.c:    o->oGravity = 5.5f;
src/game/behaviors/bowling_ball.inc.c:    switch (o->oAction) {
src/game/behaviors/bowling_ball.inc.c:            if (is_point_within_radius_of_mario(o->oPosX, o->oPosY, o->oPosZ, 3000)) {
src/game/behaviors/bowling_ball.inc.c:                o->oAction = FREE_BBALL_ACT_ROLL;
src/game/behaviors/bowling_ball.inc.c:                o->header.gfx.node.flags &= ~GRAPH_RENDER_INVISIBLE;
src/game/behaviors/bowling_ball.inc.c:            if (is_point_within_radius_of_mario(o->oPosX, o->oPosY, o->oPosZ, 5000))
src/game/behaviors/bowling_ball.inc.c:                o->oAction = FREE_BBALL_ACT_IDLE;
src/game/behaviors/bowser.inc.c:    struct Object *bowser = o->parentObj;
src/game/behaviors/bowser.inc.c:        o->oAction = 2;
src/game/behaviors/bowser.inc.c:    if (o->oTimer > 30)
src/game/behaviors/bowser.inc.c:        o->oAction = 0;
src/game/behaviors/bowser.inc.c:    if (o->parentObj->oAction == 19) {
src/game/behaviors/bowser.inc.c:        o->parentObj->oIntangibleTimer = -1;
src/game/behaviors/bowser.inc.c:        o->oAction = 0;
src/game/behaviors/bowser.inc.c:    o->oParentRelativePosX = 90.0f;
src/game/behaviors/bowser.inc.c:    if (o->parentObj->oAction == 4)
src/game/behaviors/bowser.inc.c:        o->parentObj->oIntangibleTimer = -1;
src/game/behaviors/bowser.inc.c:    o->oInteractStatus = 0;
src/game/behaviors/bowser.inc.c:    struct Object *bowser = o->parentObj;
src/game/behaviors/bowser.inc.c:            o->oPosX = bowser->oPosX + (sp28 * sp20 + sp2C * sp24);
src/game/behaviors/bowser.inc.c:            o->oPosY = bowser->oPosY + sp1C[5 * sp30 + 1];
src/game/behaviors/bowser.inc.c:            o->oPosZ = bowser->oPosZ + (sp28 * sp24 - sp2C * sp20);
src/game/behaviors/bowser.inc.c:            o->oMoveAnglePitch = sp1C[5 * sp30 + 4] + 0xC00;
src/game/behaviors/bowser.inc.c:            o->oMoveAngleYaw = sp1C[5 * sp30 + 3] + (s16) bowser->oMoveAngleYaw;
src/game/behaviors/bowser.inc.c:    obj_copy_pos_and_angle(o, o->parentObj);
src/game/behaviors/bowser.inc.c:    if (o->parentObj->oAction == 4) {
src/game/behaviors/bowser.inc.c:        if (o->parentObj->oSubAction == 11)
src/game/behaviors/bowser.inc.c:            o->oInteractType = 0;
src/game/behaviors/bowser.inc.c:            o->oInteractType = 0x800000;
src/game/behaviors/bowser.inc.c:        o->oInteractType = 0x800000;
src/game/behaviors/bowser.inc.c:        o->oInteractType = 8;
src/game/behaviors/bowser.inc.c:        if (o->parentObj->oOpacity < 100)
src/game/behaviors/bowser.inc.c:    if (o->parentObj->oHeldState != HELD_FREE)
src/game/behaviors/bowser.inc.c:    o->oInteractStatus = 0;
src/game/behaviors/bowser.inc.c:    if (o->oBehParams2ndByte == 2) {
src/game/behaviors/bowser.inc.c:        wave->oPosY = o->oFloorHeight;
src/game/behaviors/bowser.inc.c:    if (o->oMoveFlags & 1) {
src/game/behaviors/bowser.inc.c:#define BITDW (o->oBehParams2ndByte == 0)
src/game/behaviors/bowser.inc.c:#define BITFS (o->oBehParams2ndByte == 1)
src/game/behaviors/bowser.inc.c:#define BITS (o->oBehParams2ndByte == 2)
src/game/behaviors/bowser.inc.c:        o->oForwardVel = 3.0f;
src/game/behaviors/bowser.inc.c:    o->oForwardVel = 3.0f;
src/game/behaviors/bowser.inc.c:        o->oForwardVel = 0.0f;
src/game/behaviors/bowser.inc.c:    if (o->oBowserUnk88 == 0)
src/game/behaviors/bowser.inc.c:        o->oAction = 5;
src/game/behaviors/bowser.inc.c:    else if (o->oBowserUnk88 == 1)
src/game/behaviors/bowser.inc.c:        o->oAction = 6;
src/game/behaviors/bowser.inc.c:    else if (o->oBehParams2ndByte == 1)
src/game/behaviors/bowser.inc.c:        o->oAction = 13;
src/game/behaviors/bowser.inc.c:        o->oAction = 0;
src/game/behaviors/bowser.inc.c:    o->oForwardVel = 0.0f;
src/game/behaviors/bowser.inc.c:    if (o->oSubAction == 0) {
src/game/behaviors/bowser.inc.c:            o->oSubAction++;
src/game/behaviors/bowser.inc.c:    } else if (o->oSubAction == 1) {
src/game/behaviors/bowser.inc.c:            o->oSubAction++;
src/game/behaviors/bowser.inc.c:        if (o->oBowserUnk88 == 1)
src/game/behaviors/bowser.inc.c:            o->oBowserUnk88 = 0;
src/game/behaviors/bowser.inc.c:        o->oAction = D_8032F4FC[gDebugInfo[5][2] & 0xf];
src/game/behaviors/bowser.inc.c:    if (o->oBowserUnk110 == 0) {
src/game/behaviors/bowser.inc.c:        if (o->oBowserUnkF4 & 2) {
src/game/behaviors/bowser.inc.c:            if (o->oDistanceToMario < 1500.0f)
src/game/behaviors/bowser.inc.c:                o->oAction = 15; // nearby
src/game/behaviors/bowser.inc.c:                o->oAction = 17; // far away
src/game/behaviors/bowser.inc.c:            o->oAction = 14;
src/game/behaviors/bowser.inc.c:        o->oBowserUnk110++;
src/game/behaviors/bowser.inc.c:        o->oBowserUnk110 = 0;
src/game/behaviors/bowser.inc.c:                o->oAction = 3; // rare 1/10 chance
src/game/behaviors/bowser.inc.c:                o->oAction = 14; // common
src/game/behaviors/bowser.inc.c:            o->oAction = 14; // ensure demo starts with action 14.
src/game/behaviors/bowser.inc.c:            o->oAction = 3; // rare 1/10 chance
src/game/behaviors/bowser.inc.c:            o->oAction = 14; // common
src/game/behaviors/bowser.inc.c:    if (o->oBowserUnk110 == 0) {
src/game/behaviors/bowser.inc.c:        if (o->oBowserUnkF4 & 2) {
src/game/behaviors/bowser.inc.c:            if (o->oDistanceToMario < 1300.0f) // nearby
src/game/behaviors/bowser.inc.c:                    o->oAction = 16;
src/game/behaviors/bowser.inc.c:                    o->oAction = 9;
src/game/behaviors/bowser.inc.c:                o->oAction = 7;
src/game/behaviors/bowser.inc.c:                if (500.0f < o->oBowserDistToCentre && o->oBowserDistToCentre < 1500.0f
src/game/behaviors/bowser.inc.c:                    o->oAction = 13;
src/game/behaviors/bowser.inc.c:            o->oAction = 14;
src/game/behaviors/bowser.inc.c:        o->oBowserUnk110++;
src/game/behaviors/bowser.inc.c:        o->oBowserUnk110 = 0;
src/game/behaviors/bowser.inc.c:        o->oAction = 14;
src/game/behaviors/bowser.inc.c:    if (o->oBowserUnkF4 & 2) {
src/game/behaviors/bowser.inc.c:        if (o->oDistanceToMario < 1000.0f) {
src/game/behaviors/bowser.inc.c:                o->oAction = 9;
src/game/behaviors/bowser.inc.c:                o->oAction = 8;
src/game/behaviors/bowser.inc.c:                o->oAction = 16;
src/game/behaviors/bowser.inc.c:            o->oAction = 13;
src/game/behaviors/bowser.inc.c:            o->oAction = 7;
src/game/behaviors/bowser.inc.c:        o->oAction = 14;
src/game/behaviors/bowser.inc.c:    o->oAction = 13;
src/game/behaviors/bowser.inc.c:    switch (o->oBowserUnk110) {
src/game/behaviors/bowser.inc.c:            if (o->oBowserUnk106 == 0)
src/game/behaviors/bowser.inc.c:            o->oBowserUnk110 = 1;
src/game/behaviors/bowser.inc.c:            o->oBowserUnk110 = 0;
src/game/behaviors/bowser.inc.c:            o->oAction = 14;
src/game/behaviors/bowser.inc.c:    if (o->oVelY < 0 && o->oPosY < (o->oHomeY - 300.0f)) {
src/game/behaviors/bowser.inc.c:        o->oPosX = o->oPosZ = 0;
src/game/behaviors/bowser.inc.c:        o->oPosY = o->oHomeY + 2000.0f;
src/game/behaviors/bowser.inc.c:        o->oVelY = 0;
src/game/behaviors/bowser.inc.c:        o->oForwardVel = 0;
src/game/behaviors/bowser.inc.c:        o->oAction = 0;
src/game/behaviors/bowser.inc.c:    o->oBowserEyesShut = 0;
src/game/behaviors/bowser.inc.c:    o->oAngleVelYaw = 0;
src/game/behaviors/bowser.inc.c:    o->oForwardVel = 0.0f;
src/game/behaviors/bowser.inc.c:    o->oVelY = 0.0f;
src/game/behaviors/bowser.inc.c:    o->oForwardVel = 0.0f;
src/game/behaviors/bowser.inc.c:    if (o->oTimer == 0)
src/game/behaviors/bowser.inc.c:        o->oAction = 0;
src/game/behaviors/bowser.inc.c:    s16 angleFromMario = abs_angle_diff(o->oMoveAngleYaw, o->oAngleToMario);
src/game/behaviors/bowser.inc.c:    else if (o->oHealth > 2)
src/game/behaviors/bowser.inc.c:    else if (o->oHealth == 2)
src/game/behaviors/bowser.inc.c:    facing = cur_obj_rotate_yaw_toward(o->oAngleToMario, turnSpeed);
src/game/behaviors/bowser.inc.c:    if (o->oSubAction == 0) {
src/game/behaviors/bowser.inc.c:        o->oBowserUnkF8 = 0;
src/game/behaviors/bowser.inc.c:            o->oSubAction++;
src/game/behaviors/bowser.inc.c:    } else if (o->oSubAction == 1) {
src/game/behaviors/bowser.inc.c:            o->oBowserUnkF8++;
src/game/behaviors/bowser.inc.c:            if (o->oBowserUnkF4 & 0x20000) {
src/game/behaviors/bowser.inc.c:                if (o->oBowserUnkF8 > 4)
src/game/behaviors/bowser.inc.c:                    o->oBowserUnkF4 &= ~0x20000;
src/game/behaviors/bowser.inc.c:                o->oSubAction++;
src/game/behaviors/bowser.inc.c:        o->oAction = 0;
src/game/behaviors/bowser.inc.c:    switch (o->oSubAction) {
src/game/behaviors/bowser.inc.c:            o->oBowserUnk1AC = 0;
src/game/behaviors/bowser.inc.c:            o->oBowserUnkF8 = 30;
src/game/behaviors/bowser.inc.c:            if (o->oTimer == 0)
src/game/behaviors/bowser.inc.c:            if (o->oOpacity == 0) {
src/game/behaviors/bowser.inc.c:                o->oSubAction++;
src/game/behaviors/bowser.inc.c:                o->oMoveAngleYaw = o->oAngleToMario;
src/game/behaviors/bowser.inc.c:            if (o->oBowserUnkF8--)
src/game/behaviors/bowser.inc.c:                o->oForwardVel = 100.0f;
src/game/behaviors/bowser.inc.c:                o->oSubAction = 2;
src/game/behaviors/bowser.inc.c:                o->oMoveAngleYaw = o->oAngleToMario;
src/game/behaviors/bowser.inc.c:            if (abs_angle_diff(o->oMoveAngleYaw, o->oAngleToMario) > 0x4000)
src/game/behaviors/bowser.inc.c:                if (o->oDistanceToMario > 500.0f) {
src/game/behaviors/bowser.inc.c:                    o->oSubAction = 2;
src/game/behaviors/bowser.inc.c:                    o->oMoveAngleYaw = o->oAngleToMario; // large change in angle?
src/game/behaviors/bowser.inc.c:            o->oForwardVel = 0.0f;
src/game/behaviors/bowser.inc.c:            o->oBowserUnk1AC = 0xFF;
src/game/behaviors/bowser.inc.c:            if (o->oOpacity == 0xFF)
src/game/behaviors/bowser.inc.c:                o->oAction = 0;
src/game/behaviors/bowser.inc.c:    frame = o->header.gfx.unk38.animFrame;
src/game/behaviors/bowser.inc.c:        o->oAction = 0;
src/game/behaviors/bowser.inc.c:    o->oBowserUnkF4 |= 0x20000;
src/game/behaviors/bowser.inc.c:    if (o->oTimer == 0) {
src/game/behaviors/bowser.inc.c:        o->oForwardVel = -400.0f;
src/game/behaviors/bowser.inc.c:        o->oVelY = 100.0f;
src/game/behaviors/bowser.inc.c:        o->oMoveAngleYaw = o->oBowserAngleToCentre + 0x8000;
src/game/behaviors/bowser.inc.c:        o->oBowserEyesShut = 1;
src/game/behaviors/bowser.inc.c:    if (o->oSubAction == 0) {
src/game/behaviors/bowser.inc.c:        o->oSubAction++;
src/game/behaviors/bowser.inc.c:        o->oBowserUnkF8 = 0;
src/game/behaviors/bowser.inc.c:    } else if (o->oSubAction == 1) {
src/game/behaviors/bowser.inc.c:        bowser_bounce(&o->oBowserUnkF8);
src/game/behaviors/bowser.inc.c:        if ((o->oBowserUnkF8 > 2)) {
src/game/behaviors/bowser.inc.c:            o->oVelY = 0.0f;
src/game/behaviors/bowser.inc.c:            o->oForwardVel = 0.0f;
src/game/behaviors/bowser.inc.c:            o->oSubAction++;
src/game/behaviors/bowser.inc.c:    } else if (o->oSubAction == 2) {
src/game/behaviors/bowser.inc.c:            if (o->oHealth == 1)
src/game/behaviors/bowser.inc.c:                o->oAction = 3;
src/game/behaviors/bowser.inc.c:                o->oAction = 0;
src/game/behaviors/bowser.inc.c:            o->oBowserEyesShut = 0;
src/game/behaviors/bowser.inc.c:    if (o->oMoveFlags & 1) {
src/game/behaviors/bowser.inc.c:        o->oForwardVel = 0;
src/game/behaviors/bowser.inc.c:        o->oVelY = 0;
src/game/behaviors/bowser.inc.c:        o->header.gfx.unk38.animFrame = 0;
src/game/behaviors/bowser.inc.c:            if (o->oDistanceToMario < 850.0f)
src/game/behaviors/bowser.inc.c:    if (BITS && o->oBowserUnkF4 & 0x10000)
src/game/behaviors/bowser.inc.c:        if (o->oBowserDistToCentre > 1000.0f)
src/game/behaviors/bowser.inc.c:            o->oForwardVel = 60.0f;
src/game/behaviors/bowser.inc.c:    if (o->oSubAction == 0) {
src/game/behaviors/bowser.inc.c:            if (BITS && o->oBowserUnkF4 & 0x10000)
src/game/behaviors/bowser.inc.c:                o->oVelY = 70.0f;
src/game/behaviors/bowser.inc.c:                o->oVelY = 80.0f;
src/game/behaviors/bowser.inc.c:            o->oBowserUnkF8 = 0;
src/game/behaviors/bowser.inc.c:            o->oSubAction++;
src/game/behaviors/bowser.inc.c:    } else if (o->oSubAction == 1) {
src/game/behaviors/bowser.inc.c:        if (o->oBehParams2ndByte == 2 && o->oBowserUnkF4 & 0x10000)
src/game/behaviors/bowser.inc.c:            o->oBowserUnkF4 &= ~0x10000;
src/game/behaviors/bowser.inc.c:            o->oForwardVel = 0.0f;
src/game/behaviors/bowser.inc.c:            o->oSubAction++;
src/game/behaviors/bowser.inc.c:                o->oAction = 19;
src/game/behaviors/bowser.inc.c:        o->oAction = 0;
src/game/behaviors/bowser.inc.c:    if (o->oSubAction == 0) {
src/game/behaviors/bowser.inc.c:            o->oVelY = sp1C;
src/game/behaviors/bowser.inc.c:            o->oForwardVel = sp18;
src/game/behaviors/bowser.inc.c:            o->oBowserUnkF8 = 0;
src/game/behaviors/bowser.inc.c:            o->oSubAction++;
src/game/behaviors/bowser.inc.c:    } else if (o->oSubAction == 1) {
src/game/behaviors/bowser.inc.c:            o->oSubAction++;
src/game/behaviors/bowser.inc.c:        o->oAction = 0;
src/game/behaviors/bowser.inc.c:    o->oForwardVel = 0.0f;
src/game/behaviors/bowser.inc.c:    if (o->oTimer == 0)
src/game/behaviors/bowser.inc.c:        o->oBowserUnkF8 = 0;
src/game/behaviors/bowser.inc.c:    switch (o->oSubAction) {
src/game/behaviors/bowser.inc.c:                o->oBowserUnkF8++;
src/game/behaviors/bowser.inc.c:            if (o->oBowserUnkF8 > 0)
src/game/behaviors/bowser.inc.c:                o->oSubAction++;
src/game/behaviors/bowser.inc.c:                o->oAction = 11;
src/game/behaviors/bowser.inc.c:        o->oBowserUnk108 = 3;
src/game/behaviors/bowser.inc.c:        o->oBowserUnk108 = random_float() * 3.0f + 1.0f;
src/game/behaviors/bowser.inc.c:        o->oSubAction++;
src/game/behaviors/bowser.inc.c:    if (o->oSubAction >= o->oBowserUnk108)
src/game/behaviors/bowser.inc.c:        o->oAction = 0;
src/game/behaviors/bowser.inc.c:    if (o->oSubAction == 0) {
src/game/behaviors/bowser.inc.c:            o->oSubAction++;
src/game/behaviors/bowser.inc.c:    } else if (o->oSubAction == 1) {
src/game/behaviors/bowser.inc.c:            o->oSubAction++;
src/game/behaviors/bowser.inc.c:    o->oForwardVel = 0.0f;
src/game/behaviors/bowser.inc.c:    o->oMoveAngleYaw += a1;
src/game/behaviors/bowser.inc.c:    if (o->oTimer >= a0)
src/game/behaviors/bowser.inc.c:        o->oAction = 0;
src/game/behaviors/bowser.inc.c:    if (o->oTimer == 0)
src/game/behaviors/bowser.inc.c:        o->oForwardVel = 0.0f;
src/game/behaviors/bowser.inc.c:    switch (o->oSubAction) {
src/game/behaviors/bowser.inc.c:            o->oBowserUnkF8 = 0;
src/game/behaviors/bowser.inc.c:                o->oSubAction = 1;
src/game/behaviors/bowser.inc.c:            o->oForwardVel = 70.0f;
src/game/behaviors/bowser.inc.c:                o->oBowserUnkF8++;
src/game/behaviors/bowser.inc.c:                if (o->oBowserUnkF8 >= 6)
src/game/behaviors/bowser.inc.c:                    o->oSubAction = 3;
src/game/behaviors/bowser.inc.c:                if (o->oBowserUnkF8 >= 2)
src/game/behaviors/bowser.inc.c:                    if (abs_angle_diff(o->oAngleToMario, o->oMoveAngleYaw) > 0x2000)
src/game/behaviors/bowser.inc.c:                        o->oSubAction = 3;
src/game/behaviors/bowser.inc.c:            cur_obj_rotate_yaw_toward(o->oAngleToMario, 0x400);
src/game/behaviors/bowser.inc.c:            o->oBowserUnkF8 = 0;
src/game/behaviors/bowser.inc.c:            if (approach_f32_signed(&o->oForwardVel, 0, -1.0f))
src/game/behaviors/bowser.inc.c:                o->oSubAction = 2;
src/game/behaviors/bowser.inc.c:            o->oForwardVel = 0.0f;
src/game/behaviors/bowser.inc.c:                if (o->oBowserUnkF8 > sp34)
src/game/behaviors/bowser.inc.c:                    o->oAction = 0;
src/game/behaviors/bowser.inc.c:                o->oBowserUnkF8++;
src/game/behaviors/bowser.inc.c:    if (o->oMoveFlags & 0x400)
src/game/behaviors/bowser.inc.c:        o->oAction = 10;
src/game/behaviors/bowser.inc.c:    if (o->oTimer < 2)
src/game/behaviors/bowser.inc.c:        o->oBowserUnkF8 = 0;
src/game/behaviors/bowser.inc.c:    if (o->oSubAction == 0) {
src/game/behaviors/bowser.inc.c:        bowser_bounce(&o->oBowserUnkF8);
src/game/behaviors/bowser.inc.c:        if (o->oMoveFlags & 2) {
src/game/behaviors/bowser.inc.c:            o->oForwardVel = 0.0f;
src/game/behaviors/bowser.inc.c:            o->oSubAction++;
src/game/behaviors/bowser.inc.c:        o->oAction = 0;
src/game/behaviors/bowser.inc.c:        o->oHealth--;
src/game/behaviors/bowser.inc.c:        gMarioState->BossHealth = o->oHealth;
src/game/behaviors/bowser.inc.c:        if (o->oHealth <= 0)
src/game/behaviors/bowser.inc.c:            o->oAction = 4;
src/game/behaviors/bowser.inc.c:            o->oAction = 12;
src/game/behaviors/bowser.inc.c:    o->oBowserUnk1AC = 0;
src/game/behaviors/bowser.inc.c:    if (o->oOpacity == 0) {
src/game/behaviors/bowser.inc.c:        o->oForwardVel = 0.0f;
src/game/behaviors/bowser.inc.c:        o->oVelY = 0.0f;
src/game/behaviors/bowser.inc.c:        o->oPosY = o->oHomeY - 1000.0f;
src/game/behaviors/bowser.inc.c:    struct Surface *sp24 = o->oFloor;
src/game/behaviors/bowser.inc.c:    o->oBowserUnkF4 |= 0x10000;
src/game/behaviors/bowser.inc.c:    switch (o->oSubAction) {
src/game/behaviors/bowser.inc.c:            if (o->oTimer == 0) {
src/game/behaviors/bowser.inc.c:                o->oFaceAnglePitch = 0;
src/game/behaviors/bowser.inc.c:                o->oFaceAngleRoll = 0;
src/game/behaviors/bowser.inc.c:            o->oFaceAnglePitch += 0x800;
src/game/behaviors/bowser.inc.c:            o->oFaceAngleRoll += 0x800;
src/game/behaviors/bowser.inc.c:            if (!(o->oFaceAnglePitch & 0xFFFF))
src/game/behaviors/bowser.inc.c:                o->oSubAction++;
src/game/behaviors/bowser.inc.c:                o->oMoveAngleYaw = o->oBowserAngleToCentre;
src/game/behaviors/bowser.inc.c:                o->oVelY = 150.0f;
src/game/behaviors/bowser.inc.c:                o->oBowserUnk1AC = 0xFF;
src/game/behaviors/bowser.inc.c:                o->oBowserUnkF8 = 0;
src/game/behaviors/bowser.inc.c:                o->oSubAction++;
src/game/behaviors/bowser.inc.c:            if (o->oPosY > o->oHomeY) {
src/game/behaviors/bowser.inc.c:                o->oDragStrength = 0.0f;
src/game/behaviors/bowser.inc.c:                if (o->oBowserDistToCentre < 2500.0f) {
src/game/behaviors/bowser.inc.c:                    if (absf(o->oFloorHeight - o->oHomeY) < 100.0f)
src/game/behaviors/bowser.inc.c:                        approach_f32_signed(&o->oForwardVel, 0, -5.0f);
src/game/behaviors/bowser.inc.c:                o->oDragStrength = 10.0f;
src/game/behaviors/bowser.inc.c:                o->oSubAction++;
src/game/behaviors/bowser.inc.c:                    o->oAction = 13;
src/game/behaviors/bowser.inc.c:                    o->oAction = 19;
src/game/behaviors/bowser.inc.c:            if (o->oVelY < 0.0f && o->oPosY < o->oHomeY - 300.0f) {
src/game/behaviors/bowser.inc.c:                o->oPosZ = 0.0f, o->oPosX = o->oPosZ;
src/game/behaviors/bowser.inc.c:                o->oPosY = o->oHomeY + 2000.0f;
src/game/behaviors/bowser.inc.c:                o->oVelY = 0.0f;
src/game/behaviors/bowser.inc.c:                o->oAction = 0;
src/game/behaviors/bowser.inc.c:                o->oBowserUnkF4 &= ~0x10000;
src/game/behaviors/bowser.inc.c:    print_debug_bottom_up("sp %d", o->oForwardVel);
src/game/behaviors/bowser.inc.c:    if (is_item_in_array(o->oTimer, D_8032F514)) {
src/game/behaviors/bowser.inc.c:        o->oAction = 0;
src/game/behaviors/bowser.inc.c:    gSecondCameraFocus->oAngleVelYaw = o->oAngleVelYaw;
src/game/behaviors/bowser.inc.c:        o->oForwardVel = -400.0f;
src/game/behaviors/bowser.inc.c:        o->oForwardVel = -200.0f;
src/game/behaviors/bowser.inc.c:    o->oVelY = 100.0f;
src/game/behaviors/bowser.inc.c:    o->oMoveAngleYaw = o->oBowserAngleToCentre + 0x8000;
src/game/behaviors/bowser.inc.c:    o->oBowserUnkF8 = 0;
src/game/behaviors/bowser.inc.c:    o->oSubAction++;
src/game/behaviors/bowser.inc.c:    o->oBowserEyesShut = 1;
src/game/behaviors/bowser.inc.c:    bowser_bounce(&o->oBowserUnkF8);
src/game/behaviors/bowser.inc.c:    if (o->oMoveFlags & 1)
src/game/behaviors/bowser.inc.c:    if (o->oMoveFlags & 2) {
src/game/behaviors/bowser.inc.c:        o->oForwardVel = 0.0f;
src/game/behaviors/bowser.inc.c:        o->oSubAction++;
src/game/behaviors/bowser.inc.c:    if (cur_obj_init_animation_and_check_if_near_end(17) && o->oDistanceToMario < 700.0f
src/game/behaviors/bowser.inc.c:        && abs_angle_diff(gMarioObject->oMoveAngleYaw, o->oAngleToMario) > 0x6000)
src/game/behaviors/bowser.inc.c:    o->oBowserUnkF8 = 0;
src/game/behaviors/bowser.inc.c:    if (o->header.gfx.scale[0] < 0.8)
src/game/behaviors/bowser.inc.c:        o->oAngleVelYaw += 0x80;
src/game/behaviors/bowser.inc.c:    if (o->header.gfx.scale[0] > 0.2) {
src/game/behaviors/bowser.inc.c:        o->header.gfx.scale[0] = o->header.gfx.scale[0] - 0.02;
src/game/behaviors/bowser.inc.c:        o->header.gfx.scale[2] = o->header.gfx.scale[2] - 0.02;
src/game/behaviors/bowser.inc.c:        o->header.gfx.scale[1] = o->header.gfx.scale[1] - 0.01;
src/game/behaviors/bowser.inc.c:        o->oVelY = 20.0f;
src/game/behaviors/bowser.inc.c:        o->oGravity = 0.0f;
src/game/behaviors/bowser.inc.c:    if (o->header.gfx.scale[1] < 0.5)
src/game/behaviors/bowser.inc.c:    o->oMoveAngleYaw += o->oAngleVelYaw;
src/game/behaviors/bowser.inc.c:    if (o->oOpacity >= 3)
src/game/behaviors/bowser.inc.c:        o->oOpacity -= 2;
src/game/behaviors/bowser.inc.c:    o->oForwardVel = 0;
src/game/behaviors/bowser.inc.c:    o->oVelY = 0;
src/game/behaviors/bowser.inc.c:    o->oGravity = 0;
src/game/behaviors/bowser.inc.c:    if (o->oBowserUnkF8 < 2) {
src/game/behaviors/bowser.inc.c:        if (o->oBowserUnkF8 == 0) {
src/game/behaviors/bowser.inc.c:            o->oBowserUnkF8++;
src/game/behaviors/bowser.inc.c:        if (cur_obj_update_dialog(2, 18, sBowserDefeatedDialogText[o->oBehParams2ndByte], 0)) {
src/game/behaviors/bowser.inc.c:            o->oBowserUnkF8++;
src/game/behaviors/bowser.inc.c:    if (o->oBowserUnkF8 < 2) {
src/game/behaviors/bowser.inc.c:        if (o->oBowserUnkF8 == 0) {
src/game/behaviors/bowser.inc.c:            o->oBowserUnkF8++;
src/game/behaviors/bowser.inc.c:            o->oBowserUnkF8++;
src/game/behaviors/bowser.inc.c:    } else if (o->oOpacity > 4)
src/game/behaviors/bowser.inc.c:        o->oOpacity -= 4;
src/game/behaviors/bowser.inc.c:    switch (o->oSubAction) {
src/game/behaviors/bowser.inc.c:                o->oBowserUnkF8 = 0;
src/game/behaviors/bowser.inc.c:                    o->oSubAction = 10;
src/game/behaviors/bowser.inc.c:                    o->activeFlags |= ACTIVE_FLAG_DITHERED_ALPHA;
src/game/behaviors/bowser.inc.c:                    o->oSubAction++;
src/game/behaviors/bowser.inc.c:                o->oSubAction++;
src/game/behaviors/bowser.inc.c:                o->oSubAction++;
src/game/behaviors/bowser.inc.c:    angle = o->oBowserAngleToCentre + 0x8000;
src/game/behaviors/bowser.inc.c:    UNUSED s16 sp2A = o->oBowserAngleToCentre + 0x8000;
src/game/behaviors/bowser.inc.c:        o->oAction = 0;
src/game/behaviors/bowser.inc.c:            if (o->oTimer < D_8032F520[i][2]) {
src/game/behaviors/bowser.inc.c:                    sp28 = (D_8032F520[i][2] - o->oTimer - 1) * sp28;
src/game/behaviors/bowser.inc.c:                    sp28 = (o->oTimer - D_8032F520[i - 1][2]) * sp28;
src/game/behaviors/bowser.inc.c:            o->oAction = 0;
src/game/behaviors/bowser.inc.c:    if (o->oAction != 2 && o->oAction != 19) {
src/game/behaviors/bowser.inc.c:        if (o->oPosY < o->oHomeY - 1000.0f)
src/game/behaviors/bowser.inc.c:        if (o->oMoveFlags & 1) {
src/game/behaviors/bowser.inc.c:            if (o->oFloorType == 1)
src/game/behaviors/bowser.inc.c:            if (o->oFloorType == 10)
src/game/behaviors/bowser.inc.c:    if ((platform = o->platform) != NULL)
src/game/behaviors/bowser.inc.c:        apply_platform_displacement(&sBowserDisplacementInfo, &o->oPosX, &o->oFaceAngleYaw, platform);
src/game/behaviors/bowser.inc.c:    o->oBowserUnk10E = 0;
src/game/behaviors/bowser.inc.c:        o->oAction = 2; // bowser go home?
src/game/behaviors/bowser.inc.c:    floorHeight = find_floor(o->oPosX, o->oPosY, o->oPosZ, &floor);
src/game/behaviors/bowser.inc.c:        o->platform = floor->object;
src/game/behaviors/bowser.inc.c:        o->platform = NULL;
src/game/behaviors/bowser.inc.c:    o->oBowserUnkF4 &= ~0x20000;
src/game/behaviors/bowser.inc.c:    switch (o->oBowserUnk10E) {
src/game/behaviors/bowser.inc.c:            o->oBowserUnk10E++;
src/game/behaviors/bowser.inc.c:                o->oBowserUnk10E++;
src/game/behaviors/bowser.inc.c:    o->oMoveFlags = 0;
src/game/behaviors/bowser.inc.c:    o->oBowserHeldAnglePitch = gMarioObject->oMoveAnglePitch;
src/game/behaviors/bowser.inc.c:    o->oBowserHeldAngleVelYaw = gMarioObject->oAngleVelYaw/1.2f;
src/game/behaviors/bowser.inc.c:    o->oMoveAngleYaw = gMarioObject->oMoveAngleYaw;
src/game/behaviors/bowser.inc.c:    o->oBowserUnk10E = 0;
src/game/behaviors/bowser.inc.c:    sp1C = o->oBowserHeldAngleVelYaw / 3000.0 * 70.0f;
src/game/behaviors/bowser.inc.c:    o->oForwardVel = coss(o->oBowserHeldAnglePitch) * sp1C;
src/game/behaviors/bowser.inc.c:    o->oVelY = -sins(o->oBowserHeldAnglePitch) * sp1C;
src/game/behaviors/bowser.inc.c:    o->prevObj->oAction = 1; // not sure what prevObj is
src/game/behaviors/bowser.inc.c:    o->prevObj->oTimer = 0;
src/game/behaviors/bowser.inc.c:    o->prevObj->oSubAction = 0;
src/game/behaviors/bowser.inc.c:    o->oTimer = 0;
src/game/behaviors/bowser.inc.c:    o->oSubAction = 0;
src/game/behaviors/bowser.inc.c:    o->oBowserDistToCentre = sqrtf(o->oPosX * o->oPosX + o->oPosZ * o->oPosZ);
src/game/behaviors/bowser.inc.c:    o->oBowserAngleToCentre = atan2s(0.0f - o->oPosZ, 0.0f - o->oPosX);
src/game/behaviors/bowser.inc.c:    angleToMario = abs_angle_diff(o->oMoveAngleYaw, o->oAngleToMario);
src/game/behaviors/bowser.inc.c:    angleToCentre = abs_angle_diff(o->oMoveAngleYaw, o->oBowserAngleToCentre);
src/game/behaviors/bowser.inc.c:    o->oBowserUnkF4 &= ~0xFF;
src/game/behaviors/bowser.inc.c:        o->oBowserUnkF4 |= 2;
src/game/behaviors/bowser.inc.c:        o->oBowserUnkF4 |= 4;
src/game/behaviors/bowser.inc.c:    if (o->oBowserDistToCentre < 1000.0f)
src/game/behaviors/bowser.inc.c:        o->oBowserUnkF4 |= 0x10;
src/game/behaviors/bowser.inc.c:    if (o->oDistanceToMario < 850.0f)
src/game/behaviors/bowser.inc.c:        o->oBowserUnkF4 |= 8;
src/game/behaviors/bowser.inc.c:    switch (o->oHeldState) {
src/game/behaviors/bowser.inc.c:    if (o->oAction != 4)
src/game/behaviors/bowser.inc.c:        if (o->oBowserUnk1AC != o->oOpacity) {
src/game/behaviors/bowser.inc.c:            if (o->oBowserUnk1AC > o->oOpacity) {
src/game/behaviors/bowser.inc.c:                o->oOpacity += 20;
src/game/behaviors/bowser.inc.c:                if (o->oOpacity >= 0x100)
src/game/behaviors/bowser.inc.c:                    o->oOpacity = 0xFF;
src/game/behaviors/bowser.inc.c:                o->oOpacity -= 20;
src/game/behaviors/bowser.inc.c:                if (o->oOpacity < 0)
src/game/behaviors/bowser.inc.c:                    o->oOpacity = 0;
src/game/behaviors/bowser.inc.c:    o->oBowserUnk110 = 1;
src/game/behaviors/bowser.inc.c:    o->oOpacity = 0xFF;
src/game/behaviors/bowser.inc.c:    o->oBowserUnk1AC = 0xFF;
src/game/behaviors/bowser.inc.c:    //o->oBehParams2ndByte = level;
src/game/behaviors/bowser.inc.c:    o->oBowserUnk1B2 = D_8032F690[level];
src/game/behaviors/bowser.inc.c:    o->oHealth = 4;//D_8032F694[level];
src/game/behaviors/bowser.inc.c:    gMarioState->BossHealth = o->oHealth;
src/game/behaviors/bowser.inc.c:    gMarioState->BossHealthMax = o->oHealth;
src/game/behaviors/bowser.inc.c:    o->oAction = 3;
src/game/behaviors/bowser.inc.c:    o->oBowserUnk1AE = 0;
src/game/behaviors/bowser.inc.c:    o->oBowserEyesShut = 0;
src/game/behaviors/bowser.inc.c:    o->oPlatformUnkF8 = cur_obj_nearest_object_with_behavior(bhvBowser);
src/game/behaviors/bowser.inc.c:    obj_set_collision_data(o, D_8032F698[o->oBehParams2ndByte].unk0);
src/game/behaviors/bowser.inc.c:    if (o->oPlatformUnkF8 != 0)
src/game/behaviors/bowser.inc.c:        o->oAction = 1;
src/game/behaviors/bowser.inc.c:    struct Object *sp0 = o->oPlatformUnkF8;
src/game/behaviors/bowser.inc.c:            o->oAction = 2;
src/game/behaviors/bowser.inc.c:        o->oSubAction = 1;
src/game/behaviors/bowser.inc.c:    if (o->oSubAction == 0)
src/game/behaviors/bowser.inc.c:        o->oPlatformUnkFC = 0;
src/game/behaviors/bowser.inc.c:        if ((gDebugInfo[4][6] + 20) * (o->oBehParams2ndByte - 1) < o->oPlatformUnkFC)
src/game/behaviors/bowser.inc.c:            o->oAction = 2;
src/game/behaviors/bowser.inc.c:        o->oPlatformUnkFC++;
src/game/behaviors/bowser.inc.c:    UNUSED struct Object *sp18 = o->oPlatformUnkF8;
src/game/behaviors/bowser.inc.c:    if (o->oTimer == 0 || o->oTimer == 22)
src/game/behaviors/bowser.inc.c:    if (o->oTimer < 22) {
src/game/behaviors/bowser.inc.c:        o->oVelY = 8.0f;
src/game/behaviors/bowser.inc.c:        o->oGravity = 0.0f;
src/game/behaviors/bowser.inc.c:        o->oGravity = -4.0f;
src/game/behaviors/bowser.inc.c:    if ((o->oTimer & 1) == 0 && o->oTimer < 14) {
src/game/behaviors/bowser.inc.c:        sp22 = D_8032F698[o->oBehParams2ndByte].unk3 + (gDebugInfo[4][1] << 8);
src/game/behaviors/bowser.inc.c:        sp1C = -(o->oTimer / 2) * 290 + 1740;
src/game/behaviors/bowser.inc.c:        vec3f_copy_2(sp24, &o->oPosX);
src/game/behaviors/bowser.inc.c:        o->oPosX = D_8032F698[o->oBehParams2ndByte].unk1 + sins(sp22 + 5296) * sp1C;
src/game/behaviors/bowser.inc.c:        o->oPosZ = D_8032F698[o->oBehParams2ndByte].unk2 + coss(sp22 + 5296) * sp1C;
src/game/behaviors/bowser.inc.c:        o->oPosY = 307.0f;
src/game/behaviors/bowser.inc.c:        o->oPosX = D_8032F698[o->oBehParams2ndByte].unk1 + sins(sp22 - 5296) * sp1C;
src/game/behaviors/bowser.inc.c:        o->oPosZ = D_8032F698[o->oBehParams2ndByte].unk2 + coss(sp22 - 5296) * sp1C;
src/game/behaviors/bowser.inc.c:        vec3f_copy_2(&o->oPosX, sp24);
src/game/behaviors/bowser.inc.c:    if (o->oTimer > 300)
src/game/behaviors/bowser.inc.c:    if (maxTime < o->oTimer)
src/game/behaviors/bowser.inc.c:    if (o->oFloorType == 1)
src/game/behaviors/bowser.inc.c:    if (o->oFloorType == 10)
src/game/behaviors/bowser.inc.c:    o->oAnimState = (s32)(random_float() * 10.0f);
src/game/behaviors/bowser.inc.c:    o->oMoveAngleYaw = random_u16();
src/game/behaviors/bowser.inc.c:        o->oVelY = 80.0f;
src/game/behaviors/bowser.inc.c:        o->oVelY = 20.0f;
src/game/behaviors/bowser.inc.c:    o->oForwardVel = 10.0f;
src/game/behaviors/bowser.inc.c:    o->oGravity = -1.0f;
src/game/behaviors/bowser.inc.c:    o->oFlameUnkF4 = random_float() + 1.0f;
src/game/behaviors/bowser.inc.c:    o->oAnimState = (s32)(random_float() * 10.0f);
src/game/behaviors/bowser.inc.c:    o->oMoveAngleYaw = random_u16();
src/game/behaviors/bowser.inc.c:    o->oVelY = 10.0f;
src/game/behaviors/bowser.inc.c:    o->oForwardVel = 0.0f;
src/game/behaviors/bowser.inc.c:    o->oFlameUnkF4 = 7.0f;
src/game/behaviors/bowser.inc.c:    sp4 = ((o->oFlameUnkF8 + gGlobalTimer) & 0x3F) << 10;
src/game/behaviors/bowser.inc.c:    o->oPosX += sins(o->oMoveAngleYaw) * sins(sp4) * 4.0f;
src/game/behaviors/bowser.inc.c:    o->oPosZ += coss(o->oMoveAngleYaw) * sins(sp4) * 4.0f;
src/game/behaviors/bowser.inc.c:    if (o->oVelY < -4.0f)
src/game/behaviors/bowser.inc.c:        o->oVelY = -4.0f;
src/game/behaviors/bowser.inc.c:    if (o->oAction == 0) {
src/game/behaviors/bowser.inc.c:        if (o->oMoveFlags & 1) {
src/game/behaviors/bowser.inc.c:            o->oAction++;
src/game/behaviors/bowser.inc.c:                o->oFlameUnkF4 = 8.0f;
src/game/behaviors/bowser.inc.c:                o->oFlameUnkF4 = random_float() * 2 + 6.0f;
src/game/behaviors/bowser.inc.c:            o->oForwardVel = 0;
src/game/behaviors/bowser.inc.c:            o->oVelY = 0;
src/game/behaviors/bowser.inc.c:            o->oGravity = 0;
src/game/behaviors/bowser.inc.c:        if (o->oTimer > o->oFlameUnkF4 * 10 + 5.0f) {
src/game/behaviors/bowser.inc.c:            o->oFlameUnkF4 -= 0.15;
src/game/behaviors/bowser.inc.c:            if (o->oFlameUnkF4 <= 0)
src/game/behaviors/bowser.inc.c:    cur_obj_scale(o->oFlameUnkF4);
src/game/behaviors/bowser.inc.c:    o->oGraphYOffset = o->header.gfx.scale[1] * 14.0f;
src/game/behaviors/bowser.inc.c:    o->oForwardVel = 30.0f;
src/game/behaviors/bowser.inc.c:    o->oAnimState = (s32)(random_float() * 10.0f);
src/game/behaviors/bowser.inc.c:    o->oFlameUnkF4 = 3.0f;
src/game/behaviors/bowser.inc.c:    o->oFlameUnkF4 = o->oFlameUnkF4 + 0.5;
src/game/behaviors/bowser.inc.c:    cur_obj_scale(o->oFlameUnkF4);
src/game/behaviors/bowser.inc.c:    if (o->oMoveAnglePitch > 0x800)
src/game/behaviors/bowser.inc.c:        o->oMoveAnglePitch -= 0x200;
src/game/behaviors/bowser.inc.c:    if (o->oFlameUnkF4 > 20.0f)
src/game/behaviors/bowser.inc.c:    if (o->oPosY < o->oFloorHeight) {
src/game/behaviors/bowser.inc.c:        o->oPosY = o->oFloorHeight;
src/game/behaviors/bowser.inc.c:    o->oAnimState = (s32)(random_float() * 10.0f);
src/game/behaviors/bowser.inc.c:    o->oMoveAngleYaw = random_u16();
src/game/behaviors/bowser.inc.c:    if (o->oBehParams2ndByte != 0)
src/game/behaviors/bowser.inc.c:        o->oForwardVel = random_float() * 5.0f;
src/game/behaviors/bowser.inc.c:        o->oForwardVel = random_float() * 70.0f;
src/game/behaviors/bowser.inc.c:    o->oVelY = random_float() * 20.0f;
src/game/behaviors/bowser.inc.c:    o->oGravity = -1.0f;
src/game/behaviors/bowser.inc.c:    o->oFlameUnkF8 = random_float() * 64.0f;
src/game/behaviors/bowser.inc.c:    if (o->oVelY < D_8032F748[o->oBehParams2ndByte])
src/game/behaviors/bowser.inc.c:        o->oVelY = D_8032F748[o->oBehParams2ndByte];
src/game/behaviors/bowser.inc.c:    if (o->oMoveFlags & 1) {
src/game/behaviors/bowser.inc.c:        if (o->oBehParams2ndByte == 0)
src/game/behaviors/bowser.inc.c:    o->oGraphYOffset = o->header.gfx.scale[1] * 14.0f;
src/game/behaviors/bowser.inc.c:    o->oAnimState = (s32)(random_float() * 10.0f);
src/game/behaviors/bowser.inc.c:    o->oVelY = 7.0f;
src/game/behaviors/bowser.inc.c:    o->oForwardVel = 35.0f;
src/game/behaviors/bowser.inc.c:    o->oFlameUnkF4 = 3.0f;
src/game/behaviors/bowser.inc.c:    o->oFlameUnkFC = random_float() * 0.5;
src/game/behaviors/bowser.inc.c:    o->oGravity = 1.0f;
src/game/behaviors/bowser.inc.c:    o->oFlameUnkF8 = (s32)(random_float() * 64.0f);
src/game/behaviors/bowser.inc.c:    if (o->oFlameUnkF4 < 16.0f)
src/game/behaviors/bowser.inc.c:        o->oFlameUnkF4 = o->oFlameUnkF4 + 0.5;
src/game/behaviors/bowser.inc.c:    cur_obj_scale(o->oFlameUnkF4);
src/game/behaviors/bowser.inc.c:    if (o->oTimer > 0x14) {
src/game/behaviors/bowser.inc.c:        if (o->oBehParams2ndByte == 0)
src/game/behaviors/bowser.inc.c:    o->oAnimState = (s32)(random_float() * 10.0f);
src/game/behaviors/bowser.inc.c:    o->oVelY = 30.0f;
src/game/behaviors/bowser.inc.c:    o->oForwardVel = 20.0f;
src/game/behaviors/bowser.inc.c:    o->oFlameUnkF4 = o->header.gfx.scale[0];
src/game/behaviors/bowser.inc.c:    o->oFlameUnkF8 = (s32)(random_float() * 64.0f);
src/game/behaviors/bowser.inc.c:    if (o->oTimer == 0)
src/game/behaviors/bowser.inc.c:        o->oFlameUnk100 = cur_obj_nearest_object_with_behavior(bhvBowser);
src/game/behaviors/bowser.inc.c:    sp1C = o->oFlameUnk100;
src/game/behaviors/bowser.inc.c:    o->oForwardVel = 15.0f;
src/game/behaviors/bowser.inc.c:    o->oBounciness = -1.0f;
src/game/behaviors/bowser.inc.c:    cur_obj_scale(o->oFlameUnkF4);
src/game/behaviors/bowser.inc.c:    if (o->oTimer == 0) {
src/game/behaviors/bowser.inc.c:        o->oMoveAngleYaw = obj_angle_to_object(o, gMarioObject);
src/game/behaviors/bowser.inc.c:        o->oBlueFlameUnkF8 = 5.0f;
src/game/behaviors/bowser.inc.c:    if (o->oTimer < 16) {
src/game/behaviors/bowser.inc.c:        if ((o->oTimer & 1) == 0) {
src/game/behaviors/bowser.inc.c:                flame->header.gfx.scale[0] = o->oBlueFlameUnkF8;
src/game/behaviors/bowser.inc.c:            o->oBlueFlameUnkF8 -= 0.5;
src/game/behaviors/bowser_bomb.inc.c:    sp20 = find_water_level(o->oPosX, o->oPosZ);
src/game/behaviors/bowser_bomb.inc.c:    sp1C = find_floor(o->oPosX, o->oPosY, o->oPosZ, &sp24);
src/game/behaviors/bowser_bomb.inc.c:        o->oInteractStatus &= ~INT_STATUS_INTERACTED;
src/game/behaviors/bowser_bomb.inc.c:        set_camera_shake_from_point(SHAKE_POS_LARGE, o->oPosX, o->oPosY, o->oPosZ);
src/game/behaviors/bowser_bomb.inc.c:        o->activeFlags = ACTIVE_FLAG_DEACTIVATED;
src/game/behaviors/bowser_bomb.inc.c:    if (o->oInteractStatus & INT_STATUS_HIT_MINE)
src/game/behaviors/bowser_bomb.inc.c:        set_camera_shake_from_point(SHAKE_POS_LARGE, o->oPosX, o->oPosY, o->oPosZ);
src/game/behaviors/bowser_bomb.inc.c:        o->activeFlags = ACTIVE_FLAG_DEACTIVATED;
src/game/behaviors/bowser_bomb.inc.c:    if (o->oBehParams2ndByte == 1) {
src/game/behaviors/bowser_bomb.inc.c:        o->oHomeY = bbomb_floating_platform_find_home_y();
src/game/behaviors/bowser_bomb.inc.c:        o->oPosY = o->oHomeY + sins(o->oTimer * 0x800) * 10.0f;
src/game/behaviors/bowser_bomb.inc.c:                o->oAngleToMario = cur_obj_angle_to_home();
src/game/behaviors/bowser_bomb.inc.c:                o->oForwardVel = 5.0f;
src/game/behaviors/bowser_bomb.inc.c:                o->oAngleToMario = obj_angle_to_object(o, gMarioObject);
src/game/behaviors/bowser_bomb.inc.c:                o->oForwardVel = 20.0f;
src/game/behaviors/bowser_bomb.inc.c:            cur_obj_rotate_yaw_toward(o->oAngleToMario, 0x400);
src/game/behaviors/bowser_bomb.inc.c:    cur_obj_scale((f32) o->oTimer / 14.0f * 9.0 + 1.0);
src/game/behaviors/bowser_bomb.inc.c:    if ((o->oTimer % 4 == 0) && (o->oTimer < 20)) {
src/game/behaviors/bowser_bomb.inc.c:    if (o->oTimer % 2 == 0)
src/game/behaviors/bowser_bomb.inc.c:        o->oAnimState++;
src/game/behaviors/bowser_bomb.inc.c:    if (o->oTimer == 28)
src/game/behaviors/bowser_bomb.inc.c:        o->activeFlags = ACTIVE_FLAG_DEACTIVATED;
src/game/behaviors/bowser_bomb.inc.c:    cur_obj_scale((f32) o->oTimer / 14.0f * 9.0 + 1.0);
src/game/behaviors/bowser_bomb.inc.c:    if (o->oTimer % 2 == 0)
src/game/behaviors/bowser_bomb.inc.c:        o->oAnimState++;
src/game/behaviors/bowser_bomb.inc.c:    o->oOpacity -= 10;
src/game/behaviors/bowser_bomb.inc.c:    if (o->oOpacity < 10)
src/game/behaviors/bowser_bomb.inc.c:        o->oOpacity = 0;
src/game/behaviors/bowser_bomb.inc.c:    o->oPosY += o->oVelY;
src/game/behaviors/bowser_bomb.inc.c:    if (o->oTimer == 28)
src/game/behaviors/bowser_bomb.inc.c:        o->activeFlags = ACTIVE_FLAG_DEACTIVATED;
src/game/behaviors/bowser_key.inc.c:    if (o->oAngleVelYaw > 0x400)
src/game/behaviors/bowser_key.inc.c:        o->oAngleVelYaw -= 0x100;
src/game/behaviors/bowser_key.inc.c:    o->oFaceAngleYaw += o->oAngleVelYaw;
src/game/behaviors/bowser_key.inc.c:    o->oFaceAngleRoll = -0x4000;
src/game/behaviors/bowser_key.inc.c:    o->oGraphYOffset = 165.0f;
src/game/behaviors/bowser_key.inc.c:    if (o->oAction == 0) {
src/game/behaviors/bowser_key.inc.c:        if (o->oTimer == 0)
src/game/behaviors/bowser_key.inc.c:            o->oVelY = 70.0f;
src/game/behaviors/bowser_key.inc.c:        if (o->oMoveFlags & OBJ_MOVE_ON_GROUND)
src/game/behaviors/bowser_key.inc.c:            o->oAction++;
src/game/behaviors/bowser_key.inc.c:        else if (o->oMoveFlags & OBJ_MOVE_LANDED)
src/game/behaviors/bowser_key.inc.c:        if (o->oInteractStatus & INT_STATUS_INTERACTED) {
src/game/behaviors/bowser_key.inc.c:            o->oInteractStatus = 0;
src/game/behaviors/bowser_key_cutscene.inc.c:    animTimer = o->header.gfx.unk38.animFrame;
src/game/behaviors/bowser_key_cutscene.inc.c:        o->oBowserKeyScale = 0.0f;
src/game/behaviors/bowser_key_cutscene.inc.c:        o->oBowserKeyScale = 0.2f;
src/game/behaviors/bowser_key_cutscene.inc.c:        o->oBowserKeyScale = (animTimer - 53) * 0.11875f + 0.2; // 0.11875?
src/game/behaviors/bowser_key_cutscene.inc.c:        o->oBowserKeyScale = 1.1f;
src/game/behaviors/bowser_key_cutscene.inc.c:        o->oBowserKeyScale = 1.05f;
src/game/behaviors/bowser_key_cutscene.inc.c:        o->oBowserKeyScale = 1.0f;
src/game/behaviors/bowser_key_cutscene.inc.c:    if (o->oTimer > 150)
src/game/behaviors/bowser_key_cutscene.inc.c:    s32 animTimer = o->header.gfx.unk38.animFrame;
src/game/behaviors/bowser_key_cutscene.inc.c:        o->oBowserKeyScale = 0.2f;
src/game/behaviors/bowser_key_cutscene.inc.c:        o->oBowserKeyScale = (animTimer - 42) * 0.042857f + 0.2; // TODO 3/70?
src/game/behaviors/bowser_key_cutscene.inc.c:        o->oBowserKeyScale = 0.8f;
src/game/behaviors/bowser_key_cutscene.inc.c:        o->oBowserKeyScale = (101 - animTimer) * 0.085714f + 0.2; // TODO 6/70?
src/game/behaviors/bowser_key_cutscene.inc.c:        o->oBowserKeyScale = 0.2f;
src/game/behaviors/bowser_key_cutscene.inc.c:    if (o->oTimer > 138)
src/game/behaviors/bowser_puzzle_piece.inc.c:    o->oAction++;
src/game/behaviors/bowser_puzzle_piece.inc.c:    switch (o->oAction) {
src/game/behaviors/bowser_puzzle_piece.inc.c:            if (o->oBowserPuzzleCompletionFlags == 3 && o->oDistanceToMario < 1000.0f) {
src/game/behaviors/bowser_puzzle_piece.inc.c:                o->oBowserPuzzleCompletionFlags = 0;
src/game/behaviors/bowser_puzzle_piece.inc.c:                o->oAction++;
src/game/behaviors/bowser_puzzle_piece.inc.c:    o->oPosY += 50.0f;
src/game/behaviors/bowser_puzzle_piece.inc.c:    o->oAction = 3;
src/game/behaviors/bowser_puzzle_piece.inc.c:    s8 *nextAction = o->oBowserPuzzlePieceNextAction;
src/game/behaviors/bowser_puzzle_piece.inc.c:        o->parentObj->oBowserPuzzleCompletionFlags = 1;
src/game/behaviors/bowser_puzzle_piece.inc.c:    if (o->oBowserPuzzlePieceContinuePerformingAction == 0) {
src/game/behaviors/bowser_puzzle_piece.inc.c:        o->oBowserPuzzlePieceNextAction = nextAction;
src/game/behaviors/bowser_puzzle_piece.inc.c:            o->parentObj->oBowserPuzzleCompletionFlags |= 2;
src/game/behaviors/bowser_puzzle_piece.inc.c:            o->oBowserPuzzlePieceNextAction = o->oBowserPuzzlePieceActionList;
src/game/behaviors/bowser_puzzle_piece.inc.c:        o->oBowserPuzzlePieceContinuePerformingAction = 1;
src/game/behaviors/bowser_puzzle_piece.inc.c:    if (o->oTimer < 20) {
src/game/behaviors/bowser_puzzle_piece.inc.c:        if (o->oTimer % 2)
src/game/behaviors/bowser_puzzle_piece.inc.c:            o->oBowserPuzzlePieceOffsetY = 0.0f;
src/game/behaviors/bowser_puzzle_piece.inc.c:            o->oBowserPuzzlePieceOffsetY = -6.0f;
src/game/behaviors/bowser_puzzle_piece.inc.c:        if (o->oTimer == 20)
src/game/behaviors/bowser_puzzle_piece.inc.c:        if (o->oTimer < duration + 20) {
src/game/behaviors/bowser_puzzle_piece.inc.c:            o->oBowserPuzzlePieceOffsetX += xOffset;
src/game/behaviors/bowser_puzzle_piece.inc.c:            o->oBowserPuzzlePieceOffsetZ += zOffset;
src/game/behaviors/bowser_puzzle_piece.inc.c:            o->oAction = 2;
src/game/behaviors/bowser_puzzle_piece.inc.c:            o->oBowserPuzzlePieceContinuePerformingAction = 0;
src/game/behaviors/bowser_puzzle_piece.inc.c:    if (o->oTimer < 24)
src/game/behaviors/bowser_puzzle_piece.inc.c:        o->oBowserPuzzlePieceContinuePerformingAction = 0;
src/game/behaviors/bowser_puzzle_piece.inc.c:    o->oPosX = o->oBowserPuzzlePieceOffsetX + o->oHomeX;
src/game/behaviors/bowser_puzzle_piece.inc.c:    o->oPosY = o->oBowserPuzzlePieceOffsetY + o->oHomeY;
src/game/behaviors/bowser_puzzle_piece.inc.c:    o->oPosZ = o->oBowserPuzzlePieceOffsetZ + o->oHomeZ;
src/game/behaviors/breakable_box.inc.c:    if (o->oTimer == 0)
src/game/behaviors/breakable_box_small.inc.c:    o->oGravity = 2.5f;
src/game/behaviors/breakable_box_small.inc.c:    o->oFriction = 0.97f;
src/game/behaviors/breakable_box_small.inc.c:    o->oBuoyancy = 1.4f;
src/game/behaviors/breakable_box_small.inc.c:    o->oAnimState = 1;
src/game/behaviors/breakable_box_small.inc.c:    o->activeFlags |= ACTIVE_FLAG_UNK9;
src/game/behaviors/breakable_box_small.inc.c:        if (o->oForwardVel > 20.0f) {
src/game/behaviors/breakable_box_small.inc.c:        //o->activeFlags = ACTIVE_FLAG_DEACTIVATED;
src/game/behaviors/breakable_box_small.inc.c:    o->oBreakableBoxSmallFramesSinceReleased++;
src/game/behaviors/breakable_box_small.inc.c:    switch (o->oAction) {
src/game/behaviors/breakable_box_small.inc.c:                o->oPosX = o->oHomeX;
src/game/behaviors/breakable_box_small.inc.c:                o->oPosY = o->oHomeY;
src/game/behaviors/breakable_box_small.inc.c:                o->oPosZ = o->oHomeZ;
src/game/behaviors/breakable_box_small.inc.c:                o->oAction = 0;
src/game/behaviors/breakable_box_small.inc.c:            //o->activeFlags = ACTIVE_FLAG_DEACTIVATED;
src/game/behaviors/breakable_box_small.inc.c:                o->oPosX = o->oHomeX;
src/game/behaviors/breakable_box_small.inc.c:                o->oPosY = o->oHomeY;
src/game/behaviors/breakable_box_small.inc.c:                o->oPosZ = o->oHomeZ;
src/game/behaviors/breakable_box_small.inc.c:                o->oAction = 0;
src/game/behaviors/breakable_box_small.inc.c:    if (o->oBreakableBoxSmallReleased == 1)
src/game/behaviors/breakable_box_small.inc.c:    o->header.gfx.node.flags &= ~GRAPH_RENDER_INVISIBLE;
src/game/behaviors/breakable_box_small.inc.c:    o->oHeldState = 0;
src/game/behaviors/breakable_box_small.inc.c:    o->oBreakableBoxSmallReleased = 1;
src/game/behaviors/breakable_box_small.inc.c:    o->oBreakableBoxSmallFramesSinceReleased = 0;
src/game/behaviors/breakable_box_small.inc.c:    o->header.gfx.node.flags &= ~GRAPH_RENDER_INVISIBLE;
src/game/behaviors/breakable_box_small.inc.c:    o->oHeldState = 0;
src/game/behaviors/breakable_box_small.inc.c:    o->oFlags &= ~0x08;
src/game/behaviors/breakable_box_small.inc.c:    o->oForwardVel = 40.0f;
src/game/behaviors/breakable_box_small.inc.c:    o->oVelY = 20.0f;
src/game/behaviors/breakable_box_small.inc.c:    o->oBreakableBoxSmallReleased = 1;
src/game/behaviors/breakable_box_small.inc.c:    o->oBreakableBoxSmallFramesSinceReleased = 0;
src/game/behaviors/breakable_box_small.inc.c:    o->activeFlags &= ~ACTIVE_FLAG_UNK9;
src/game/behaviors/breakable_box_small.inc.c:    o->oForwardVel = 0.0f;
src/game/behaviors/breakable_box_small.inc.c:    if (o->oBehParams2ndByte == 0) {
src/game/behaviors/breakable_box_small.inc.c:        if (o->oDistanceToMario < 1000.0f) {
src/game/behaviors/breakable_box_small.inc.c:                o->oPiranhaPlantSleepMusicState = 0;
src/game/behaviors/breakable_box_small.inc.c:            } else if ((o->oPiranhaPlantSleepMusicState == 0)&&(o->oHeldState == 0)) {
src/game/behaviors/breakable_box_small.inc.c:                o->oPiranhaPlantSleepMusicState++;
src/game/behaviors/breakable_box_small.inc.c:    switch (o->oHeldState) {
src/game/behaviors/breakable_box_small.inc.c:    o->oInteractStatus = 0;
src/game/behaviors/breakable_wall.inc.c:            o->oInteractType = 8;
src/game/behaviors/breakable_wall.inc.c:            o->oDamageOrCoinValue = 0;
src/game/behaviors/bub.inc.c:    s32 sp18 = o->oBirdChirpChirpUnkF4;
src/game/behaviors/bub.inc.c:    if (o->oDistanceToMario < 1500.0f) {
src/game/behaviors/bub.inc.c:        o->oAction = 1;
src/game/behaviors/bub.inc.c:    if (gMarioObject->oPosY - o->oPosY > 2000.0f)
src/game/behaviors/bub.inc.c:        o->oAction = 2;
src/game/behaviors/bub.inc.c:    o->oAction = 3;
src/game/behaviors/bub.inc.c:    o->oAction = 0;
src/game/behaviors/bub.inc.c:    f32 sp1C = o->parentObj->oPosY;
src/game/behaviors/bub.inc.c:    if (sp1C - 100.0f - o->oCheepCheepUnk104 < o->oPosY
src/game/behaviors/bub.inc.c:        && o->oPosY < sp1C + 1000.0f + o->oCheepCheepUnk104)
src/game/behaviors/bub.inc.c:        o->oPosY = approach_f32_symmetric(o->oPosY, o->oCheepCheepUnkF8, a0);
src/game/behaviors/bub.inc.c:    o->oCheepCheepUnkFC = random_float() * 100.0f;
src/game/behaviors/bub.inc.c:    o->oCheepCheepUnk104 = random_float() * 300.0f;
src/game/behaviors/bub.inc.c:    o->oAction = 1;
src/game/behaviors/bub.inc.c:    if (o->oTimer == 0) {
src/game/behaviors/bub.inc.c:        o->oForwardVel = random_float() * 2 + 2;
src/game/behaviors/bub.inc.c:        o->oCheepCheepUnk108 = random_float();
src/game/behaviors/bub.inc.c:    dy = o->oPosY - gMarioObject->oPosY;
src/game/behaviors/bub.inc.c:    if (o->oPosY < o->oCheepCheepUnkF4 - 50.0f) {
src/game/behaviors/bub.inc.c:        o->oPosY = o->oCheepCheepUnkF4 - 50.0f;
src/game/behaviors/bub.inc.c:            o->oPosY = o->oPosY - 1.0f;
src/game/behaviors/bub.inc.c:        o->oAngleToMario = cur_obj_angle_to_home();
src/game/behaviors/bub.inc.c:    cur_obj_rotate_yaw_toward(o->oAngleToMario, 0x100);
src/game/behaviors/bub.inc.c:    if (o->oDistanceToMario < 200.0f)
src/game/behaviors/bub.inc.c:        if (o->oCheepCheepUnk108 < 0.5)
src/game/behaviors/bub.inc.c:            o->oAction = 2;
src/game/behaviors/bub.inc.c:    if (o->oInteractStatus & INT_STATUS_INTERACTED)
src/game/behaviors/bub.inc.c:        o->oAction = 2;
src/game/behaviors/bub.inc.c:    if (o->oTimer < 20) {
src/game/behaviors/bub.inc.c:        if (o->oInteractStatus & INT_STATUS_INTERACTED)
src/game/behaviors/bub.inc.c:        o->oInteractStatus = 0;
src/game/behaviors/bub.inc.c:    if (o->oTimer == 0)
src/game/behaviors/bub.inc.c:    if (o->oForwardVel == 0.0f)
src/game/behaviors/bub.inc.c:        o->oForwardVel = 6.0f;
src/game/behaviors/bub.inc.c:    dy = o->oPosY - gMarioObject->oPosY;
src/game/behaviors/bub.inc.c:    if (o->oPosY < o->oCheepCheepUnkF4 - 50.0f) {
src/game/behaviors/bub.inc.c:        o->oPosY = o->oCheepCheepUnkF4 - 50.0f;
src/game/behaviors/bub.inc.c:            o->oPosY -= 1.0f;
src/game/behaviors/bub.inc.c:        o->oAngleToMario = cur_obj_angle_to_home();
src/game/behaviors/bub.inc.c:    cur_obj_rotate_yaw_toward(o->oAngleToMario + 0x8000, 0x400);
src/game/behaviors/bub.inc.c:    if (o->oTimer > 200 && o->oDistanceToMario > 600.0f)
src/game/behaviors/bub.inc.c:        o->oAction = 1;
src/game/behaviors/bub.inc.c:    o->oCheepCheepUnkF4 = find_water_level(o->oPosX, o->oPosZ);
src/game/behaviors/bub.inc.c:    o->oCheepCheepUnkF8 = gMarioObject->oPosY + o->oCheepCheepUnkFC;
src/game/behaviors/bub.inc.c:    o->oWallHitboxRadius = 30.0f;
src/game/behaviors/bub.inc.c:    if (o->parentObj->oAction == 2)
src/game/behaviors/bubba.inc.c:    o->oAnimState = 0;
src/game/behaviors/bubba.inc.c:    o->oBubbaUnk1AC = obj_get_pitch_to_home(sp24);
src/game/behaviors/bubba.inc.c:    approach_f32_ptr(&o->oBubbaUnkF4, 5.0f, 0.5f);
src/game/behaviors/bubba.inc.c:    if (o->oBubbaUnkFC != 0) {
src/game/behaviors/bubba.inc.c:        if (abs_angle_diff(o->oMoveAngleYaw, o->oBubbaUnk1AE) < 800) {
src/game/behaviors/bubba.inc.c:            o->oBubbaUnkFC = 0;
src/game/behaviors/bubba.inc.c:        if (o->oDistanceToMario >= 25000.0f) {
src/game/behaviors/bubba.inc.c:            o->oBubbaUnk1AE = o->oAngleToMario;
src/game/behaviors/bubba.inc.c:            o->oBubbaUnkF8 = random_linear_offset(20, 30);
src/game/behaviors/bubba.inc.c:        if ((o->oBubbaUnkFC = o->oMoveFlags & 0x00000200) != 0) {
src/game/behaviors/bubba.inc.c:            o->oBubbaUnk1AE = cur_obj_reflect_move_angle_off_wall();
src/game/behaviors/bubba.inc.c:        } else if (o->oTimer > 30 && o->oDistanceToMario < 2000.0f) {
src/game/behaviors/bubba.inc.c:            o->oAction = 1;
src/game/behaviors/bubba.inc.c:        } else if (o->oBubbaUnkF8 != 0) {
src/game/behaviors/bubba.inc.c:            o->oBubbaUnkF8 -= 1;
src/game/behaviors/bubba.inc.c:            o->oBubbaUnk1AE = obj_random_fixed_turn(0x2000);
src/game/behaviors/bubba.inc.c:            o->oBubbaUnkF8 = random_linear_offset(100, 100);
src/game/behaviors/bubba.inc.c:    if (o->oDistanceToMario > 2500.0f) {
src/game/behaviors/bubba.inc.c:        o->oAction = 0;
src/game/behaviors/bubba.inc.c:    } else if (o->oBubbaUnk100 != 0) {
src/game/behaviors/bubba.inc.c:        if (--o->oBubbaUnk100 == 0) {
src/game/behaviors/bubba.inc.c:            o->oAction = 0;
src/game/behaviors/bubba.inc.c:        } else if (o->oBubbaUnk100 < 15) {
src/game/behaviors/bubba.inc.c:            o->oAnimState = 1;
src/game/behaviors/bubba.inc.c:        } else if (o->oBubbaUnk100 == 20) {
src/game/behaviors/bubba.inc.c:            val06 = 10000 - (s16)(20.0f * (find_water_level(o->oPosX, o->oPosZ) - o->oPosY));
src/game/behaviors/bubba.inc.c:            o->oBubbaUnk1AC -= val06;
src/game/behaviors/bubba.inc.c:            o->oMoveAnglePitch = o->oBubbaUnk1AC;
src/game/behaviors/bubba.inc.c:            o->oBubbaUnkF4 = 40.0f;
src/game/behaviors/bubba.inc.c:            obj_compute_vel_from_move_pitch(o->oBubbaUnkF4);
src/game/behaviors/bubba.inc.c:            o->oAnimState = 0;
src/game/behaviors/bubba.inc.c:            o->oBubbaUnk1AE = o->oAngleToMario;
src/game/behaviors/bubba.inc.c:            o->oBubbaUnk1AC = o->oBubbaUnk104;
src/game/behaviors/bubba.inc.c:            cur_obj_rotate_yaw_toward(o->oBubbaUnk1AE, 400);
src/game/behaviors/bubba.inc.c:            obj_move_pitch_approach(o->oBubbaUnk1AC, 400);
src/game/behaviors/bubba.inc.c:        if (abs_angle_diff(gMarioObject->oFaceAngleYaw, o->oAngleToMario) < 0x3000) {
src/game/behaviors/bubba.inc.c:            val04 = 0x4000 - atan2s(800.0f, o->oDistanceToMario - 800.0f);
src/game/behaviors/bubba.inc.c:            if ((s16)(o->oMoveAngleYaw - o->oAngleToMario) < 0) {
src/game/behaviors/bubba.inc.c:            o->oBubbaUnk1AE = o->oAngleToMario + val04;
src/game/behaviors/bubba.inc.c:            o->oBubbaUnk1AE = o->oAngleToMario;
src/game/behaviors/bubba.inc.c:        o->oBubbaUnk1AC = o->oBubbaUnk104;
src/game/behaviors/bubba.inc.c:            && abs_angle_diff(o->oBubbaUnk1AC, o->oMoveAnglePitch) < 3000) {
src/game/behaviors/bubba.inc.c:            o->oBubbaUnk100 = 30;
src/game/behaviors/bubba.inc.c:            o->oBubbaUnkF4 = 0;
src/game/behaviors/bubba.inc.c:            o->oAnimState = 1;
src/game/behaviors/bubba.inc.c:            approach_f32_ptr(&o->oBubbaUnkF4, 20.0f, 0.5f);
src/game/behaviors/bubba.inc.c:    o->oInteractionSubtype &= ~INT_SUBTYPE_EATS_MARIO;
src/game/behaviors/bubba.inc.c:    o->oBubbaUnk104 = obj_turn_pitch_toward_mario(120.0f, 0);
src/game/behaviors/bubba.inc.c:    if (abs_angle_diff(o->oAngleToMario, o->oMoveAngleYaw) < 0x1000
src/game/behaviors/bubba.inc.c:        && abs_angle_diff(o->oBubbaUnk104 + 0x800, o->oMoveAnglePitch) < 0x2000) {
src/game/behaviors/bubba.inc.c:        if (o->oAnimState != 0 && o->oDistanceToMario < 250.0f) {
src/game/behaviors/bubba.inc.c:            o->oInteractionSubtype |= INT_SUBTYPE_EATS_MARIO;
src/game/behaviors/bubba.inc.c:        o->hurtboxRadius = 100.0f;
src/game/behaviors/bubba.inc.c:        o->hurtboxRadius = 150.0f;
src/game/behaviors/bubba.inc.c:    switch (o->oAction) {
src/game/behaviors/bubba.inc.c:    if (o->oMoveFlags & 0x00000078) {
src/game/behaviors/bubba.inc.c:        if (o->oMoveFlags & 0x00000008) {
src/game/behaviors/bubba.inc.c:            o->oBubbaUnk108 = o->oVelY;
src/game/behaviors/bubba.inc.c:            o->oBubbaUnk10C = 0.0f;
src/game/behaviors/bubba.inc.c:            approach_f32_ptr(&o->oBubbaUnk108, 0.0f, 4.0f);
src/game/behaviors/bubba.inc.c:            if ((o->oBubbaUnk10C -= o->oBubbaUnk108) > 1.0f) {
src/game/behaviors/bubba.inc.c:                o->oBubbaUnk10C -= 1.0f;
src/game/behaviors/bubba.inc.c:        obj_smooth_turn(&o->oBubbaUnk1B0, &o->oMoveAnglePitch, o->oBubbaUnk1AC, 0.05f, 10, 50, 2000);
src/game/behaviors/bubba.inc.c:        obj_smooth_turn(&o->oBubbaUnk1B2, &o->oMoveAngleYaw, o->oBubbaUnk1AE, 0.05f, 10, 50, 2000);
src/game/behaviors/bubba.inc.c:        obj_compute_vel_from_move_pitch(o->oBubbaUnkF4);
src/game/behaviors/bubba.inc.c:        o->oBubbaUnkF4 = sqrtf(o->oForwardVel * o->oForwardVel + o->oVelY * o->oVelY);
src/game/behaviors/bubba.inc.c:        o->oMoveAnglePitch = obj_get_pitch_from_vel();
src/game/behaviors/bubba.inc.c:        obj_face_pitch_approach(o->oMoveAnglePitch, 400);
src/game/behaviors/bubba.inc.c:        o->oBubbaUnk1B0 = 0;
src/game/behaviors/bubba.inc.c:    obj_face_pitch_approach(o->oMoveAnglePitch, 400);
src/game/behaviors/bubba.inc.c:    obj_check_attacks(&sBubbaHitbox, o->oAction);
src/game/behaviors/bubba.inc.c:    o->oFloorHeight += 150.0f;
src/game/behaviors/bubba.inc.c:    if (o->oPosY < o->oFloorHeight) {
src/game/behaviors/bubba.inc.c:        o->oPosY = o->oFloorHeight;
src/game/behaviors/bubble.inc.c:    o->oPosX += random_float() * 30.0f;
src/game/behaviors/bubble.inc.c:    o->oPosY += random_float() * 30.0f;
src/game/behaviors/bubble.inc.c:    o->oPosZ += random_float() * 30.0f;
src/game/behaviors/bubble.inc.c:    f32 waterY = find_water_level(o->oPosX, o->oPosZ);
src/game/behaviors/bubble.inc.c:    f32 bubbleY = o->oPosY;
src/game/behaviors/bubble.inc.c:            bubbleSplash->oPosX = o->oPosX;
src/game/behaviors/bubble.inc.c:            bubbleSplash->oPosZ = o->oPosZ;
src/game/behaviors/bubble.inc.c:        o->activeFlags = ACTIVE_FLAG_DEACTIVATED;
src/game/behaviors/bullet_bill.inc.c:    o->oBulletBillInitialMoveYaw = o->oMoveAngleYaw;
src/game/behaviors/bullet_bill.inc.c:    o->oForwardVel = 0.0f;
src/game/behaviors/bullet_bill.inc.c:    o->oMoveAngleYaw = o->oBulletBillInitialMoveYaw;
src/game/behaviors/bullet_bill.inc.c:    o->oFaceAnglePitch = 0;
src/game/behaviors/bullet_bill.inc.c:    o->oFaceAngleRoll = 0;
src/game/behaviors/bullet_bill.inc.c:    o->oMoveFlags = 0;
src/game/behaviors/bullet_bill.inc.c:    o->oAction = 1;
src/game/behaviors/bullet_bill.inc.c:    s16 sp1E = abs_angle_diff(o->oAngleToMario, o->oMoveAngleYaw);
src/game/behaviors/bullet_bill.inc.c:    if (sp1E < 0x2000 && 400.0f < o->oDistanceToMario && o->oDistanceToMario < 2500.0f)
src/game/behaviors/bullet_bill.inc.c:        o->oAction = 2;
src/game/behaviors/bullet_bill.inc.c:    if (o->oTimer < 40)
src/game/behaviors/bullet_bill.inc.c:        o->oForwardVel = 3.0f;
src/game/behaviors/bullet_bill.inc.c:    else if (o->oTimer < 50) {
src/game/behaviors/bullet_bill.inc.c:        if (o->oTimer % 2)
src/game/behaviors/bullet_bill.inc.c:            o->oForwardVel = 3.0f;
src/game/behaviors/bullet_bill.inc.c:            o->oForwardVel = -3.0f;
src/game/behaviors/bullet_bill.inc.c:        if (o->oTimer > 50)
src/game/behaviors/bullet_bill.inc.c:        o->oForwardVel = 60.0f;
src/game/behaviors/bullet_bill.inc.c:        if (o->oDistanceToMario > 300.0f)
src/game/behaviors/bullet_bill.inc.c:            cur_obj_rotate_yaw_toward(o->oAngleToMario, 0x100);
src/game/behaviors/bullet_bill.inc.c:        if (o->oTimer == 50) {
src/game/behaviors/bullet_bill.inc.c:        if (o->oTimer > 150 || o->oMoveFlags & 0x200) {
src/game/behaviors/bullet_bill.inc.c:            o->oAction = 3;
src/game/behaviors/bullet_bill.inc.c:    o->oAction = 0;
src/game/behaviors/bullet_bill.inc.c:    if (o->oTimer == 0) {
src/game/behaviors/bullet_bill.inc.c:        o->oForwardVel = -30.0f;
src/game/behaviors/bullet_bill.inc.c:    o->oFaceAnglePitch += 0x1000;
src/game/behaviors/bullet_bill.inc.c:    o->oFaceAngleRoll += 0x1000;
src/game/behaviors/bullet_bill.inc.c:    o->oPosY += 20.0f;
src/game/behaviors/bullet_bill.inc.c:    if (o->oTimer > 10)
src/game/behaviors/bullet_bill.inc.c:        o->oAction = 0;
src/game/behaviors/bullet_bill.inc.c:        o->oAction = 4;
src/game/behaviors/bully.inc.c:    o->oPosY -= targetOffsetY;
src/game/behaviors/bully.inc.c:    o->oPosY += targetOffsetY;
src/game/behaviors/bully.inc.c:    o->oHomeX = o->oPosX;
src/game/behaviors/bully.inc.c:    o->oHomeZ = o->oPosZ;
src/game/behaviors/bully.inc.c:    o->oBehParams2ndByte = BULLY_BP_SIZE_SMALL;
src/game/behaviors/bully.inc.c:    o->oGravity = 4.0;
src/game/behaviors/bully.inc.c:    o->oFriction = 0.91;
src/game/behaviors/bully.inc.c:    o->oBuoyancy = 1.3;
src/game/behaviors/bully.inc.c:    o->oHomeX = o->oPosX;
src/game/behaviors/bully.inc.c:    o->oHomeY = o->oPosY;
src/game/behaviors/bully.inc.c:    o->oPosY += 2000.0f;
src/game/behaviors/bully.inc.c:    o->oHomeZ = o->oPosZ;
src/game/behaviors/bully.inc.c:    o->oBehParams2ndByte = BULLY_BP_SIZE_BIG;
src/game/behaviors/bully.inc.c:    o->oGravity = 5.0;
src/game/behaviors/bully.inc.c:    o->oFriction = 0.93;
src/game/behaviors/bully.inc.c:    o->oBuoyancy = 1.3;
src/game/behaviors/bully.inc.c:    o->oAction = BULLY_ACT_BOSS;
src/game/behaviors/bully.inc.c:    if (o->oInteractStatus & INT_STATUS_INTERACTED) {
src/game/behaviors/bully.inc.c:        if (o->oBehParams2ndByte == BULLY_BP_SIZE_SMALL)
src/game/behaviors/bully.inc.c:        o->oInteractStatus &= ~INT_STATUS_INTERACTED;
src/game/behaviors/bully.inc.c:        o->oAction = BULLY_ACT_KNOCKBACK;
src/game/behaviors/bully.inc.c:        if (o->oBehParams2ndByte==BULLY_BP_SIZE_BIG) {
src/game/behaviors/bully.inc.c:        o->oForwardVel = 3392.0f / o->hitboxRadius;
src/game/behaviors/bully.inc.c:        o->oMoveAngleYaw = gMarioState->faceAngle[1];
src/game/behaviors/bully.inc.c:        o->oFlags &= ~0x8; /* bit 3 */
src/game/behaviors/bully.inc.c:        o->oBullyMarioCollisionAngle = o->oMoveAngleYaw;
src/game/behaviors/bully.inc.c:    f32 homeX = o->oHomeX;
src/game/behaviors/bully.inc.c:    f32 posY = o->oPosY;
src/game/behaviors/bully.inc.c:    f32 homeZ = o->oHomeZ;
src/game/behaviors/bully.inc.c:    if (o->oTimer < 10) {
src/game/behaviors/bully.inc.c:        o->oForwardVel = 3.0;
src/game/behaviors/bully.inc.c:    } else if (o->oBehParams2ndByte == BULLY_BP_SIZE_SMALL) {
src/game/behaviors/bully.inc.c:        o->oForwardVel = 20.0;
src/game/behaviors/bully.inc.c:        if (o->oTimer >= 31)
src/game/behaviors/bully.inc.c:            o->oTimer = 0;
src/game/behaviors/bully.inc.c:        o->oForwardVel = 30.0;
src/game/behaviors/bully.inc.c:        if (o->oTimer >= 36)
src/game/behaviors/bully.inc.c:            o->oTimer = 0;
src/game/behaviors/bully.inc.c:    if ((!is_point_within_radius_of_mario(homeX, posY, homeZ, 1000))&&((o->oBehParams2ndByte != BULLY_BP_SIZE_SMALL))) {
src/game/behaviors/bully.inc.c:        o->oAction = BULLY_ACT_PATROL;
src/game/behaviors/bully.inc.c:        o->oPosX = o->oHomeX;
src/game/behaviors/bully.inc.c:        o->oPosZ = o->oHomeZ;
src/game/behaviors/bully.inc.c:    if (o->oForwardVel < 10.0 && (s32) o->oVelY == 0) {
src/game/behaviors/bully.inc.c:        o->oForwardVel = 1.0;
src/game/behaviors/bully.inc.c:        o->oBullyKBTimerAndMinionKOCounter++;
src/game/behaviors/bully.inc.c:        o->oFlags |= 0x8; /* bit 3 */
src/game/behaviors/bully.inc.c:        o->oMoveAngleYaw = o->oFaceAngleYaw;
src/game/behaviors/bully.inc.c:        o->header.gfx.unk38.animFrame = 0;
src/game/behaviors/bully.inc.c:    if (o->oBullyKBTimerAndMinionKOCounter == 18) {
src/game/behaviors/bully.inc.c:        o->oAction = BULLY_ACT_CHASE_MARIO;
src/game/behaviors/bully.inc.c:        if (o->oBehParams2ndByte == BULLY_BP_SIZE_BIG ) {
src/game/behaviors/bully.inc.c:            o->oAction = BULLY_ACT_BOSS;
src/game/behaviors/bully.inc.c:                o->oMoveAngleYaw = 0x1000;
src/game/behaviors/bully.inc.c:        o->oBullyKBTimerAndMinionKOCounter = 0;
src/game/behaviors/bully.inc.c:    if (o->oTimer == 0) {
src/game/behaviors/bully.inc.c:        o->oFlags &= ~0x8; /* bit 3 */
src/game/behaviors/bully.inc.c:        o->oMoveAngleYaw += 0x8000;
src/game/behaviors/bully.inc.c:    o->oForwardVel = 5.0;
src/game/behaviors/bully.inc.c:    if (o->oTimer == 15) {
src/game/behaviors/bully.inc.c:        o->oMoveAngleYaw = o->oFaceAngleYaw;
src/game/behaviors/bully.inc.c:        o->oFlags |= 0x8; /* bit 3 */
src/game/behaviors/bully.inc.c:        o->oAction = BULLY_ACT_PATROL;
src/game/behaviors/bully.inc.c:    if (!(collisionFlags & 0x8) && o->oAction != BULLY_ACT_KNOCKBACK) /* bit 3 */
src/game/behaviors/bully.inc.c:        o->oPosX = o->oBullyPrevX;
src/game/behaviors/bully.inc.c:        o->oPosZ = o->oBullyPrevZ;
src/game/behaviors/bully.inc.c:        o->oAction = BULLY_ACT_BACK_UP;
src/game/behaviors/bully.inc.c:    s16 sp26 = o->header.gfx.unk38.animFrame;
src/game/behaviors/bully.inc.c:    switch (o->oAction) {
src/game/behaviors/bully.inc.c:                if (o->oBehParams2ndByte == BULLY_BP_SIZE_SMALL)
src/game/behaviors/bully.inc.c:                if (o->oBehParams2ndByte == BULLY_BP_SIZE_SMALL)
src/game/behaviors/bully.inc.c:    o->oMoveFlags = collisionFlags;
src/game/behaviors/bully.inc.c:    if (o->oBullySubtype & BULLY_STYPE_CHILL) {
src/game/behaviors/bully.inc.c:        if (o->oPosY < 1030.0f)
src/game/behaviors/bully.inc.c:            o->oAction = BULLY_ACT_LAVA_DEATH;
src/game/behaviors/bully.inc.c:    coin->oPosY = o->oPosY + 310.0f;
src/game/behaviors/bully.inc.c:    coin->oMoveAngleYaw = (f32)(o->oBullyMarioCollisionAngle + 0x8000) + random_float() * 1024.0f;
src/game/behaviors/bully.inc.c:    if ((o->oBehParams2ndByte==BULLY_BP_SIZE_BIG)&&(gMarioState->BossHealth > 0)&&(bossaction != 5)) {
src/game/behaviors/bully.inc.c:        o->oAction = BULLY_ACT_FLY;
src/game/behaviors/bully.inc.c:        o->oPosY += 100.0f;
src/game/behaviors/bully.inc.c:        if (o->oBehParams2ndByte == BULLY_BP_SIZE_SMALL) {
src/game/behaviors/bully.inc.c:            if (o->oBullySubtype == BULLY_STYPE_MINION)
src/game/behaviors/bully.inc.c:                o->parentObj->oBullyKBTimerAndMinionKOCounter++;
src/game/behaviors/bully.inc.c:            if (o->oBullySubtype == BULLY_STYPE_CHILL)
src/game/behaviors/bully.inc.c:                spawn_default_star(o->oHomeX, o->oHomeY, o->oHomeZ);
src/game/behaviors/bully.inc.c:    o->oBullyPrevX = o->oPosX;
src/game/behaviors/bully.inc.c:    o->oBullyPrevY = o->oPosY;
src/game/behaviors/bully.inc.c:    o->oBullyPrevZ = o->oPosZ;
src/game/behaviors/bully.inc.c:    if (o->oBehParams2ndByte==BULLY_BP_SIZE_BIG) {
src/game/behaviors/bully.inc.c:        //print_text_fmt_int(210, 72, "ACT %d", o->oAction);
src/game/behaviors/bully.inc.c:    switch (o->oAction) {
src/game/behaviors/bully.inc.c:            if (o->oBehParams2ndByte == BULLY_BP_SIZE_BIG ) {
src/game/behaviors/bully.inc.c:                o->oAction = BULLY_ACT_BOSS;
src/game/behaviors/bully.inc.c:            o->oForwardVel = 5.0;
src/game/behaviors/bully.inc.c:            if (obj_return_home_if_safe(o, o->oHomeX, o->oPosY, o->oHomeZ, 800) == 1) {
src/game/behaviors/bully.inc.c:                o->oAction = BULLY_ACT_CHASE_MARIO;
src/game/behaviors/bully.inc.c:            if (o->oBehParams2ndByte == BULLY_BP_SIZE_BIG ) {
src/game/behaviors/bully.inc.c:                o->oAction = BULLY_ACT_BOSS;
src/game/behaviors/bully.inc.c:            if (o->oBehParams2ndByte == BULLY_BP_SIZE_BIG ) {
src/game/behaviors/bully.inc.c:                o->oAction = BULLY_ACT_BOSS;
src/game/behaviors/bully.inc.c:            if ((gMarioState->pos[1] < o->oHomeY-500.0f)&&(o->oDistanceToMario < 3000.0f)) {
src/game/behaviors/bully.inc.c:                    o->oHealth = (30-gMarioState->BossHealth)/5;
src/game/behaviors/bully.inc.c:                    o->oPosY += 100.0f;
src/game/behaviors/bully.inc.c:                    o->oVelY = 80.0f;
src/game/behaviors/bully.inc.c:                    o->oForwardVel = 20.0f;
src/game/behaviors/bully.inc.c:                    o->oPosX += o->oForwardVel * sins(o->oMoveAngleYaw);
src/game/behaviors/bully.inc.c:                    o->oPosZ += o->oForwardVel * coss(o->oMoveAngleYaw);
src/game/behaviors/bully.inc.c:                    if (o->oMoveFlags & 1) {
src/game/behaviors/bully.inc.c:                        o->oVelY = 80.0f-gMarioState->BossHealth;
src/game/behaviors/bully.inc.c:                            o->oMoveAngleYaw = random_u16();
src/game/behaviors/bully.inc.c:                            o->oMoveAngleYaw = cur_obj_angle_to_home();
src/game/behaviors/bully.inc.c:                        o->oFaceAngleYaw = o->oMoveAngleYaw;
src/game/behaviors/bully.inc.c:                        o->oHealth --;
src/game/behaviors/bully.inc.c:                        if (o->oHealth < 1) {
src/game/behaviors/bully.inc.c:                    o->oFaceAngleYaw = o->oMoveAngleYaw;
src/game/behaviors/bully.inc.c:                    o->oMoveAngleYaw = cur_obj_angle_to_home();
src/game/behaviors/bully.inc.c:                    o->oFaceAngleYaw = o->oMoveAngleYaw;
src/game/behaviors/bully.inc.c:                    o->oForwardVel = 30.0f;
src/game/behaviors/bully.inc.c:                        o->oMoveAngleYaw = 0;
src/game/behaviors/bully.inc.c:                    o->oPosX = o->oHomeX;
src/game/behaviors/bully.inc.c:                    o->oPosZ = o->oHomeZ;
src/game/behaviors/bully.inc.c:                    if (o->oTimer*0x10 < 0x1000) {
src/game/behaviors/bully.inc.c:                        o->oMoveAngleYaw += o->oTimer*0x10;
src/game/behaviors/bully.inc.c:                        o->oMoveAngleYaw += 0x1000;
src/game/behaviors/bully.inc.c:                    o->oFaceAngleYaw = o->oMoveAngleYaw;
src/game/behaviors/bully.inc.c:                    flame->oFaceAngleYaw = o->oFaceAngleYaw;
src/game/behaviors/bully.inc.c:                    flame->oMoveAngleYaw = o->oFaceAngleYaw;
src/game/behaviors/bully.inc.c:                    if (o->oTimer > 900) {
src/game/behaviors/bully.inc.c:                    if ((o->oTimer % 9 == 0)&&(o->oTimer>100)) {
src/game/behaviors/bully.inc.c:                        flame->oMoveAngleYaw = o->oAngleToMario;
src/game/behaviors/bully.inc.c:                    if ((o->oTimer % 4 == 0)&&(o->oTimer>300)) {
src/game/behaviors/bully.inc.c:                    if ((o->oTimer % 2 == 0)&&(o->oTimer>700)) {
src/game/behaviors/bully.inc.c:                    o->header.gfx.unk38.animFrame = 0;
src/game/behaviors/bully.inc.c:                if (o->oAction != BULLY_ACT_LAVA_DEATH) {
src/game/behaviors/bully.inc.c:                    o->oAction = BULLY_ACT_BOSS;
src/game/behaviors/bully.inc.c:            o->oFaceAngleYaw = o->oMoveAngleYaw;
src/game/behaviors/bully.inc.c:            if (((o->oTimer % 8) == 0)&&(o->oTimer < 40)) {
src/game/behaviors/bully.inc.c:            o->oMoveFlags = collisionFlags;
src/game/behaviors/bully.inc.c:            o->oMoveAngleYaw =  cur_obj_angle_to_home();
src/game/behaviors/bully.inc.c:            o->oForwardVel = 25.0f;
src/game/behaviors/bully.inc.c:            if (o->oPosY < o->oHomeY-350.0f) {
src/game/behaviors/bully.inc.c:                o->oVelY = 250.0f;
src/game/behaviors/bully.inc.c:            if (o->oMoveFlags & 1) {
src/game/behaviors/bully.inc.c:                o->oAction = BULLY_ACT_BOSS;
src/game/behaviors/bully.inc.c:            o->activeFlags = ACTIVE_FLAG_DEACTIVATED;
src/game/behaviors/bully.inc.c:    o->header.gfx.node.flags |= GRAPH_RENDER_INVISIBLE;
src/game/behaviors/bully.inc.c:    o->oAction = BULLY_ACT_INACTIVE;
src/game/behaviors/bully.inc.c:    o->oBullyPrevX = o->oPosX;
src/game/behaviors/bully.inc.c:    o->oBullyPrevY = o->oPosY;
src/game/behaviors/bully.inc.c:    o->oBullyPrevZ = o->oPosZ;
src/game/behaviors/bully.inc.c:    switch (o->oAction) {
src/game/behaviors/bully.inc.c:            o->oForwardVel = 5.0;
src/game/behaviors/bully.inc.c:            if (obj_return_home_if_safe(o, o->oHomeX, o->oPosY, o->oHomeZ, 1000) == 1) {
src/game/behaviors/bully.inc.c:                o->oAction = BULLY_ACT_CHASE_MARIO;
src/game/behaviors/bully.inc.c:            if (o->oBullyKBTimerAndMinionKOCounter == 3) {
src/game/behaviors/bully.inc.c:                if (o->oTimer >= 91)
src/game/behaviors/bully.inc.c:                    o->oAction = BULLY_ACT_ACTIVATE_AND_FALL;
src/game/behaviors/bully.inc.c:                o->oAction = BULLY_ACT_PATROL;
src/game/behaviors/bully.inc.c:                set_camera_shake_from_point(SHAKE_POS_SMALL, o->oPosX, o->oPosY, o->oPosZ);
src/game/behaviors/bully.inc.c:            o->header.gfx.node.flags &= ~GRAPH_RENDER_INVISIBLE;
src/game/behaviors/bully.inc.c:            o->activeFlags = ACTIVE_FLAG_DEACTIVATED;
src/game/behaviors/butterfly.inc.c:    o->oButterflyYPhase = random_float() * 100.0f;
src/game/behaviors/butterfly.inc.c:    o->header.gfx.unk38.animFrame = random_float() * 7.0f;
src/game/behaviors/butterfly.inc.c:    o->oHomeX = o->oPosX;
src/game/behaviors/butterfly.inc.c:    o->oHomeY = o->oPosY;
src/game/behaviors/butterfly.inc.c:    o->oHomeZ = o->oPosZ;
src/game/behaviors/butterfly.inc.c:    s16 yaw = o->oMoveAngleYaw;
src/game/behaviors/butterfly.inc.c:    s16 pitch = o->oMoveAnglePitch;
src/game/behaviors/butterfly.inc.c:    s16 yPhase = o->oButterflyYPhase;
src/game/behaviors/butterfly.inc.c:    o->oVelX = sins(yaw) * (f32) speed;
src/game/behaviors/butterfly.inc.c:    o->oVelY = sins(pitch) * (f32) speed;
src/game/behaviors/butterfly.inc.c:    o->oVelZ = coss(yaw) * (f32) speed;
src/game/behaviors/butterfly.inc.c:    o->oPosX += o->oVelX;
src/game/behaviors/butterfly.inc.c:    o->oPosZ += o->oVelZ;
src/game/behaviors/butterfly.inc.c:    if (o->oAction == BUTTERFLY_ACT_FOLLOW_MARIO)
src/game/behaviors/butterfly.inc.c:        o->oPosY -= o->oVelY + coss((s32)(yPhase * 655.36)) * 20.0f / 4;
src/game/behaviors/butterfly.inc.c:        o->oPosY -= o->oVelY;
src/game/behaviors/butterfly.inc.c:    floorY = find_floor_height_and_data(o->oPosX, o->oPosY, o->oPosZ, &sp24);
src/game/behaviors/butterfly.inc.c:    if (o->oPosY < floorY + 2.0f)
src/game/behaviors/butterfly.inc.c:        o->oPosY = floorY + 2.0f;
src/game/behaviors/butterfly.inc.c:    o->oButterflyYPhase++;
src/game/behaviors/butterfly.inc.c:    if (o->oButterflyYPhase >= 101)
src/game/behaviors/butterfly.inc.c:        o->oButterflyYPhase = 0;
src/game/behaviors/butterfly.inc.c:    gMarioObject->oPosX += 5 * o->oButterflyYPhase / 4;
src/game/behaviors/butterfly.inc.c:    gMarioObject->oPosZ += 5 * o->oButterflyYPhase / 4;
src/game/behaviors/butterfly.inc.c:    gMarioObject->oPosX -= 5 * o->oButterflyYPhase / 4;
src/game/behaviors/butterfly.inc.c:    gMarioObject->oPosZ -= 5 * o->oButterflyYPhase / 4;
src/game/behaviors/butterfly.inc.c:    gMarioObject->oPosY += (5 * o->oButterflyYPhase + 0x100) / 4;
src/game/behaviors/butterfly.inc.c:    gMarioObject->oPosY -= (5 * o->oButterflyYPhase + 0x100) / 4;
src/game/behaviors/butterfly.inc.c:    if (is_point_within_radius_of_mario(o->oPosX, o->oPosY, o->oPosZ, 1000)) {
src/game/behaviors/butterfly.inc.c:        o->oAction = BUTTERFLY_ACT_FOLLOW_MARIO;
src/game/behaviors/butterfly.inc.c:        o->oMoveAngleYaw = gMarioObject->header.gfx.angle[1];
src/game/behaviors/butterfly.inc.c:    if (!is_point_within_radius_of_mario(o->oHomeX, o->oHomeY, o->oHomeZ, 1200))
src/game/behaviors/butterfly.inc.c:        o->oAction = BUTTERFLY_ACT_RETURN_HOME;
src/game/behaviors/butterfly.inc.c:    f32 homeDistX = o->oHomeX - o->oPosX;
src/game/behaviors/butterfly.inc.c:    f32 homeDistY = o->oHomeY - o->oPosY;
src/game/behaviors/butterfly.inc.c:    f32 homeDistZ = o->oHomeZ - o->oPosZ;
src/game/behaviors/butterfly.inc.c:    o->oMoveAngleYaw = approach_s16_symmetric(o->oMoveAngleYaw, hAngleToHome, 0x800);
src/game/behaviors/butterfly.inc.c:    o->oMoveAnglePitch = approach_s16_symmetric(o->oMoveAnglePitch, vAngleToHome, 0x50);
src/game/behaviors/butterfly.inc.c:        o->oAction = BUTTERFLY_ACT_RESTING;
src/game/behaviors/butterfly.inc.c:        o->oPosX = o->oHomeX;
src/game/behaviors/butterfly.inc.c:        o->oPosY = o->oHomeY;
src/game/behaviors/butterfly.inc.c:        o->oPosZ = o->oHomeZ;
src/game/behaviors/butterfly.inc.c:    switch (o->oAction) {
src/game/behaviors/camera_lakitu.inc.c:    if (o->oBehParams2ndByte != CAMERA_LAKITU_BP_FOLLOW_CAMERA) {
src/game/behaviors/camera_lakitu.inc.c:            o->oAction = CAMERA_LAKITU_INTRO_ACT_SPAWN_CLOUD;
src/game/behaviors/camera_lakitu.inc.c:        o->oAction = CAMERA_LAKITU_INTRO_ACT_UNK2;
src/game/behaviors/camera_lakitu.inc.c:        o->oPosX = 1800.0f;
src/game/behaviors/camera_lakitu.inc.c:        o->oPosY = 2400.0f;
src/game/behaviors/camera_lakitu.inc.c:        o->oPosZ = -2400.0f;
src/game/behaviors/camera_lakitu.inc.c:        o->oMoveAnglePitch = 0x4000;
src/game/behaviors/camera_lakitu.inc.c:        o->oCameraLakituSpeed = 60.0f;
src/game/behaviors/camera_lakitu.inc.c:        o->oCameraLakituCircleRadius = 1000.0f;
src/game/behaviors/camera_lakitu.inc.c:    o->oFaceAnglePitch = obj_turn_pitch_toward_mario(120.0f, 0);
src/game/behaviors/camera_lakitu.inc.c:    o->oFaceAngleYaw = o->oAngleToMario;
src/game/behaviors/camera_lakitu.inc.c:    if (o->oCameraLakituFinishedDialog) {
src/game/behaviors/camera_lakitu.inc.c:        approach_f32_ptr(&o->oCameraLakituSpeed, 60.0f, 3.0f);
src/game/behaviors/camera_lakitu.inc.c:        if (o->oDistanceToMario > 6000.0f) {
src/game/behaviors/camera_lakitu.inc.c:        if (o->oCameraLakituSpeed != 0.0f) {
src/game/behaviors/camera_lakitu.inc.c:            if (o->oDistanceToMario > 5000.0f) {
src/game/behaviors/camera_lakitu.inc.c:                targetMovePitch = o->oMoveAnglePitch;
src/game/behaviors/camera_lakitu.inc.c:                targetMoveYaw = o->oAngleToMario;
src/game/behaviors/camera_lakitu.inc.c:                                 - atan2s(o->oCameraLakituCircleRadius,
src/game/behaviors/camera_lakitu.inc.c:                                          o->oDistanceToMario - o->oCameraLakituCircleRadius);
src/game/behaviors/camera_lakitu.inc.c:                if ((s16)(o->oMoveAngleYaw - o->oAngleToMario) < 0) {
src/game/behaviors/camera_lakitu.inc.c:                targetMoveYaw = o->oAngleToMario + turnAmount;
src/game/behaviors/camera_lakitu.inc.c:                targetMovePitch = o->oFaceAnglePitch;
src/game/behaviors/camera_lakitu.inc.c:                approach_f32_ptr(&o->oCameraLakituCircleRadius, 200.0f, 50.0f);
src/game/behaviors/camera_lakitu.inc.c:                if (o->oDistanceToMario < 1000.0f) {
src/game/behaviors/camera_lakitu.inc.c:                    if (!o->oCameraLakituUnk104) {
src/game/behaviors/camera_lakitu.inc.c:                        o->oCameraLakituUnk104 = TRUE;
src/game/behaviors/camera_lakitu.inc.c:                    approach_f32_ptr(&o->oCameraLakituSpeed, 20.0f, 1.0f);
src/game/behaviors/camera_lakitu.inc.c:                    if (o->oDistanceToMario < 500.0f
src/game/behaviors/camera_lakitu.inc.c:                        && abs_angle_diff(gMarioObject->oFaceAngleYaw, o->oFaceAngleYaw) > 0x7000) {
src/game/behaviors/camera_lakitu.inc.c:                        approach_f32_ptr(&o->oCameraLakituSpeed, 0.0f, 5.0f);
src/game/behaviors/camera_lakitu.inc.c:            o->oCameraLakituFinishedDialog = TRUE;
src/game/behaviors/camera_lakitu.inc.c:    o->oCameraLakituPitchVel = approach_s16_symmetric(o->oCameraLakituPitchVel, 0x7D0, 0x190);
src/game/behaviors/camera_lakitu.inc.c:    obj_move_pitch_approach(targetMovePitch, o->oCameraLakituPitchVel);
src/game/behaviors/camera_lakitu.inc.c:    o->oCameraLakituYawVel = approach_s16_symmetric(o->oCameraLakituYawVel, 0x7D0, 0x64);
src/game/behaviors/camera_lakitu.inc.c:    cur_obj_rotate_yaw_toward(targetMoveYaw, o->oCameraLakituYawVel);
src/game/behaviors/camera_lakitu.inc.c:    obj_compute_vel_from_move_pitch(o->oCameraLakituSpeed);
src/game/behaviors/camera_lakitu.inc.c:    if (!(o->activeFlags & ACTIVE_FLAG_IN_DIFFERENT_ROOM)) {
src/game/behaviors/camera_lakitu.inc.c:        obj_update_blinking(&o->oCameraLakituBlinkTimer, 20, 40, 4);
src/game/behaviors/camera_lakitu.inc.c:        if (o->oBehParams2ndByte != CAMERA_LAKITU_BP_FOLLOW_CAMERA) {
src/game/behaviors/camera_lakitu.inc.c:            switch (o->oAction) {
src/game/behaviors/camera_lakitu.inc.c:                o->oPosX = gLakituState.curPos[0];
src/game/behaviors/camera_lakitu.inc.c:                o->oPosY = gLakituState.curPos[1];
src/game/behaviors/camera_lakitu.inc.c:                o->oPosZ = gLakituState.curPos[2];
src/game/behaviors/camera_lakitu.inc.c:                o->oHomeX = gLakituState.curFocus[0];
src/game/behaviors/camera_lakitu.inc.c:                o->oHomeZ = gLakituState.curFocus[2];
src/game/behaviors/camera_lakitu.inc.c:                o->oFaceAngleYaw = -cur_obj_angle_to_home();
src/game/behaviors/camera_lakitu.inc.c:                o->oFaceAnglePitch = atan2s(cur_obj_lateral_dist_to_home(),
src/game/behaviors/camera_lakitu.inc.c:                                            o->oPosY - gLakituState.curFocus[1]);
src/game/behaviors/camera_lakitu.inc.c:                o->oPosX = (f32) 0x875C3D / 0x800 + val0C;
src/game/behaviors/cannon.inc.c:    o->oPosY += o->oVelY;
src/game/behaviors/cannon.inc.c:    if (o->oTimer == 0) {
src/game/behaviors/cannon.inc.c:        o->oInteractStatus = 0;
src/game/behaviors/cannon.inc.c:        o->oPosX = o->oHomeX;
src/game/behaviors/cannon.inc.c:        o->oPosY = o->oHomeY;
src/game/behaviors/cannon.inc.c:        o->oPosZ = o->oHomeZ;
src/game/behaviors/cannon.inc.c:        o->oMoveAnglePitch = 0;
src/game/behaviors/cannon.inc.c:        o->oMoveAngleYaw = (s16)(o->oBehParams2ndByte << 8);
src/game/behaviors/cannon.inc.c:        o->oCannonUnkF4 = 0;
src/game/behaviors/cannon.inc.c:        o->oCannonUnk10C = 0;
src/game/behaviors/cannon.inc.c:    if (o->oDistanceToMario < 500.0f) {
src/game/behaviors/cannon.inc.c:        if (o->oInteractStatus & INT_STATUS_INTERACTED
src/game/behaviors/cannon.inc.c:            && (!(o->oInteractStatus
src/game/behaviors/cannon.inc.c:            o->oAction = 4;
src/game/behaviors/cannon.inc.c:            o->oCannonUnk10C = 1;
src/game/behaviors/cannon.inc.c:            o->oCannonUnkF8 = 1;
src/game/behaviors/cannon.inc.c:            o->oInteractStatus = 0;
src/game/behaviors/cannon.inc.c:        o->oCannonUnk10C = 0;
src/game/behaviors/cannon.inc.c:    if (o->oTimer == 0)
src/game/behaviors/cannon.inc.c:    o->oPosY += 5.0f;
src/game/behaviors/cannon.inc.c:    o->oPosX += (f32)((o->oTimer / 2 & 1) - 0.5) * 2;
src/game/behaviors/cannon.inc.c:    o->oPosZ += (f32)((o->oTimer / 2 & 1) - 0.5) * 2;
src/game/behaviors/cannon.inc.c:    if (o->oTimer > 67) {
src/game/behaviors/cannon.inc.c:        o->oPosX += (f32)((o->oTimer / 2 & 1) - 0.5) * 4;
src/game/behaviors/cannon.inc.c:        o->oPosZ += (f32)((o->oTimer / 2 & 1) - 0.5) * 4;
src/game/behaviors/cannon.inc.c:        o->oAction = 6;
src/game/behaviors/cannon.inc.c:    if (o->oTimer == 0)
src/game/behaviors/cannon.inc.c:    if (o->oTimer < 4) {
src/game/behaviors/cannon.inc.c:        o->oPosX += (f32)((o->oTimer / 2 & 1) - 0.5) * 4.0f;
src/game/behaviors/cannon.inc.c:        o->oPosZ += (f32)((o->oTimer / 2 & 1) - 0.5) * 4.0f;
src/game/behaviors/cannon.inc.c:        if (o->oTimer < 6) {
src/game/behaviors/cannon.inc.c:            if (o->oTimer < 22) {
src/game/behaviors/cannon.inc.c:                o->oMoveAngleYaw =
src/game/behaviors/cannon.inc.c:                    sins(o->oCannonUnkF4) * 0x4000 + ((s16)(o->oBehParams2ndByte << 8));
src/game/behaviors/cannon.inc.c:                o->oCannonUnkF4 += 0x400;
src/game/behaviors/cannon.inc.c:            } else if (o->oTimer < 26) {
src/game/behaviors/cannon.inc.c:                o->oCannonUnkF4 = 0;
src/game/behaviors/cannon.inc.c:                o->oAction = 5;
src/game/behaviors/cannon.inc.c:    if (o->oTimer == 0)
src/game/behaviors/cannon.inc.c:    if (o->oTimer < 4) {
src/game/behaviors/cannon.inc.c:        if (o->oTimer < 20) {
src/game/behaviors/cannon.inc.c:            o->oCannonUnkF4 += 0x400;
src/game/behaviors/cannon.inc.c:            o->oMoveAnglePitch = sins(o->oCannonUnkF4) * 0x2000;
src/game/behaviors/cannon.inc.c:        } else if (o->oTimer < 25) {
src/game/behaviors/cannon.inc.c:            o->oAction = 1;
src/game/behaviors/cannon.inc.c:    o->oCannonUnk10C = 0;
src/game/behaviors/cannon.inc.c:    o->oAction = 3;
src/game/behaviors/cannon.inc.c:    if (o->oTimer > 3)
src/game/behaviors/cannon.inc.c:        o->oAction = 0;
src/game/behaviors/cannon.inc.c:    if (o->oCannonUnkF8)
src/game/behaviors/cannon.inc.c:        o->oCannonUnkF8++;
src/game/behaviors/cannon.inc.c:    o->oInteractStatus = 0;
src/game/behaviors/cannon.inc.c:    struct Object *parent = o->parentObj;
src/game/behaviors/cannon.inc.c:        obj_copy_pos(o, o->parentObj);
src/game/behaviors/cannon.inc.c:        o->oMoveAngleYaw = o->parentObj->oMoveAngleYaw;
src/game/behaviors/cannon.inc.c:        o->oFaceAnglePitch = o->parentObj->oMoveAnglePitch;
src/game/behaviors/cannon_door.inc.c:        cannon->oBehParams2ndByte = o->oBehParams2ndByte;
src/game/behaviors/cannon_door.inc.c:        cannon->oPosX = o->oHomeX;
src/game/behaviors/cannon_door.inc.c:        cannon->oPosY = o->oHomeY;
src/game/behaviors/cannon_door.inc.c:        cannon->oPosZ = o->oHomeZ;
src/game/behaviors/cannon_door.inc.c:        o->oAction = CANNON_TRAP_DOOR_ACT_OPEN;
src/game/behaviors/cannon_door.inc.c:        o->activeFlags = ACTIVE_FLAG_DEACTIVATED;
src/game/behaviors/cannon_door.inc.c:    if (o->oTimer == 0)
src/game/behaviors/cannon_door.inc.c:    if (o->oTimer < 30) {
src/game/behaviors/cannon_door.inc.c:        o->oVelY = -0.5f;
src/game/behaviors/cannon_door.inc.c:        o->oPosY += o->oVelY;
src/game/behaviors/cannon_door.inc.c:        o->oVelX = 0;
src/game/behaviors/cannon_door.inc.c:        if (o->oTimer == 80) {
src/game/behaviors/cannon_door.inc.c:        o->oVelX = 4.0f;
src/game/behaviors/cannon_door.inc.c:        o->oVelY = 0;
src/game/behaviors/cannon_door.inc.c:        o->oPosX += o->oVelX;
src/game/behaviors/cannon_door.inc.c:    switch (o->oAction) {
src/game/behaviors/cannon_door.inc.c:            o->oVelX = 0;
src/game/behaviors/cannon_door.inc.c:            o->oVelY = 0;
src/game/behaviors/cannon_door.inc.c:            o->oDrawingDistance = 4000.0f;
src/game/behaviors/cannon_door.inc.c:                o->oAction = CANNON_TRAP_DOOR_ACT_CAM_ZOOM;
src/game/behaviors/cannon_door.inc.c:            if (o->oTimer == 60)
src/game/behaviors/cannon_door.inc.c:                o->oAction = CANNON_TRAP_DOOR_ACT_OPENING;
src/game/behaviors/cannon_door.inc.c:            o->oDrawingDistance = 20000.0f;
src/game/behaviors/cap.inc.c:    if (o->oInteractStatus & INT_STATUS_INTERACTED) {
src/game/behaviors/cap.inc.c:        o->activeFlags = ACTIVE_FLAG_DEACTIVATED;
src/game/behaviors/cap.inc.c:        o->oInteractStatus = 0;
src/game/behaviors/cap.inc.c:    if (o->oTimer > 300) {
src/game/behaviors/cap.inc.c:            o->activeFlags = ACTIVE_FLAG_DEACTIVATED;
src/game/behaviors/cap.inc.c:            o->oAction = 10;
src/game/behaviors/cap.inc.c:            o->oForwardVel = 0.0f;
src/game/behaviors/cap.inc.c:            o->oAction = 11;
src/game/behaviors/cap.inc.c:            o->oMoveAngleYaw = (sObjFloor->force & 0xFF) << 8;
src/game/behaviors/cap.inc.c:            o->oForwardVel = 8 + 2 * (0 - ((sObjFloor->force & 0xFF00) >> 8));
src/game/behaviors/cap.inc.c:            o->oAction = 12;
src/game/behaviors/cap.inc.c:            o->oForwardVel = 0.0f;
src/game/behaviors/cap.inc.c:            o->oAction = 13;
src/game/behaviors/cap.inc.c:            o->oMoveAngleYaw = (sObjFloor->force & 0xFF) << 8;
src/game/behaviors/cap.inc.c:            o->oForwardVel = 8 + 2 * (0 - ((sObjFloor->force & 0xFF00) >> 8));
src/game/behaviors/cap.inc.c:    switch (o->oAction) {
src/game/behaviors/cap.inc.c:            if (o->oTimer < 10) {
src/game/behaviors/cap.inc.c:                o->oGraphYOffset += -1.0f;
src/game/behaviors/cap.inc.c:                o->oFaceAnglePitch = 0x2000;
src/game/behaviors/cap.inc.c:            if (o->oTimer < 10)
src/game/behaviors/cap.inc.c:                o->oGraphYOffset += -3.0f;
src/game/behaviors/cap.inc.c:            o->oFaceAnglePitch = 0x2000;
src/game/behaviors/cap.inc.c:            o->oGraphYOffset += -1.0f;
src/game/behaviors/cap.inc.c:            if (o->oTimer >= 21)
src/game/behaviors/cap.inc.c:                o->activeFlags = ACTIVE_FLAG_DEACTIVATED;
src/game/behaviors/cap.inc.c:            o->oGraphYOffset += -6.0f;
src/game/behaviors/cap.inc.c:            if (o->oTimer >= 21)
src/game/behaviors/cap.inc.c:                o->activeFlags = ACTIVE_FLAG_DEACTIVATED;
src/game/behaviors/cap.inc.c:            o->oFaceAnglePitch = 0x2000;
src/game/behaviors/cap.inc.c:    o->oGravity = 1.2f;
src/game/behaviors/cap.inc.c:    o->oFriction = 0.999f;
src/game/behaviors/cap.inc.c:    o->oBuoyancy = 0.9f;
src/game/behaviors/cap.inc.c:    o->oOpacity = 255;
src/game/behaviors/cap.inc.c:    o->oCapUnkF8 += 0x2000;
src/game/behaviors/cap.inc.c:    o->header.gfx.scale[1] = coss(o->oCapUnkF8) * 0.3 + 0.7;
src/game/behaviors/cap.inc.c:    if (o->oCapUnkF8 == 0x10000) {
src/game/behaviors/cap.inc.c:        o->oCapUnkF8 = 0;
src/game/behaviors/cap.inc.c:        o->oCapUnkF4 = 2;
src/game/behaviors/cap.inc.c:    o->oFaceAngleYaw += o->oForwardVel * 128.0f;
src/game/behaviors/cap.inc.c:        if (o->oVelY != 0.0f) {
src/game/behaviors/cap.inc.c:            o->oCapUnkF4 = 1;
src/game/behaviors/cap.inc.c:            o->oVelY = 0.0f;
src/game/behaviors/cap.inc.c:    if (o->oCapUnkF4 == 1)
src/game/behaviors/cap.inc.c:    switch (o->oAction) {
src/game/behaviors/cap.inc.c:    if (o->oTimer > 20)
src/game/behaviors/cap.inc.c:    o->oGravity = 2.4f;
src/game/behaviors/cap.inc.c:    o->oFriction = 0.999f;
src/game/behaviors/cap.inc.c:    o->oBuoyancy = 1.5f;
src/game/behaviors/cap.inc.c:    o->oOpacity = 0xFF;
src/game/behaviors/cap.inc.c:    o->oFaceAngleYaw += o->oForwardVel * 128.0f;
src/game/behaviors/cap.inc.c:    switch (o->oAction) {
src/game/behaviors/cap.inc.c:    if (o->oTimer > 20)
src/game/behaviors/cap.inc.c:    o->oGravity = 0.7f;
src/game/behaviors/cap.inc.c:    o->oFriction = 0.89f;
src/game/behaviors/cap.inc.c:    o->oBuoyancy = 0.9f;
src/game/behaviors/cap.inc.c:    o->oOpacity = 0xFF;
src/game/behaviors/cap.inc.c:    save_file_set_cap_pos(o->oPosX, o->oPosY, o->oPosZ);
src/game/behaviors/cap.inc.c:    o->oFaceAngleYaw += o->oForwardVel * 128.0f;
src/game/behaviors/cap.inc.c:    o->oFaceAnglePitch += o->oForwardVel * 80.0f;
src/game/behaviors/cap.inc.c:        if (o->oVelY != 0.0f) {
src/game/behaviors/cap.inc.c:            o->oCapUnkF4 = 1;
src/game/behaviors/cap.inc.c:            o->oVelY = 0.0f;
src/game/behaviors/cap.inc.c:            o->oFaceAnglePitch = 0;
src/game/behaviors/cap.inc.c:    if (o->oCapUnkF4 == 1)
src/game/behaviors/cap.inc.c:    switch (o->oAction) {
src/game/behaviors/cap.inc.c:    if ((s32) o->oForwardVel != 0)
src/game/behaviors/cap.inc.c:        save_file_set_cap_pos(o->oPosX, o->oPosY, o->oPosZ);
src/game/behaviors/cap.inc.c:    if (o->activeFlags == ACTIVE_FLAG_DEACTIVATED)
src/game/behaviors/cap.inc.c:    o->oGravity = 1.2f;
src/game/behaviors/cap.inc.c:    o->oFriction = 0.999f;
src/game/behaviors/cap.inc.c:    o->oBuoyancy = 0.9f;
src/game/behaviors/cap.inc.c:    o->oOpacity = 150;
src/game/behaviors/capswitch.inc.c:    o->oAnimState = o->oBehParams2ndByte;
src/game/behaviors/capswitch.inc.c:    o->oPosY += 71.0f;
src/game/behaviors/capswitch.inc.c:        if (save_file_get_flags() & D_8032F0C0[o->oBehParams2ndByte]) {
src/game/behaviors/capswitch.inc.c:            o->oAction = 3;
src/game/behaviors/capswitch.inc.c:            o->header.gfx.scale[1] = 0.1f;
src/game/behaviors/capswitch.inc.c:            o->oAction = 1;
src/game/behaviors/capswitch.inc.c:        o->oAction = 1;
src/game/behaviors/capswitch.inc.c:        save_file_set_flags(D_8032F0C0[o->oBehParams2ndByte]);
src/game/behaviors/capswitch.inc.c:        o->oAction = 2;
src/game/behaviors/capswitch.inc.c:    if (o->oTimer < 5) {
src/game/behaviors/capswitch.inc.c:        if (o->oTimer == 4) {
src/game/behaviors/capswitch.inc.c:            spawn_triangle_break_particles(60, 139, 0.3f, o->oBehParams2ndByte);
src/game/behaviors/capswitch.inc.c:            o->oAction = 3;
src/game/behaviors/castle_cannon_grate.inc.c:        o->activeFlags = ACTIVE_FLAG_DEACTIVATED;
src/game/behaviors/castle_flag.inc.c:    o->header.gfx.unk38.animFrame = random_float() * 28.0f;
src/game/behaviors/castle_floor_trap.inc.c:        o->parentObj->oInteractStatus |= INT_STATUS_TRAP_TURN;
src/game/behaviors/castle_floor_trap.inc.c:    o->oFaceAngleRoll = o->parentObj->oFaceAngleRoll;
src/game/behaviors/castle_floor_trap.inc.c:        o->oAction = 4; // rotates trapdoor so it looks always open
src/game/behaviors/castle_floor_trap.inc.c:        o->oAngleVelRoll = 0x400;
src/game/behaviors/castle_floor_trap.inc.c:        if (o->oInteractStatus & INT_STATUS_TRAP_TURN)
src/game/behaviors/castle_floor_trap.inc.c:            o->oAction = 1; // detects interact then opens the trapdoor
src/game/behaviors/castle_floor_trap.inc.c:    if (o->oTimer == 0)
src/game/behaviors/castle_floor_trap.inc.c:    o->oAngleVelRoll -= 0x100;
src/game/behaviors/castle_floor_trap.inc.c:    o->oFaceAngleRoll += o->oAngleVelRoll;
src/game/behaviors/castle_floor_trap.inc.c:    if (o->oFaceAngleRoll < -0x4000) {
src/game/behaviors/castle_floor_trap.inc.c:        o->oFaceAngleRoll = -0x4000;
src/game/behaviors/castle_floor_trap.inc.c:        o->oAction = 2; // after opening is done, enable close detection
src/game/behaviors/castle_floor_trap.inc.c:    if (o->oDistanceToMario > 1000.0f)
src/game/behaviors/castle_floor_trap.inc.c:        o->oAction = 3; // close trapdoor
src/game/behaviors/castle_floor_trap.inc.c:    o->oFaceAngleRoll += 0x400;
src/game/behaviors/castle_floor_trap.inc.c:    if (o->oFaceAngleRoll > 0) {
src/game/behaviors/castle_floor_trap.inc.c:        o->oFaceAngleRoll = 0;
src/game/behaviors/castle_floor_trap.inc.c:        o->oAction = 0; // after closing, reloads open detection
src/game/behaviors/castle_floor_trap.inc.c:        o->oInteractStatus &= ~INT_STATUS_TRAP_TURN;
src/game/behaviors/castle_floor_trap.inc.c:    o->oFaceAngleRoll = -0x3C00;
src/game/behaviors/castle_floor_trap.inc.c:    switch (o->oAction) {
src/game/behaviors/celebration_star.inc.c:    o->oHomeX = gMarioObject->header.gfx.pos[0];
src/game/behaviors/celebration_star.inc.c:    o->oPosY = gMarioObject->header.gfx.pos[1] + 30.0f;
src/game/behaviors/celebration_star.inc.c:    o->oHomeZ = gMarioObject->header.gfx.pos[2];
src/game/behaviors/celebration_star.inc.c:    o->oMoveAngleYaw = gMarioObject->header.gfx.angle[1] + 0x8000;
src/game/behaviors/celebration_star.inc.c:    o->oCelebStarDiameterOfRotation = 100;
src/game/behaviors/celebration_star.inc.c:        o->header.gfx.sharedChild = gLoadedGraphNodes[MODEL_BOWSER_KEY];
src/game/behaviors/celebration_star.inc.c:        o->oFaceAnglePitch = 0;
src/game/behaviors/celebration_star.inc.c:        o->oFaceAngleRoll = 49152;
src/game/behaviors/celebration_star.inc.c:        o->oCelebStarUnkF4 = 1;
src/game/behaviors/celebration_star.inc.c:        //o->header.gfx.sharedChild = gLoadedGraphNodes[MODEL_STAR];
src/game/behaviors/celebration_star.inc.c:        o->oFaceAnglePitch = 0;
src/game/behaviors/celebration_star.inc.c:        o->oFaceAngleRoll = 0;
src/game/behaviors/celebration_star.inc.c:        o->oCelebStarUnkF4 = 0;
src/game/behaviors/celebration_star.inc.c:    //o->header.gfx.sharedChild = gLoadedGraphNodes[MODEL_STAR];
src/game/behaviors/celebration_star.inc.c:    o->oFaceAnglePitch = 0;
src/game/behaviors/celebration_star.inc.c:    o->oFaceAngleRoll = 0;
src/game/behaviors/celebration_star.inc.c:    o->oPosX = o->oHomeX + sins(o->oMoveAngleYaw) * (f32)(o->oCelebStarDiameterOfRotation / 2);
src/game/behaviors/celebration_star.inc.c:    o->oPosZ = o->oHomeZ + coss(o->oMoveAngleYaw) * (f32)(o->oCelebStarDiameterOfRotation / 2);
src/game/behaviors/celebration_star.inc.c:    o->oPosY += 5.0f;
src/game/behaviors/celebration_star.inc.c:    o->oFaceAngleYaw += 0x1000;
src/game/behaviors/celebration_star.inc.c:    o->oMoveAngleYaw += 0x2000;
src/game/behaviors/celebration_star.inc.c:    if (o->oTimer == 40)
src/game/behaviors/celebration_star.inc.c:        o->oAction = CELEB_STAR_ACT_FACE_CAMERA;
src/game/behaviors/celebration_star.inc.c:    if (o->oTimer < 35) {
src/game/behaviors/celebration_star.inc.c:        o->oCelebStarDiameterOfRotation++;
src/game/behaviors/celebration_star.inc.c:        o->oCelebStarDiameterOfRotation -= 20;
src/game/behaviors/celebration_star.inc.c:    if (o->oTimer < 10) {
src/game/behaviors/celebration_star.inc.c:        if (o->oCelebStarUnkF4 == 0) {
src/game/behaviors/celebration_star.inc.c:            cur_obj_scale((f32) o->oTimer / 10.0);
src/game/behaviors/celebration_star.inc.c:            cur_obj_scale((f32) o->oTimer / 30.0);
src/game/behaviors/celebration_star.inc.c:        cur_obj_scale((f32) o->oTimer / 10.0);
src/game/behaviors/celebration_star.inc.c:        o->oFaceAngleYaw += 0x1000;
src/game/behaviors/celebration_star.inc.c:        o->oFaceAngleYaw = gMarioObject->header.gfx.angle[1];
src/game/behaviors/celebration_star.inc.c:    if (o->oTimer == 59)
src/game/behaviors/celebration_star.inc.c:        o->activeFlags = ACTIVE_FLAG_DEACTIVATED;
src/game/behaviors/celebration_star.inc.c:    switch (o->oAction) {
src/game/behaviors/celebration_star.inc.c:    o->oPosY -= 15.0f;
src/game/behaviors/celebration_star.inc.c:    if (o->oTimer == 12)
src/game/behaviors/celebration_star.inc.c:        o->activeFlags = ACTIVE_FLAG_DEACTIVATED;
src/game/behaviors/celebration_star.inc.c:    o->activeFlags = ACTIVE_FLAG_DEACTIVATED;
src/game/behaviors/chain_chomp.inc.c:    if (o->parentObj->oAction == CHAIN_CHOMP_ACT_UNLOAD_CHAIN) {
src/game/behaviors/chain_chomp.inc.c:    } else if (o->oBehParams2ndByte != CHAIN_CHOMP_CHAIN_PART_BP_PIVOT) {
src/game/behaviors/chain_chomp.inc.c:        segment = &o->parentObj->oChainChompSegments[o->oBehParams2ndByte];
src/game/behaviors/chain_chomp.inc.c:        o->oPosX = o->parentObj->parentObj->oPosX + segment->posX;
src/game/behaviors/chain_chomp.inc.c:        o->oPosY = o->parentObj->parentObj->oPosY + segment->posY;
src/game/behaviors/chain_chomp.inc.c:        o->oPosZ = o->parentObj->parentObj->oPosZ + segment->posZ;
src/game/behaviors/chain_chomp.inc.c:    } else if (o->parentObj->oChainChompReleaseStatus != CHAIN_CHOMP_NOT_RELEASED) {
src/game/behaviors/chain_chomp.inc.c:    if (o->oDistanceToMario < 3000.0f) {
src/game/behaviors/chain_chomp.inc.c:            o->oChainChompSegments = segments;
src/game/behaviors/chain_chomp.inc.c:            if ((o->parentObj =
src/game/behaviors/chain_chomp.inc.c:                o->oAction = CHAIN_CHOMP_ACT_MOVE;
src/game/behaviors/chain_chomp.inc.c:    if (o->oVelY < 0.0f) {
src/game/behaviors/chain_chomp.inc.c:        segmentVelY = o->oVelY;
src/game/behaviors/chain_chomp.inc.c:        prevSegment = &o->oChainChompSegments[i - 1];
src/game/behaviors/chain_chomp.inc.c:        segment = &o->oChainChompSegments[i];
src/game/behaviors/chain_chomp.inc.c:        if (offset > o->oChainChompMaxDistBetweenChainParts) {
src/game/behaviors/chain_chomp.inc.c:            offset = o->oChainChompMaxDistBetweenChainParts / offset;
src/game/behaviors/chain_chomp.inc.c:        maxTotalOffset = o->oChainChompMaxDistFromPivotPerChainPart * (5 - i);
src/game/behaviors/chain_chomp.inc.c:    approach_f32_ptr(&o->oChainChompMaxDistFromPivotPerChainPart, 750.0f / 5, 4.0f);
src/game/behaviors/chain_chomp.inc.c:    o->oChainChompMaxDistBetweenChainParts = o->oChainChompMaxDistFromPivotPerChainPart;
src/game/behaviors/chain_chomp.inc.c:    o->oGravity = -4.0f;
src/game/behaviors/chain_chomp.inc.c:    if (o->oMoveFlags & OBJ_MOVE_MASK_ON_GROUND) {
src/game/behaviors/chain_chomp.inc.c:        cur_obj_rotate_yaw_toward(o->oAngleToMario, 0x400);
src/game/behaviors/chain_chomp.inc.c:        if (abs_angle_diff(o->oAngleToMario, o->oMoveAngleYaw) < 0x800) {
src/game/behaviors/chain_chomp.inc.c:            if (o->oTimer > 30) {
src/game/behaviors/chain_chomp.inc.c:                    if (o->oTimer > 40) {
src/game/behaviors/chain_chomp.inc.c:                        o->oSubAction = CHAIN_CHOMP_SUB_ACT_LUNGE;
src/game/behaviors/chain_chomp.inc.c:                        o->oChainChompMaxDistFromPivotPerChainPart = 900.0f / 5;
src/game/behaviors/chain_chomp.inc.c:                        o->oForwardVel = 140.0f;
src/game/behaviors/chain_chomp.inc.c:                        o->oVelY = 20.0f;
src/game/behaviors/chain_chomp.inc.c:                        o->oGravity = 0.0f;
src/game/behaviors/chain_chomp.inc.c:                        o->oChainChompTargetPitch = obj_get_pitch_from_vel();
src/game/behaviors/chain_chomp.inc.c:                    o->oTimer -= 1;
src/game/behaviors/chain_chomp.inc.c:                o->oForwardVel = 0.0f;
src/game/behaviors/chain_chomp.inc.c:            o->oForwardVel = 10.0f;
src/game/behaviors/chain_chomp.inc.c:            o->oVelY = 20.0f;
src/game/behaviors/chain_chomp.inc.c:        cur_obj_rotate_yaw_toward(o->oAngleToMario, 0x190);
src/game/behaviors/chain_chomp.inc.c:        o->oTimer = 0;
src/game/behaviors/chain_chomp.inc.c:    obj_face_pitch_approach(o->oChainChompTargetPitch, 0x400);
src/game/behaviors/chain_chomp.inc.c:    if (o->oForwardVel != 0.0f) {
src/game/behaviors/chain_chomp.inc.c:        if (o->oChainChompRestrictedByChain == TRUE) {
src/game/behaviors/chain_chomp.inc.c:            o->oForwardVel = o->oVelY = 0.0f;
src/game/behaviors/chain_chomp.inc.c:            o->oChainChompUnk104 = 30.0f;
src/game/behaviors/chain_chomp.inc.c:        if ((val04 = 900.0f - o->oChainChompDistToPivot) > 220.0f) {
src/game/behaviors/chain_chomp.inc.c:        o->oChainChompMaxDistBetweenChainParts =
src/game/behaviors/chain_chomp.inc.c:            val04 / 220.0f * o->oChainChompMaxDistFromPivotPerChainPart;
src/game/behaviors/chain_chomp.inc.c:        o->oTimer = 0;
src/game/behaviors/chain_chomp.inc.c:        cur_obj_rotate_yaw_toward(atan2s(o->oChainChompSegments[0].posZ, o->oChainChompSegments[0].posX),
src/game/behaviors/chain_chomp.inc.c:        if (o->oChainChompUnk104 != 0.0f) {
src/game/behaviors/chain_chomp.inc.c:            approach_f32_ptr(&o->oChainChompUnk104, 0.0f, 0.8f);
src/game/behaviors/chain_chomp.inc.c:            o->oSubAction = CHAIN_CHOMP_SUB_ACT_TURN;
src/game/behaviors/chain_chomp.inc.c:        o->oChainChompMaxDistBetweenChainParts = o->oChainChompUnk104;
src/game/behaviors/chain_chomp.inc.c:            o->oChainChompMaxDistBetweenChainParts = -o->oChainChompUnk104;
src/game/behaviors/chain_chomp.inc.c:    if (o->oTimer < 30) {
src/game/behaviors/chain_chomp.inc.c:    o->oForwardVel = 0.0f;
src/game/behaviors/chain_chomp.inc.c:    o->oGravity = -4.0f;
src/game/behaviors/chain_chomp.inc.c:    if (set_mario_npc_dialog(2) == 2 && (o->oMoveFlags & OBJ_MOVE_MASK_ON_GROUND)
src/game/behaviors/chain_chomp.inc.c:        o->oChainChompReleaseStatus = CHAIN_CHOMP_RELEASED_LUNGE_AROUND;
src/game/behaviors/chain_chomp.inc.c:        o->oTimer = 0;
src/game/behaviors/chain_chomp.inc.c:    if (o->oMoveFlags & OBJ_MOVE_MASK_ON_GROUND) {
src/game/behaviors/chain_chomp.inc.c:        if (o->oChainChompNumLunges == 0) {
src/game/behaviors/chain_chomp.inc.c:            if (cur_obj_rotate_yaw_toward(o->oAngleToMario, 0x320)) {
src/game/behaviors/chain_chomp.inc.c:                if (o->oTimer > 60) {
src/game/behaviors/chain_chomp.inc.c:                    o->oChainChompNumLunges += 1;
src/game/behaviors/chain_chomp.inc.c:                    o->oWallHitboxRadius = 200.0f;
src/game/behaviors/chain_chomp.inc.c:                o->oTimer = 0;
src/game/behaviors/chain_chomp.inc.c:            if (++o->oChainChompNumLunges <= 5) {
src/game/behaviors/chain_chomp.inc.c:                o->oMoveAngleYaw = o->oAngleToMario + random_sign() * 0x2000;
src/game/behaviors/chain_chomp.inc.c:                o->oForwardVel = 30.0f;
src/game/behaviors/chain_chomp.inc.c:                o->oVelY = 50.0f;
src/game/behaviors/chain_chomp.inc.c:                o->oChainChompReleaseStatus = CHAIN_CHOMP_RELEASED_BREAK_GATE;
src/game/behaviors/chain_chomp.inc.c:                o->oHomeX = 1450.0f;
src/game/behaviors/chain_chomp.inc.c:                o->oHomeZ = 562.0f;
src/game/behaviors/chain_chomp.inc.c:                o->oMoveAngleYaw = cur_obj_angle_to_home();
src/game/behaviors/chain_chomp.inc.c:                o->oForwardVel = cur_obj_lateral_dist_to_home() / 8;
src/game/behaviors/chain_chomp.inc.c:                o->oVelY = 50.0f;
src/game/behaviors/chain_chomp.inc.c:    if (!o->oChainChompHitGate) {
src/game/behaviors/chain_chomp.inc.c:        if (o->oMoveFlags & OBJ_MOVE_HIT_WALL) {
src/game/behaviors/chain_chomp.inc.c:            o->oChainChompHitGate = TRUE;
src/game/behaviors/chain_chomp.inc.c:            o->oMoveAngleYaw = cur_obj_reflect_move_angle_off_wall();
src/game/behaviors/chain_chomp.inc.c:            o->oForwardVel *= 0.4f;
src/game/behaviors/chain_chomp.inc.c:    } else if (o->oMoveFlags & OBJ_MOVE_MASK_ON_GROUND) {
src/game/behaviors/chain_chomp.inc.c:        o->oChainChompReleaseStatus = CHAIN_CHOMP_RELEASED_JUMP_AWAY;
src/game/behaviors/chain_chomp.inc.c:        o->oHomeX = 3288.0f;
src/game/behaviors/chain_chomp.inc.c:        o->oHomeZ = -1770.0f;
src/game/behaviors/chain_chomp.inc.c:        o->oMoveAngleYaw = cur_obj_angle_to_home();
src/game/behaviors/chain_chomp.inc.c:        o->oForwardVel = cur_obj_lateral_dist_to_home() / 50.0f;
src/game/behaviors/chain_chomp.inc.c:        o->oVelY = 120.0f;
src/game/behaviors/chain_chomp.inc.c:    if (o->oMoveFlags & OBJ_MOVE_MASK_ON_GROUND) {
src/game/behaviors/chain_chomp.inc.c:        o->oChainChompReleaseStatus = CHAIN_CHOMP_RELEASED_END_CUTSCENE;
src/game/behaviors/chain_chomp.inc.c:        o->oAction = CHAIN_CHOMP_ACT_UNLOAD_CHAIN;
src/game/behaviors/chain_chomp.inc.c:    if (o->oChainChompReleaseStatus == CHAIN_CHOMP_NOT_RELEASED && o->oDistanceToMario > 4000.0f) {
src/game/behaviors/chain_chomp.inc.c:        o->oAction = CHAIN_CHOMP_ACT_UNLOAD_CHAIN;
src/game/behaviors/chain_chomp.inc.c:        o->oForwardVel = o->oVelY = 0.0f;
src/game/behaviors/chain_chomp.inc.c:        switch (o->oChainChompReleaseStatus) {
src/game/behaviors/chain_chomp.inc.c:                switch (o->oSubAction) {
src/game/behaviors/chain_chomp.inc.c:        o->oChainChompSegments[0].posX = o->oPosX - o->parentObj->oPosX;
src/game/behaviors/chain_chomp.inc.c:        o->oChainChompSegments[0].posY = o->oPosY - o->parentObj->oPosY;
src/game/behaviors/chain_chomp.inc.c:        o->oChainChompSegments[0].posZ = o->oPosZ - o->parentObj->oPosZ;
src/game/behaviors/chain_chomp.inc.c:        o->oChainChompDistToPivot =
src/game/behaviors/chain_chomp.inc.c:            sqrtf(o->oChainChompSegments[0].posX * o->oChainChompSegments[0].posX
src/game/behaviors/chain_chomp.inc.c:                  + o->oChainChompSegments[0].posY * o->oChainChompSegments[0].posY
src/game/behaviors/chain_chomp.inc.c:                  + o->oChainChompSegments[0].posZ * o->oChainChompSegments[0].posZ);
src/game/behaviors/chain_chomp.inc.c:        maxDistToPivot = o->oChainChompMaxDistFromPivotPerChainPart * 5;
src/game/behaviors/chain_chomp.inc.c:        if (o->oChainChompDistToPivot > maxDistToPivot) {
src/game/behaviors/chain_chomp.inc.c:            f32 ratio = maxDistToPivot / o->oChainChompDistToPivot;
src/game/behaviors/chain_chomp.inc.c:            o->oChainChompDistToPivot = maxDistToPivot;
src/game/behaviors/chain_chomp.inc.c:            o->oChainChompSegments[0].posX *= ratio;
src/game/behaviors/chain_chomp.inc.c:            o->oChainChompSegments[0].posY *= ratio;
src/game/behaviors/chain_chomp.inc.c:            o->oChainChompSegments[0].posZ *= ratio;
src/game/behaviors/chain_chomp.inc.c:            if (o->oChainChompReleaseStatus == CHAIN_CHOMP_NOT_RELEASED) {
src/game/behaviors/chain_chomp.inc.c:                o->oPosX = o->parentObj->oPosX + o->oChainChompSegments[0].posX;
src/game/behaviors/chain_chomp.inc.c:                o->oPosY = o->parentObj->oPosY + o->oChainChompSegments[0].posY;
src/game/behaviors/chain_chomp.inc.c:                o->oPosZ = o->parentObj->oPosZ + o->oChainChompSegments[0].posZ;
src/game/behaviors/chain_chomp.inc.c:                o->oChainChompRestrictedByChain = TRUE;
src/game/behaviors/chain_chomp.inc.c:                f32 oldPivotY = o->parentObj->oPosY;
src/game/behaviors/chain_chomp.inc.c:                o->parentObj->oPosX = o->oPosX - o->oChainChompSegments[0].posX;
src/game/behaviors/chain_chomp.inc.c:                o->parentObj->oPosY = o->oPosY - o->oChainChompSegments[0].posY;
src/game/behaviors/chain_chomp.inc.c:                o->parentObj->oVelY = o->parentObj->oPosY - oldPivotY;
src/game/behaviors/chain_chomp.inc.c:                o->parentObj->oPosZ = o->oPosZ - o->oChainChompSegments[0].posZ;
src/game/behaviors/chain_chomp.inc.c:            o->oChainChompRestrictedByChain = FALSE;
src/game/behaviors/chain_chomp.inc.c:        if (obj_check_attacks(&sChainChompHitbox, o->oAction)) {
src/game/behaviors/chain_chomp.inc.c:            o->oSubAction = CHAIN_CHOMP_SUB_ACT_LUNGE;
src/game/behaviors/chain_chomp.inc.c:            o->oChainChompMaxDistFromPivotPerChainPart = 900.0f / 5;
src/game/behaviors/chain_chomp.inc.c:            o->oForwardVel = 0.0f;
src/game/behaviors/chain_chomp.inc.c:            o->oVelY = 300.0f;
src/game/behaviors/chain_chomp.inc.c:            o->oGravity = -4.0f;
src/game/behaviors/chain_chomp.inc.c:            o->oChainChompTargetPitch = -0x3000;
src/game/behaviors/chain_chomp.inc.c:    mem_pool_free(gObjectMemoryPool, o->oChainChompSegments);
src/game/behaviors/chain_chomp.inc.c:    o->oAction = CHAIN_CHOMP_ACT_UNINITIALIZED;
src/game/behaviors/chain_chomp.inc.c:    if (o->oChainChompReleaseStatus != CHAIN_CHOMP_NOT_RELEASED) {
src/game/behaviors/chain_chomp.inc.c:    switch (o->oAction) {
src/game/behaviors/chain_chomp.inc.c:    if (!o->oWoodenPostMarioPounding) {
src/game/behaviors/chain_chomp.inc.c:        if ((o->oWoodenPostMarioPounding = cur_obj_is_mario_ground_pounding_platform())) {
src/game/behaviors/chain_chomp.inc.c:            o->oWoodenPostSpeedY = -70.0f;
src/game/behaviors/chain_chomp.inc.c:    } else if (approach_f32_ptr(&o->oWoodenPostSpeedY, 0.0f, 25.0f)) {
src/game/behaviors/chain_chomp.inc.c:        o->oWoodenPostMarioPounding = cur_obj_is_mario_ground_pounding_platform();
src/game/behaviors/chain_chomp.inc.c:    } else if ((o->oWoodenPostOffsetY += o->oWoodenPostSpeedY) < -190.0f) {
src/game/behaviors/chain_chomp.inc.c:        o->oWoodenPostOffsetY = -190.0f;
src/game/behaviors/chain_chomp.inc.c:        if (o->parentObj != o) {
src/game/behaviors/chain_chomp.inc.c:            o->parentObj->oChainChompReleaseStatus = CHAIN_CHOMP_RELEASED_TRIGGER_CUTSCENE;
src/game/behaviors/chain_chomp.inc.c:            o->parentObj = o;
src/game/behaviors/chain_chomp.inc.c:    if (o->oWoodenPostOffsetY != 0.0f) {
src/game/behaviors/chain_chomp.inc.c:        o->oPosY = o->oHomeY + o->oWoodenPostOffsetY;
src/game/behaviors/chain_chomp.inc.c:    } else if (!(o->oBehParams & WOODEN_POST_BP_NO_COINS_MASK)) {
src/game/behaviors/chain_chomp.inc.c:        if (o->oDistanceToMario > 400.0f) {
src/game/behaviors/chain_chomp.inc.c:            o->oTimer = o->oWoodenPostTotalMarioAngle = 0;
src/game/behaviors/chain_chomp.inc.c:            o->oWoodenPostTotalMarioAngle += (s16)(o->oAngleToMario - o->oWoodenPostPrevAngleToMario);
src/game/behaviors/chain_chomp.inc.c:            if (absi(o->oWoodenPostTotalMarioAngle) > 0x30000 && o->oTimer < 200) {
src/game/behaviors/chain_chomp.inc.c:        o->oWoodenPostPrevAngleToMario = o->oAngleToMario;
src/game/behaviors/chain_chomp.inc.c:    o->parentObj = cur_obj_nearest_object_with_behavior(bhvChainChomp);
src/game/behaviors/chain_chomp.inc.c:    if (o->parentObj->oChainChompHitGate) {
src/game/behaviors/chain_chomp.inc.c:        set_camera_shake_from_point(SHAKE_POS_SMALL, o->oPosX, o->oPosY, o->oPosZ);
src/game/behaviors/checkerboard_platform.inc.c:    if (o->oBehParams2ndByte == 0)
src/game/behaviors/checkerboard_platform.inc.c:        o->oBehParams2ndByte = 65;
src/game/behaviors/checkerboard_platform.inc.c:    sp3C = o->oBehParams2ndByte * 10;
src/game/behaviors/checkerboard_platform.inc.c:    sp34 = (o->oBehParams >> 24) & 0XFF;
src/game/behaviors/checkerboard_platform.inc.c:    o->oMoveAnglePitch = 0;
src/game/behaviors/checkerboard_platform.inc.c:    o->oAngleVelPitch = 0;
src/game/behaviors/checkerboard_platform.inc.c:    o->oForwardVel = 0.0f;
src/game/behaviors/checkerboard_platform.inc.c:    o->oVelY = vel;
src/game/behaviors/checkerboard_platform.inc.c:    if (o->oTimer > a2)
src/game/behaviors/checkerboard_platform.inc.c:        o->oAction++;
src/game/behaviors/checkerboard_platform.inc.c:    o->oVelY = 0.0f;
src/game/behaviors/checkerboard_platform.inc.c:    o->oAngleVelPitch = a1;
src/game/behaviors/checkerboard_platform.inc.c:    if (o->oTimer + 1 == 0x8000 / absi(a1))
src/game/behaviors/checkerboard_platform.inc.c:        o->oAction = a0;
src/game/behaviors/checkerboard_platform.inc.c:    o->oCheckerBoardPlatformUnkF8 = a0;
src/game/behaviors/checkerboard_platform.inc.c:    o->oCheckerBoardPlatformUnkFC = o->parentObj->oBehParams2ndByte;
src/game/behaviors/checkerboard_platform.inc.c:    f32 sp24 = o->oCheckerBoardPlatformUnk1AC;
src/game/behaviors/checkerboard_platform.inc.c:    o->oCheckerBoardPlatformUnkF8 = 0;
src/game/behaviors/checkerboard_platform.inc.c:    if (o->oDistanceToMario < 1000.0f)
src/game/behaviors/checkerboard_platform.inc.c:    switch (o->oAction) {
src/game/behaviors/checkerboard_platform.inc.c:            if (o->oBehParams2ndByte == 0)
src/game/behaviors/checkerboard_platform.inc.c:                o->oAction = 1;
src/game/behaviors/checkerboard_platform.inc.c:                o->oAction = 3;
src/game/behaviors/checkerboard_platform.inc.c:            checkerboard_plat_act_move_y(2, 10.0f, o->oCheckerBoardPlatformUnkFC);
src/game/behaviors/checkerboard_platform.inc.c:            checkerboard_plat_act_move_y(4, -10.0f, o->oCheckerBoardPlatformUnkFC);
src/game/behaviors/checkerboard_platform.inc.c:    o->oMoveAnglePitch += absi(o->oAngleVelPitch);
src/game/behaviors/checkerboard_platform.inc.c:    o->oFaceAnglePitch += absi(o->oAngleVelPitch);
src/game/behaviors/checkerboard_platform.inc.c:    o->oFaceAngleYaw = o->oMoveAngleYaw;
src/game/behaviors/checkerboard_platform.inc.c:    if (o->oMoveAnglePitch != 0) {
src/game/behaviors/checkerboard_platform.inc.c:        o->oForwardVel = signum_positive(o->oAngleVelPitch) * sins(o->oMoveAnglePitch) * sp24;
src/game/behaviors/checkerboard_platform.inc.c:        o->oVelY = signum_positive(o->oAngleVelPitch) * coss(o->oMoveAnglePitch) * sp24;
src/game/behaviors/checkerboard_platform.inc.c:    if (o->oCheckerBoardPlatformUnkF8 == 1) {
src/game/behaviors/checkerboard_platform.inc.c:        o->oAngleVelPitch = 0;
src/game/behaviors/checkerboard_platform.inc.c:        o->oFaceAnglePitch &= ~0x7FFF;
src/game/behaviors/chuckya.inc.c:    switch (o->parentObj->oChuckyaUnk88) {
src/game/behaviors/chuckya.inc.c:            o->parentObj->oChuckyaUnk88 = 0;
src/game/behaviors/chuckya.inc.c:            o->parentObj->oChuckyaUnk88 = 0;
src/game/behaviors/chuckya.inc.c:    o->oMoveAngleYaw = o->parentObj->oMoveAngleYaw;
src/game/behaviors/chuckya.inc.c:    if (o->parentObj->activeFlags == ACTIVE_FLAG_DEACTIVATED)
src/game/behaviors/chuckya.inc.c:    if (o->oChuckyaUnkF8 != 4) {
src/game/behaviors/chuckya.inc.c:                o->oAngleToMario = cur_obj_angle_to_home();
src/game/behaviors/chuckya.inc.c:        } else if (o->oDistanceToMario > sp28) {
src/game/behaviors/chuckya.inc.c:                o->oAngleToMario = obj_angle_to_object(o, gMarioObject);
src/game/behaviors/chuckya.inc.c:        if (sp20 && update_angle_from_move_flags(&o->oAngleToMario)) {
src/game/behaviors/chuckya.inc.c:            o->oChuckyaUnkF8 = 4;
src/game/behaviors/chuckya.inc.c:    if (o->oTimer == 0)
src/game/behaviors/chuckya.inc.c:        o->oChuckyaUnkFC = 0;
src/game/behaviors/chuckya.inc.c:    o->oAngleToMario = obj_angle_to_object(o, gMarioObject);
src/game/behaviors/chuckya.inc.c:    switch (sp28 = o->oSubAction) {
src/game/behaviors/chuckya.inc.c:            o->oForwardVel = 0;
src/game/behaviors/chuckya.inc.c:                cur_obj_rotate_yaw_toward(o->oAngleToMario, 0x400);
src/game/behaviors/chuckya.inc.c:                if (o->oChuckyaUnkFC > 40
src/game/behaviors/chuckya.inc.c:                    || abs_angle_diff(o->oMoveAngleYaw, o->oAngleToMario) < 0x1000)
src/game/behaviors/chuckya.inc.c:                    o->oSubAction = 1;
src/game/behaviors/chuckya.inc.c:                o->oSubAction = 3;
src/game/behaviors/chuckya.inc.c:            approach_forward_vel(&o->oForwardVel, 30.0f, 4.0f);
src/game/behaviors/chuckya.inc.c:            if (abs_angle_diff(o->oMoveAngleYaw, o->oAngleToMario) > 0x4000)
src/game/behaviors/chuckya.inc.c:                o->oSubAction = 2;
src/game/behaviors/chuckya.inc.c:                o->oSubAction = 3;
src/game/behaviors/chuckya.inc.c:            approach_forward_vel(&o->oForwardVel, 0, 4.0f);
src/game/behaviors/chuckya.inc.c:            if (o->oChuckyaUnkFC > 48)
src/game/behaviors/chuckya.inc.c:                o->oSubAction = 0;
src/game/behaviors/chuckya.inc.c:                o->oForwardVel = 0;
src/game/behaviors/chuckya.inc.c:                approach_forward_vel(&o->oForwardVel, 10.0f, 4.0f);
src/game/behaviors/chuckya.inc.c:                o->oAngleToMario = cur_obj_angle_to_home();
src/game/behaviors/chuckya.inc.c:                cur_obj_rotate_yaw_toward(o->oAngleToMario, 0x800);
src/game/behaviors/chuckya.inc.c:                o->oSubAction = 0;
src/game/behaviors/chuckya.inc.c:    if (o->oSubAction != sp28)
src/game/behaviors/chuckya.inc.c:        o->oChuckyaUnkFC = 0;
src/game/behaviors/chuckya.inc.c:        o->oChuckyaUnkFC++;
src/game/behaviors/chuckya.inc.c:    if (o->oForwardVel > 1.0f)
src/game/behaviors/chuckya.inc.c:    print_debug_bottom_up("sp %d", o->oForwardVel);
src/game/behaviors/chuckya.inc.c:    if (o->oSubAction == 0) {
src/game/behaviors/chuckya.inc.c:            o->oSubAction++;
src/game/behaviors/chuckya.inc.c:        o->oChuckyaUnkFC = random_float() * 30.0f + 10.0f;
src/game/behaviors/chuckya.inc.c:        o->oChuckyaUnk100 = 0;
src/game/behaviors/chuckya.inc.c:        o->oForwardVel = 0.0f;
src/game/behaviors/chuckya.inc.c:        if (o->oSubAction == 1) {
src/game/behaviors/chuckya.inc.c:            o->oChuckyaUnk100 += player_performed_grab_escape_action();
src/game/behaviors/chuckya.inc.c:            print_debug_bottom_up("%d", o->oChuckyaUnk100);
src/game/behaviors/chuckya.inc.c:            if (o->oChuckyaUnk100 > 10) {
src/game/behaviors/chuckya.inc.c:                o->oChuckyaUnk88 = 3;
src/game/behaviors/chuckya.inc.c:                o->oAction = 3;
src/game/behaviors/chuckya.inc.c:                o->oInteractStatus &= ~(INT_STATUS_GRABBED_MARIO);
src/game/behaviors/chuckya.inc.c:                o->oMoveAngleYaw += INT_STATUS_GRABBED_MARIO;
src/game/behaviors/chuckya.inc.c:                if (o->oChuckyaUnkFC-- < 0)
src/game/behaviors/chuckya.inc.c:                    if (check_if_moving_over_floor(50.0f, 150.0f) || o->oChuckyaUnkFC < -16) {
src/game/behaviors/chuckya.inc.c:                        o->oSubAction++;
src/game/behaviors/chuckya.inc.c:                o->oChuckyaUnk88 = 2;
src/game/behaviors/chuckya.inc.c:                o->oAction = 3;
src/game/behaviors/chuckya.inc.c:                o->oInteractStatus &= ~(INT_STATUS_GRABBED_MARIO);
src/game/behaviors/chuckya.inc.c:    o->oForwardVel = 0;
src/game/behaviors/chuckya.inc.c:    o->oVelY = 0;
src/game/behaviors/chuckya.inc.c:    if (o->oTimer > 100)
src/game/behaviors/chuckya.inc.c:        o->oAction = 0;
src/game/behaviors/chuckya.inc.c:    if (o->oMoveFlags & (0x200 | 0x40 | 0x20 | 0x10 | 0x8 | 0x1)) {
src/game/behaviors/chuckya.inc.c:    if (o->oInteractStatus & INT_STATUS_GRABBED_MARIO) {
src/game/behaviors/chuckya.inc.c:        o->oAction = 1;
src/game/behaviors/chuckya.inc.c:        o->oChuckyaUnk88 = 1;
src/game/behaviors/chuckya.inc.c:    o->oInteractionSubtype |= INT_SUBTYPE_GRABS_MARIO;
src/game/behaviors/chuckya.inc.c:    switch (o->oHeldState) {
src/game/behaviors/chuckya.inc.c:    o->oInteractStatus = 0;
src/game/behaviors/chuckya.inc.c:    print_debug_bottom_up("md %d", o->oAction);
src/game/behaviors/clam.inc.c:        o->oClamUnkF4 = 10;
src/game/behaviors/clam.inc.c:        o->oTimer = 0;
src/game/behaviors/clam.inc.c:    } else if (o->oTimer > 150 && o->oDistanceToMario < 500.0f) {
src/game/behaviors/clam.inc.c:        o->oAction = 1;
src/game/behaviors/clam.inc.c:    } else if (o->oClamUnkF4 != 0) {
src/game/behaviors/clam.inc.c:        o->oClamUnkF4 -= 1;
src/game/behaviors/clam.inc.c:    if (o->oTimer > 150) {
src/game/behaviors/clam.inc.c:        o->oAction = 0;
src/game/behaviors/clam.inc.c:    o->header.gfx.scale[1] = 1.5f;
src/game/behaviors/clam.inc.c:    switch (o->oAction) {
src/game/behaviors/clam.inc.c:    obj_check_attacks(&sClamShellHitbox, o->oAction);
src/game/behaviors/clock_arm.inc.c:    u16 rollAngle = o->oFaceAngleRoll;
src/game/behaviors/clock_arm.inc.c:    o->oFloorHeight =
src/game/behaviors/clock_arm.inc.c:    if (o->oAction == 0) {
src/game/behaviors/clock_arm.inc.c:            if (o->oTimer >= 4)
src/game/behaviors/clock_arm.inc.c:                o->oAction++;
src/game/behaviors/clock_arm.inc.c:    } else if (o->oAction == 1) {
src/game/behaviors/clock_arm.inc.c:            o->oAction++;
src/game/behaviors/clock_arm.inc.c:    if (o->oAction < 2)
src/game/behaviors/cloud.inc.c:    if (o->oBehParams2ndByte == CLOUD_BP_FWOOSH) {
src/game/behaviors/cloud.inc.c:        o->oCloudCenterX = o->oPosX;
src/game/behaviors/cloud.inc.c:        o->oCloudCenterY = o->oPosY;
src/game/behaviors/cloud.inc.c:    o->oAction = CLOUD_ACT_MAIN;
src/game/behaviors/cloud.inc.c:    if (o->oDistanceToMario < 2000.0f) {
src/game/behaviors/cloud.inc.c:        o->oAction = CLOUD_ACT_SPAWN_PARTS;
src/game/behaviors/cloud.inc.c:    if (o->oDistanceToMario > 2500.0f) {
src/game/behaviors/cloud.inc.c:        o->oAction = CLOUD_ACT_UNLOAD;
src/game/behaviors/cloud.inc.c:        if (o->oCloudBlowing) {
src/game/behaviors/cloud.inc.c:            o->header.gfx.scale[0] += o->oCloudGrowSpeed;
src/game/behaviors/cloud.inc.c:            if ((o->oCloudGrowSpeed -= 0.005f) < -0.16f) {
src/game/behaviors/cloud.inc.c:                o->oCloudBlowing = o->oTimer = 0;
src/game/behaviors/cloud.inc.c:            } else if (o->oCloudGrowSpeed < -0.1f) {
src/game/behaviors/cloud.inc.c:            approach_f32_ptr(&o->header.gfx.scale[0], 3.0f, 0.012f);
src/game/behaviors/cloud.inc.c:            o->oCloudFwooshMovementRadius += 0xC8;
src/game/behaviors/cloud.inc.c:            if (o->oDistanceToMario < 1000.0f) {
src/game/behaviors/cloud.inc.c:                if (o->oTimer > 100) {
src/game/behaviors/cloud.inc.c:                    o->oCloudBlowing = TRUE;
src/game/behaviors/cloud.inc.c:                    o->oCloudGrowSpeed = 0.14f;
src/game/behaviors/cloud.inc.c:                o->oTimer = 0;
src/game/behaviors/cloud.inc.c:            o->oCloudCenterX = o->oHomeX + 100.0f * coss(o->oCloudFwooshMovementRadius);
src/game/behaviors/cloud.inc.c:            o->oPosZ = o->oHomeZ + 100.0f * sins(o->oCloudFwooshMovementRadius);
src/game/behaviors/cloud.inc.c:            o->oCloudCenterY = o->oHomeY;
src/game/behaviors/cloud.inc.c:        cur_obj_scale(o->header.gfx.scale[0]);
src/game/behaviors/cloud.inc.c:    if (o->parentObj != o) {
src/game/behaviors/cloud.inc.c:        if (o->parentObj->activeFlags == ACTIVE_FLAG_DEACTIVATED) {
src/game/behaviors/cloud.inc.c:            o->oAction = CLOUD_ACT_UNLOAD;
src/game/behaviors/cloud.inc.c:            o->oCloudCenterX = o->parentObj->oPosX;
src/game/behaviors/cloud.inc.c:            o->oCloudCenterY = o->parentObj->oPosY;
src/game/behaviors/cloud.inc.c:            o->oPosZ = o->parentObj->oPosZ;
src/game/behaviors/cloud.inc.c:            o->oMoveAngleYaw = o->parentObj->oFaceAngleYaw;
src/game/behaviors/cloud.inc.c:    } else if (o->oBehParams2ndByte != CLOUD_BP_FWOOSH) {
src/game/behaviors/cloud.inc.c:        if (o->oDistanceToMario > 1500.0f) {
src/game/behaviors/cloud.inc.c:            o->oAction = CLOUD_ACT_UNLOAD;
src/game/behaviors/cloud.inc.c:    localOffset = 2 * coss(localOffsetPhase) * o->header.gfx.scale[0];
src/game/behaviors/cloud.inc.c:    o->oPosX = o->oCloudCenterX + localOffset;
src/game/behaviors/cloud.inc.c:    o->oPosY = o->oCloudCenterY + localOffset + 12.0f * o->header.gfx.scale[0];
src/game/behaviors/cloud.inc.c:    if (o->oBehParams2ndByte != CLOUD_BP_FWOOSH) {
src/game/behaviors/cloud.inc.c:        o->oAction = CLOUD_ACT_FWOOSH_HIDDEN;
src/game/behaviors/cloud.inc.c:    switch (o->oAction) {
src/game/behaviors/cloud.inc.c:    if (o->parentObj->oAction == CLOUD_ACT_UNLOAD) {
src/game/behaviors/cloud.inc.c:        f32 size = 2.0f / 3.0f * o->parentObj->header.gfx.scale[0];
src/game/behaviors/cloud.inc.c:        s16 angleFromCenter = o->parentObj->oFaceAngleYaw + 0x10000 / 5 * o->oBehParams2ndByte;
src/game/behaviors/cloud.inc.c:        s16 localOffsetPhase = 0x800 * gGlobalTimer + 0x4000 * o->oBehParams2ndByte;
src/game/behaviors/cloud.inc.c:        if (o->oBehParams2ndByte == 5 && size > 2.0f) {
src/game/behaviors/cloud.inc.c:            size = o->header.gfx.scale[1] = 2.0f;
src/game/behaviors/cloud.inc.c:        o->oPosX = o->parentObj->oCloudCenterX + cloudRadius * sins(angleFromCenter) + localOffset;
src/game/behaviors/cloud.inc.c:        o->oPosY =
src/game/behaviors/cloud.inc.c:            o->parentObj->oCloudCenterY + localOffset + size * sCloudPartHeights[o->oBehParams2ndByte];
src/game/behaviors/cloud.inc.c:        o->oPosZ = o->parentObj->oPosZ + cloudRadius * coss(angleFromCenter) + localOffset;
src/game/behaviors/cloud.inc.c:        o->oFaceAngleYaw = o->parentObj->oFaceAngleYaw;
src/game/behaviors/coffin.inc.c:    if (o->oAction == COFFIN_SPAWNER_ACT_COFFINS_UNLOADED) {
src/game/behaviors/coffin.inc.c:        if (!(o->activeFlags & ACTIVE_FLAG_IN_DIFFERENT_ROOM)) {
src/game/behaviors/coffin.inc.c:            o->oAction += 1;
src/game/behaviors/coffin.inc.c:    } else if (o->activeFlags & ACTIVE_FLAG_IN_DIFFERENT_ROOM) {
src/game/behaviors/coffin.inc.c:        o->oAction = COFFIN_SPAWNER_ACT_COFFINS_UNLOADED;
src/game/behaviors/coffin.inc.c:    if (o->oBehParams2ndByte != COFFIN_BP_STATIC) {
src/game/behaviors/coffin.inc.c:        if (o->oFaceAnglePitch != 0) {
src/game/behaviors/coffin.inc.c:            o->oAngleVelPitch = approach_s16_symmetric(o->oAngleVelPitch, -2000, 200);
src/game/behaviors/coffin.inc.c:            if (obj_face_pitch_approach(0, -o->oAngleVelPitch)) {
src/game/behaviors/coffin.inc.c:                o->oMoveAngleYaw = o->oFaceAngleYaw - 0x4000;
src/game/behaviors/coffin.inc.c:            o->oTimer = 0;
src/game/behaviors/coffin.inc.c:            yawCos = coss(o->oFaceAngleYaw);
src/game/behaviors/coffin.inc.c:            yawSin = sins(o->oFaceAngleYaw);
src/game/behaviors/coffin.inc.c:            dx = gMarioObject->oPosX - o->oPosX;
src/game/behaviors/coffin.inc.c:            dz = gMarioObject->oPosZ - o->oPosZ;
src/game/behaviors/coffin.inc.c:            if (o->oTimer > 60
src/game/behaviors/coffin.inc.c:                && (o->oDistanceToMario > 100.0f || gMarioState->action == ACT_SQUISHED)) {
src/game/behaviors/coffin.inc.c:                if (gMarioObject->oPosY - o->oPosY < 200.0f && absf(distForwards) < 140.0f) {
src/game/behaviors/coffin.inc.c:                        o->oAction = COFFIN_ACT_STAND_UP;
src/game/behaviors/coffin.inc.c:            o->oAngleVelPitch = 0;
src/game/behaviors/coffin.inc.c:    if (o->oFaceAnglePitch != 0x4000) {
src/game/behaviors/coffin.inc.c:        o->oAngleVelPitch = approach_s16_symmetric(o->oAngleVelPitch, 1000, 200);
src/game/behaviors/coffin.inc.c:        obj_face_pitch_approach(0x4000, o->oAngleVelPitch);
src/game/behaviors/coffin.inc.c:        if (o->oTimer > 60) {
src/game/behaviors/coffin.inc.c:            o->oAction = COFFIN_ACT_IDLE;
src/game/behaviors/coffin.inc.c:            o->oFaceAngleRoll = 0;
src/game/behaviors/coffin.inc.c:        } else if (o->oTimer > 30) {
src/game/behaviors/coffin.inc.c:            o->oFaceAngleRoll = 400 * (gGlobalTimer % 2) - 200;
src/game/behaviors/coffin.inc.c:        o->oAngleVelPitch = 0;
src/game/behaviors/coffin.inc.c:    if (o->parentObj->oAction == COFFIN_SPAWNER_ACT_COFFINS_UNLOADED) {
src/game/behaviors/coffin.inc.c:        o->header.gfx.scale[1] = 1.1f;
src/game/behaviors/coffin.inc.c:        switch (o->oAction) {
src/game/behaviors/coin.inc.c:    if (o->oInteractStatus & INT_STATUS_INTERACTED && !(o->oInteractStatus & INT_STATUS_TOUCHED_BOB_OMB)) {
src/game/behaviors/coin.inc.c:    o->oInteractStatus = 0;
src/game/behaviors/coin.inc.c:    if (500.0f < absf(o->oPosY - o->oFloorHeight))
src/game/behaviors/coin.inc.c:    if (o->oFloorHeight < -10000.0f)
src/game/behaviors/coin.inc.c:    if (500.0f < absf(o->oPosY - o->oFloorHeight))
src/game/behaviors/coin.inc.c:    if (o->oFloorHeight < -10000.0f)
src/game/behaviors/coin.inc.c:    o->oAnimState++;
src/game/behaviors/coin.inc.c:    o->oAnimState++;
src/game/behaviors/coin.inc.c:    o->oVelY = random_float() * 10.0f + 30 + o->oCoinUnk110;
src/game/behaviors/coin.inc.c:    o->oForwardVel = random_float() * 10.0f;
src/game/behaviors/coin.inc.c:    o->oMoveAngleYaw = random_u16();
src/game/behaviors/coin.inc.c:    if ((sp1C = o->oFloor) != NULL) {
src/game/behaviors/coin.inc.c:        if (o->oMoveFlags & OBJ_MOVE_ON_GROUND)
src/game/behaviors/coin.inc.c:            o->oSubAction = 1;
src/game/behaviors/coin.inc.c:        if (o->oSubAction == 1) {
src/game/behaviors/coin.inc.c:            o->oBounciness = 0;
src/game/behaviors/coin.inc.c:    if (o->oTimer == 0)
src/game/behaviors/coin.inc.c:    if (o->oVelY < 0)
src/game/behaviors/coin.inc.c:    if (o->oMoveFlags & OBJ_MOVE_LANDED) {
src/game/behaviors/coin.inc.c:        if (o->oMoveFlags & (OBJ_MOVE_ABOVE_DEATH_BARRIER | OBJ_MOVE_ABOVE_LAVA))
src/game/behaviors/coin.inc.c:        if (o->oMoveFlags & OBJ_MOVE_ABOVE_LAVA)
src/game/behaviors/coin.inc.c:    if (o->oMoveFlags & OBJ_MOVE_13) {
src/game/behaviors/coin.inc.c:        if (o->oCoinUnk1B0 < 5)
src/game/behaviors/coin.inc.c:        o->oCoinUnk1B0++;
src/game/behaviors/coin.inc.c:    if (o->oMoveFlags & OBJ_MOVE_13)
src/game/behaviors/coin.inc.c:    if (o->oTimer == 0) {
src/game/behaviors/coin.inc.c:        if (o->oCoinUnkF8) {
src/game/behaviors/coin.inc.c:            o->oPosY += 300.0f;
src/game/behaviors/coin.inc.c:            if (o->oPosY < o->oFloorHeight || o->oFloorHeight < -10000.0f)
src/game/behaviors/coin.inc.c:                o->oPosY = o->oFloorHeight;
src/game/behaviors/coin.inc.c:            if (absf(o->oPosY - o->oFloorHeight) > 250.0f)
src/game/behaviors/coin.inc.c:            o->parentObj->oCoinUnkF4 |= bit_shift_left(o->oBehParams2ndByte);
src/game/behaviors/coin.inc.c:        o->oAnimState++;
src/game/behaviors/coin.inc.c:    if (o->parentObj->oAction == 2)
src/game/behaviors/coin.inc.c:    o->oCoinUnkF4 = (o->oBehParams >> 8) & 0xFF;
src/game/behaviors/coin.inc.c:    switch (o->oAction) {
src/game/behaviors/coin.inc.c:            if (o->oDistanceToMario < 2000.0f) {
src/game/behaviors/coin.inc.c:                    if (!(o->oCoinUnkF4 & (1 << bitIndex)))
src/game/behaviors/coin.inc.c:                        spawn_coin_in_formation(bitIndex, o->oBehParams2ndByte);
src/game/behaviors/coin.inc.c:                o->oAction++;
src/game/behaviors/coin.inc.c:            if (o->oDistanceToMario > 2100.0f)
src/game/behaviors/coin.inc.c:                o->oAction++;
src/game/behaviors/coin.inc.c:            o->oAction = 0;
src/game/behaviors/coin.inc.c:    set_object_respawn_info_bits(o, o->oCoinUnkF4 & 0xFF);
src/game/behaviors/coin.inc.c:    if (o->oMoveFlags & OBJ_MOVE_13)
src/game/behaviors/coin.inc.c:    if (o->oTimer > 90 || (o->oMoveFlags & OBJ_MOVE_LANDED)) {
src/game/behaviors/coin.inc.c:        o->oDamageOrCoinValue = 5;
src/game/behaviors/coin.inc.c:    struct Object *parent = o->parentObj;
src/game/behaviors/coin.inc.c:        o->oAction = 1;
src/game/behaviors/coin.inc.c:        o->oVelX = sins(sp26) * sp20;
src/game/behaviors/coin.inc.c:        o->oVelZ = coss(sp26) * sp20;
src/game/behaviors/coin.inc.c:        o->oVelY = 35.0f;
src/game/behaviors/collide_particles.inc.c:    if (o->oTimer == 0) {
src/game/behaviors/collide_particles.inc.c:        sp1E = o->oMoveAngleYaw;
src/game/behaviors/collide_particles.inc.c:        o->oCollisionParticleUnkF4 = 1.28f;
src/game/behaviors/collide_particles.inc.c:        o->oMoveAngleYaw = sp1E;
src/game/behaviors/collide_particles.inc.c:    o->oAnimState = 5;
src/game/behaviors/collide_particles.inc.c:    cur_obj_scale(o->oCollisionParticleUnkF4);
src/game/behaviors/collide_particles.inc.c:    o->oCollisionParticleUnkF4 -= 0.2f;
src/game/behaviors/collide_particles.inc.c:    if (gDebugInfo[4][0] + 6 < o->oTimer)
src/game/behaviors/collide_particles.inc.c:    if (o->oTimer == 0) {
src/game/behaviors/collide_particles.inc.c:        sp1E = o->oMoveAngleYaw;
src/game/behaviors/collide_particles.inc.c:        o->oCollisionParticleUnkF4 = 0.28f;
src/game/behaviors/collide_particles.inc.c:        o->oMoveAngleYaw = sp1E;
src/game/behaviors/collide_particles.inc.c:    o->oAnimState = 4;
src/game/behaviors/collide_particles.inc.c:    cur_obj_scale(o->oCollisionParticleUnkF4);
src/game/behaviors/collide_particles.inc.c:    o->oCollisionParticleUnkF4 -= 0.015f;
src/game/behaviors/collide_particles.inc.c:    if (o->oTimer == 0) {
src/game/behaviors/collide_particles.inc.c:        o->oCollisionParticleUnkF4 = 0.28f;
src/game/behaviors/collide_particles.inc.c:        o->oForwardVel = 25.0f;
src/game/behaviors/collide_particles.inc.c:        o->oPosY -= 20.0f;
src/game/behaviors/collide_particles.inc.c:        o->oVelY = 14.0f;
src/game/behaviors/collide_particles.inc.c:    o->oAnimState = 4;
src/game/behaviors/collide_particles.inc.c:    cur_obj_scale(o->oCollisionParticleUnkF4);
src/game/behaviors/collide_particles.inc.c:    o->oCollisionParticleUnkF4 -= 0.015f;
src/game/behaviors/controllable_platform.inc.c:    o->oParentRelativePosY -= 4.0f;
src/game/behaviors/controllable_platform.inc.c:    if (o->oParentRelativePosY < 41.0f) {
src/game/behaviors/controllable_platform.inc.c:        o->oParentRelativePosY = 41.0f;
src/game/behaviors/controllable_platform.inc.c:        o->oAction = 2;
src/game/behaviors/controllable_platform.inc.c:    if (o->oBehParams2ndByte == D_80331694)
src/game/behaviors/controllable_platform.inc.c:    o->oParentRelativePosY += 4.0f;
src/game/behaviors/controllable_platform.inc.c:    if (o->oParentRelativePosY > 51.0f) {
src/game/behaviors/controllable_platform.inc.c:        o->oParentRelativePosY = 51.0f;
src/game/behaviors/controllable_platform.inc.c:        o->oAction = 0;
src/game/behaviors/controllable_platform.inc.c:    switch (o->oAction) {
src/game/behaviors/controllable_platform.inc.c:            if (o->oTimer < 30)
src/game/behaviors/controllable_platform.inc.c:                D_80331694 = o->oBehParams2ndByte;
src/game/behaviors/controllable_platform.inc.c:                o->oAction = 1;
src/game/behaviors/controllable_platform.inc.c:    o->oVelX = o->parentObj->oVelX;
src/game/behaviors/controllable_platform.inc.c:    o->oVelZ = o->parentObj->oVelZ;
src/game/behaviors/controllable_platform.inc.c:    if (o->parentObj->activeFlags == ACTIVE_FLAG_DEACTIVATED)
src/game/behaviors/controllable_platform.inc.c:        o->activeFlags = ACTIVE_FLAG_DEACTIVATED;
src/game/behaviors/controllable_platform.inc.c:    o->oControllablePlatformUnkFC = o->oPosY;
src/game/behaviors/controllable_platform.inc.c:    o->oControllablePlatformUnkF8 = sp1B;
src/game/behaviors/controllable_platform.inc.c:    o->oTimer = 0;
src/game/behaviors/controllable_platform.inc.c:                o->oPosX += sp20[0];
src/game/behaviors/controllable_platform.inc.c:                o->oPosZ += sp20[2];
src/game/behaviors/controllable_platform.inc.c:                o->oPosX += sp28[0];
src/game/behaviors/controllable_platform.inc.c:                o->oPosZ += sp28[2];
src/game/behaviors/controllable_platform.inc.c:    if (!is_point_within_radius_of_mario(o->oPosX, o->oPosY, o->oPosZ, 400)) {
src/game/behaviors/controllable_platform.inc.c:        o->oControllablePlatformUnk100 = 1;
src/game/behaviors/controllable_platform.inc.c:        o->oTimer = 0;
src/game/behaviors/controllable_platform.inc.c:    if (o->oControllablePlatformUnkF8 == 1 || o->oControllablePlatformUnkF8 == 2) {
src/game/behaviors/controllable_platform.inc.c:        o->oFaceAnglePitch = sins(o->oTimer * 0x1000) * 182.04444 * 10.0;
src/game/behaviors/controllable_platform.inc.c:        o->oPosY = o->oControllablePlatformUnkFC + sins(o->oTimer * 0x2000) * 20.0f;
src/game/behaviors/controllable_platform.inc.c:        o->oFaceAngleRoll = sins(o->oTimer * 0x1000) * 182.04444 * 10.0;
src/game/behaviors/controllable_platform.inc.c:        o->oPosY = o->oControllablePlatformUnkFC + sins(o->oTimer * 0x2000) * 20.0f;
src/game/behaviors/controllable_platform.inc.c:    if (o->oTimer == 32) {
src/game/behaviors/controllable_platform.inc.c:        D_80331694 = o->oControllablePlatformUnkF8;
src/game/behaviors/controllable_platform.inc.c:        o->oFaceAnglePitch = 0;
src/game/behaviors/controllable_platform.inc.c:        o->oFaceAngleRoll = 0;
src/game/behaviors/controllable_platform.inc.c:        o->oPosY = o->oControllablePlatformUnkFC;
src/game/behaviors/controllable_platform.inc.c:    s16 sp1E = gMarioObject->header.gfx.pos[0] - o->oPosX;
src/game/behaviors/controllable_platform.inc.c:    s16 sp1C = gMarioObject->header.gfx.pos[2] - o->oPosZ;
src/game/behaviors/controllable_platform.inc.c:        o->oFaceAnglePitch = sp1C * 4;
src/game/behaviors/controllable_platform.inc.c:        o->oFaceAngleRoll = -sp1E * 4;
src/game/behaviors/controllable_platform.inc.c:            o->oTimer = 0;
src/game/behaviors/controllable_platform.inc.c:            o->header.gfx.node.flags &= ~GRAPH_RENDER_INVISIBLE;
src/game/behaviors/controllable_platform.inc.c:    o->oAngleVelRoll = 0;
src/game/behaviors/controllable_platform.inc.c:    o->oAngleVelPitch = 0;
src/game/behaviors/controllable_platform.inc.c:    o->oVelX = 0;
src/game/behaviors/controllable_platform.inc.c:    o->oVelZ = 0;
src/game/behaviors/controllable_platform.inc.c:            o->oFaceAnglePitch /= 2;
src/game/behaviors/controllable_platform.inc.c:            o->oFaceAngleRoll /= 2;
src/game/behaviors/controllable_platform.inc.c:            if (o->oControllablePlatformUnk100 == 1 && o->oTimer > 30) {
src/game/behaviors/controllable_platform.inc.c:                o->oTimer = 0;
src/game/behaviors/controllable_platform.inc.c:            o->oVelZ = 10.0f;
src/game/behaviors/controllable_platform.inc.c:            sp54[0] = obj_find_wall_displacement(sp48, o->oPosX + 250.0, o->oPosY, o->oPosZ + 300.0, 50.0f);
src/game/behaviors/controllable_platform.inc.c:            sp54[1] = obj_find_wall_displacement(sp3C, o->oPosX, o->oPosY, o->oPosZ + 300.0, 50.0f);
src/game/behaviors/controllable_platform.inc.c:            sp54[2] = obj_find_wall_displacement(sp30, o->oPosX - 250.0, o->oPosY, o->oPosZ + 300.0, 50.0f);
src/game/behaviors/controllable_platform.inc.c:            o->oVelZ = -10.0f;
src/game/behaviors/controllable_platform.inc.c:            sp54[0] = obj_find_wall_displacement(sp48, o->oPosX + 250.0, o->oPosY, o->oPosZ - 300.0, 50.0f);
src/game/behaviors/controllable_platform.inc.c:            sp54[1] = obj_find_wall_displacement(sp3C, o->oPosX, o->oPosY, o->oPosZ - 300.0, 50.0f);
src/game/behaviors/controllable_platform.inc.c:            sp54[2] = obj_find_wall_displacement(sp30, o->oPosX - 250.0, o->oPosY, o->oPosZ - 300.0, 50.0f);
src/game/behaviors/controllable_platform.inc.c:            o->oVelX = 10.0f;
src/game/behaviors/controllable_platform.inc.c:            sp54[0] = obj_find_wall_displacement(sp48, o->oPosX + 300.0, o->oPosY, o->oPosZ + 250.0, 50.0f);
src/game/behaviors/controllable_platform.inc.c:            sp54[1] = obj_find_wall_displacement(sp3C, o->oPosX + 300.0, o->oPosY, o->oPosZ, 50.0f);
src/game/behaviors/controllable_platform.inc.c:            sp54[2] = obj_find_wall_displacement(sp30, o->oPosX + 300.0, o->oPosY, o->oPosZ - 250.0, 50.0f);
src/game/behaviors/controllable_platform.inc.c:            o->oVelX = -10.0f;
src/game/behaviors/controllable_platform.inc.c:            sp54[0] = obj_find_wall_displacement(sp48, o->oPosX - 300.0, o->oPosY, o->oPosZ + 250.0, 50.0f);
src/game/behaviors/controllable_platform.inc.c:            sp54[1] = obj_find_wall_displacement(sp3C, o->oPosX - 300.0, o->oPosY, o->oPosZ, 50.0f);
src/game/behaviors/controllable_platform.inc.c:            sp54[2] = obj_find_wall_displacement(sp30, o->oPosX - 300.0, o->oPosY, o->oPosZ - 250.0, 50.0f);
src/game/behaviors/controllable_platform.inc.c:                                          o->oHomeX, o->oHomeY, o->oHomeZ, 0, 0, 0);
src/game/behaviors/controllable_platform.inc.c:    o->oPosX += o->oVelX;
src/game/behaviors/controllable_platform.inc.c:    o->oPosZ += o->oVelZ;
src/game/behaviors/corkbox.inc.c:    o->oPosY -= 300.0f;
src/game/behaviors/corkbox.inc.c:    o->oBobombExpBubGfxExpRateX = (s32)(random_float() * 2048.0f) + 0x800;
src/game/behaviors/corkbox.inc.c:    o->oBobombExpBubGfxExpRateY = (s32)(random_float() * 2048.0f) + 0x800;
src/game/behaviors/corkbox.inc.c:    o->oTimer = random_float() * 10.0f;
src/game/behaviors/corkbox.inc.c:    o->oVelY = (s32)(random_float() * 4.0f) + 4;
src/game/behaviors/corkbox.inc.c:    o->header.gfx.scale[0] = sins(o->oBobombExpBubGfxScaleFacX) * 0.5 + 2.0;
src/game/behaviors/corkbox.inc.c:    o->oBobombExpBubGfxScaleFacX += o->oBobombExpBubGfxExpRateX;
src/game/behaviors/corkbox.inc.c:    o->header.gfx.scale[1] = sins(o->oBobombExpBubGfxScaleFacY) * 0.5 + 2.0;
src/game/behaviors/corkbox.inc.c:    o->oBobombExpBubGfxScaleFacY += o->oBobombExpBubGfxExpRateY;
src/game/behaviors/corkbox.inc.c:    if (o->oPosY > waterY) {
src/game/behaviors/corkbox.inc.c:        o->activeFlags = ACTIVE_FLAG_DEACTIVATED;
src/game/behaviors/corkbox.inc.c:        o->oPosY += 5.0f;
src/game/behaviors/corkbox.inc.c:    if (o->oTimer >= 61)
src/game/behaviors/corkbox.inc.c:        o->activeFlags = ACTIVE_FLAG_DEACTIVATED;
src/game/behaviors/corkbox.inc.c:    o->oPosY += o->oVelY;
src/game/behaviors/corkbox.inc.c:    o->oTimer++;
src/game/behaviors/corkbox.inc.c:    if (!is_point_within_radius_of_mario(o->oPosX, o->oPosY, o->oPosZ, o->oRespawnerMinSpawnDist)) {
src/game/behaviors/corkbox.inc.c:        spawnedObject = spawn_object(o, o->oRespawnerModelToRespawn, o->oRespawnerBehaviorToRespawn);
src/game/behaviors/corkbox.inc.c:        spawnedObject->oBehParams = o->oBehParams;
src/game/behaviors/corkbox.inc.c:        o->activeFlags = ACTIVE_FLAG_DEACTIVATED;
src/game/behaviors/corkbox.inc.c:    struct Object *respawner = spawn_object_abs_with_rot(o, 0, MODEL_NONE, bhvRespawner, o->oHomeX,
src/game/behaviors/corkbox.inc.c:                                                         o->oHomeY, o->oHomeZ, 0, 0, 0);
src/game/behaviors/corkbox.inc.c:    respawner->oBehParams = o->oBehParams;
src/game/behaviors/cruiser.inc.c:    o->oRRCruiserWingUnkF4 = o->oFaceAngleYaw;
src/game/behaviors/cruiser.inc.c:    o->oRRCruiserWingUnkF8 = o->oFaceAnglePitch;
src/game/behaviors/cruiser.inc.c:    if (o->oBehParams2ndByte == 0) {
src/game/behaviors/cruiser.inc.c:        o->oFaceAngleYaw = o->oRRCruiserWingUnkF4 + sins(o->oTimer * 0x400) * 8192.0f;
src/game/behaviors/cruiser.inc.c:        o->oFaceAnglePitch = o->oRRCruiserWingUnkF8 + coss(o->oTimer * 0x400) * 2048.0f;
src/game/behaviors/cruiser.inc.c:        o->oFaceAngleYaw = o->oRRCruiserWingUnkF4 - sins(o->oTimer * 0x400) * 8192.0f;
src/game/behaviors/cruiser.inc.c:        o->oFaceAnglePitch = o->oRRCruiserWingUnkF8 + coss(o->oTimer * 0x400) * 2048.0f;
src/game/behaviors/cruiser.inc.c:    if (o->oTimer == 64) {
src/game/behaviors/cruiser.inc.c:        o->oTimer = 0;
src/game/behaviors/ddd_pole.inc.c:        o->hitboxDownOffset = 100.0f;
src/game/behaviors/ddd_pole.inc.c:        o->oDDDPoleMaxOffset = 100.0f * o->oBehParams2ndByte;
src/game/behaviors/ddd_pole.inc.c:    if (o->oTimer > 20) {
src/game/behaviors/ddd_pole.inc.c:        o->oDDDPoleOffset += o->oDDDPoleVel;
src/game/behaviors/ddd_pole.inc.c:        if (clamp_f32(&o->oDDDPoleOffset, 0.0f, o->oDDDPoleMaxOffset)) {
src/game/behaviors/ddd_pole.inc.c:            o->oDDDPoleVel = -o->oDDDPoleVel;
src/game/behaviors/ddd_pole.inc.c:            o->oTimer = 0;
src/game/behaviors/ddd_pole.inc.c:    obj_set_dist_from_home(o->oDDDPoleOffset);
src/game/behaviors/ddd_warp.inc.c:        o->collisionData = segmented_to_virtual(inside_castle_seg7_collision_ddd_warp_2);
src/game/behaviors/ddd_warp.inc.c:        o->collisionData = segmented_to_virtual(inside_castle_seg7_collision_ddd_warp);
src/game/behaviors/decorative_pendulum.inc.c:    o->oAngleVelRoll = 0x100;
src/game/behaviors/decorative_pendulum.inc.c:    if (o->oFaceAngleRoll > 0)
src/game/behaviors/decorative_pendulum.inc.c:        o->oAngleVelRoll -= 0x08;
src/game/behaviors/decorative_pendulum.inc.c:        o->oAngleVelRoll += 0x08;
src/game/behaviors/decorative_pendulum.inc.c:    o->oFaceAngleRoll += o->oAngleVelRoll;
src/game/behaviors/decorative_pendulum.inc.c:    if (o->oAngleVelRoll == 0x10 || o->oAngleVelRoll == -0x10)
src/game/behaviors/donut_platform.inc.c:        if (!(o->oDonutPlatformSpawnerSpawnedPlatforms & platformFlag)) {
src/game/behaviors/donut_platform.inc.c:                    o->oDonutPlatformSpawnerSpawnedPlatforms |= platformFlag;
src/game/behaviors/donut_platform.inc.c:    if (o->oTimer != 0 && ((o->oMoveFlags & 0x00000003) || o->oDistanceToMario > 2500.0f)) {
src/game/behaviors/donut_platform.inc.c:        o->parentObj->oDonutPlatformSpawnerSpawnedPlatforms =
src/game/behaviors/donut_platform.inc.c:            o->parentObj->oDonutPlatformSpawnerSpawnedPlatforms
src/game/behaviors/donut_platform.inc.c:            & ((1 << o->oBehParams2ndByte) ^ 0xFFFFFFFF);
src/game/behaviors/donut_platform.inc.c:        if (o->oDistanceToMario > 2500.0f) {
src/game/behaviors/donut_platform.inc.c:        if (o->oGravity == 0.0f) {
src/game/behaviors/donut_platform.inc.c:                if (o->oTimer > 15) {
src/game/behaviors/donut_platform.inc.c:                    o->oGravity = -0.1f;
src/game/behaviors/donut_platform.inc.c:                o->oTimer = 0;
src/game/behaviors/door.inc.c:        o->oAction = 0;
src/game/behaviors/door.inc.c:    if (segmented_to_virtual(bhvDoor) == o->behavior)
src/game/behaviors/door.inc.c:    if (o->oTimer == 0) {
src/game/behaviors/door.inc.c:    if (o->oTimer == 70) {
src/game/behaviors/door.inc.c:    if (o->oTimer == 30)
src/game/behaviors/door.inc.c:    switch (o->oAction) {
src/game/behaviors/door.inc.c:    if (o->oAction == 0)
src/game/behaviors/door.inc.c:    f32 x = o->oPosX;
src/game/behaviors/door.inc.c:    f32 z = o->oPosZ;
src/game/behaviors/door.inc.c:    find_floor(x, o->oPosY, z, &floor);
src/game/behaviors/door.inc.c:        o->oDoorUnkF8 = floor->room;
src/game/behaviors/door.inc.c:    x = o->oPosX + sins(o->oMoveAngleYaw) * 200.0f;
src/game/behaviors/door.inc.c:    z = o->oPosZ + coss(o->oMoveAngleYaw) * 200.0f;
src/game/behaviors/door.inc.c:    find_floor(x, o->oPosY, z, &floor);
src/game/behaviors/door.inc.c:        o->oDoorUnkFC = floor->room;
src/game/behaviors/door.inc.c:    x = o->oPosX + sins(o->oMoveAngleYaw) * -200.0f;
src/game/behaviors/door.inc.c:    z = o->oPosZ + coss(o->oMoveAngleYaw) * -200.0f;
src/game/behaviors/door.inc.c:    find_floor(x, o->oPosY, z, &floor);
src/game/behaviors/door.inc.c:        o->oDoorUnk100 = floor->room;
src/game/behaviors/door.inc.c:    if (o->oDoorUnkF8 > 0 && o->oDoorUnkF8 < 60) {
src/game/behaviors/door.inc.c:        gDoorAdjacentRooms[o->oDoorUnkF8][0] = o->oDoorUnkFC;
src/game/behaviors/door.inc.c:        gDoorAdjacentRooms[o->oDoorUnkF8][1] = o->oDoorUnk100;
src/game/behaviors/door.inc.c:        if (o->oDoorUnkF8 == gMarioCurrentRoom)
src/game/behaviors/door.inc.c:        else if (gMarioCurrentRoom == o->oDoorUnkFC)
src/game/behaviors/door.inc.c:        else if (gMarioCurrentRoom == o->oDoorUnk100)
src/game/behaviors/door.inc.c:        else if (gDoorAdjacentRooms[gMarioCurrentRoom][0] == o->oDoorUnkFC)
src/game/behaviors/door.inc.c:        else if (gDoorAdjacentRooms[gMarioCurrentRoom][0] == o->oDoorUnk100)
src/game/behaviors/door.inc.c:        else if (gDoorAdjacentRooms[gMarioCurrentRoom][1] == o->oDoorUnkFC)
src/game/behaviors/door.inc.c:        else if (gDoorAdjacentRooms[gMarioCurrentRoom][1] == o->oDoorUnk100)
src/game/behaviors/door.inc.c:        o->header.gfx.node.flags |= GRAPH_RENDER_ACTIVE;
src/game/behaviors/door.inc.c:        o->header.gfx.node.flags &= ~GRAPH_RENDER_ACTIVE;
src/game/behaviors/door.inc.c:    o->oDoorUnk88 = sp4;
src/game/behaviors/dorrie.inc.c:    startAngle = o->oDorrieNeckAngle;
src/game/behaviors/dorrie.inc.c:    o->oDorrieNeckAngle -= (s16) absf(370.0f * sins(o->oDorrieHeadRaiseSpeed));
src/game/behaviors/dorrie.inc.c:    xzDisp = 440.0f * (coss(o->oDorrieNeckAngle) - coss(startAngle));
src/game/behaviors/dorrie.inc.c:    yDisp = 440.0f * (sins(o->oDorrieNeckAngle) - sins(startAngle));
src/game/behaviors/dorrie.inc.c:    set_mario_pos(gMarioObject->oPosX + xzDisp * sins(o->oMoveAngleYaw), gMarioObject->oPosY - yDisp,
src/game/behaviors/dorrie.inc.c:                  gMarioObject->oPosZ + xzDisp * coss(o->oMoveAngleYaw));
src/game/behaviors/dorrie.inc.c:    startYaw = o->oMoveAngleYaw;
src/game/behaviors/dorrie.inc.c:    o->oDorrieNeckAngle = -0x26F4;
src/game/behaviors/dorrie.inc.c:    if (o->oDorrieForwardDistToMario < 320.0f && o->oDorrieGroundPounded) {
src/game/behaviors/dorrie.inc.c:        o->collisionData = segmented_to_virtual(dorrie_seg6_collision_0600FBB8);
src/game/behaviors/dorrie.inc.c:        o->oAction = DORRIE_ACT_LOWER_HEAD;
src/game/behaviors/dorrie.inc.c:        o->oForwardVel = 0.0f;
src/game/behaviors/dorrie.inc.c:        o->oDorrieYawVel = 0;
src/game/behaviors/dorrie.inc.c:            circularTurn = 0x4000 - atan2s(2000.0f, o->oDorrieDistToHome - 2000.0f);
src/game/behaviors/dorrie.inc.c:            if ((s16)(o->oMoveAngleYaw - o->oDorrieAngleToHome) < 0) {
src/game/behaviors/dorrie.inc.c:            targetYaw = o->oDorrieAngleToHome + circularTurn;
src/game/behaviors/dorrie.inc.c:        o->oDorrieYawVel =
src/game/behaviors/dorrie.inc.c:            approach_s16_symmetric(o->oDorrieYawVel, (s16)(targetYaw - o->oMoveAngleYaw) / 50, 5);
src/game/behaviors/dorrie.inc.c:        o->oMoveAngleYaw += o->oDorrieYawVel;
src/game/behaviors/dorrie.inc.c:    o->oAngleVelYaw = o->oMoveAngleYaw - startYaw;
src/game/behaviors/dorrie.inc.c:    o->oDorrieLiftingMario = liftingMario;
src/game/behaviors/dorrie.inc.c:    o->oAction = DORRIE_ACT_RAISE_HEAD;
src/game/behaviors/dorrie.inc.c:    o->oDorrieHeadRaiseSpeed = 0;
src/game/behaviors/dorrie.inc.c:        if (o->oTimer > 150) {
src/game/behaviors/dorrie.inc.c:            if (o->oDorrieForwardDistToMario > 830.0f && set_mario_npc_dialog(2) == 1) {
src/game/behaviors/dorrie.inc.c:            } else if (o->oDorrieForwardDistToMario > 320.0f) {
src/game/behaviors/dorrie.inc.c:                o->oTimer = 0;
src/game/behaviors/dorrie.inc.c:            if (o->oDorrieOffsetY == -17.0f && o->oDorrieForwardDistToMario > 780.0f
src/game/behaviors/dorrie.inc.c:            } else if (o->oDorrieForwardDistToMario > 320.0f) {
src/game/behaviors/dorrie.inc.c:                o->oTimer = 0;
src/game/behaviors/dorrie.inc.c:        } else if (o->oTimer > 150) {
src/game/behaviors/dorrie.inc.c:        o->oDorrieNeckAngle += 0x115;
src/game/behaviors/dorrie.inc.c:    o->collisionData = segmented_to_virtual(dorrie_seg6_collision_0600F644);
src/game/behaviors/dorrie.inc.c:        o->oAction = DORRIE_ACT_MOVE;
src/game/behaviors/dorrie.inc.c:    } else if (o->oDorrieLiftingMario && o->header.gfx.unk38.animFrame < 74) {
src/game/behaviors/dorrie.inc.c:            o->oDorrieHeadRaiseSpeed += 0x1CC;
src/game/behaviors/dorrie.inc.c:    if (!(o->activeFlags & ACTIVE_FLAG_IN_DIFFERENT_ROOM)) {
src/game/behaviors/dorrie.inc.c:        o->oDorrieForwardDistToMario = o->oDistanceToMario * coss(o->oAngleToMario - o->oMoveAngleYaw);
src/game/behaviors/dorrie.inc.c:        o->oDorrieAngleToHome = cur_obj_angle_to_home();
src/game/behaviors/dorrie.inc.c:        o->oDorrieDistToHome = cur_obj_lateral_dist_to_home();
src/game/behaviors/dorrie.inc.c:            440.0f * coss(o->oDorrieNeckAngle) * coss(o->oMoveAngleYaw - o->oDorrieAngleToHome);
src/game/behaviors/dorrie.inc.c:        if (clamp_f32(&o->oDorrieDistToHome, 1650.0f + boundsShift, 2300.0f + boundsShift)) {
src/game/behaviors/dorrie.inc.c:            o->oPosX = o->oHomeX - o->oDorrieDistToHome * sins(o->oDorrieAngleToHome);
src/game/behaviors/dorrie.inc.c:            o->oPosZ = o->oHomeZ - o->oDorrieDistToHome * coss(o->oDorrieAngleToHome);
src/game/behaviors/dorrie.inc.c:        o->oDorrieGroundPounded = cur_obj_is_mario_ground_pounding_platform();
src/game/behaviors/dorrie.inc.c:            if (o->oDorrieOffsetY >= 0.0f) {
src/game/behaviors/dorrie.inc.c:                if (o->oDorrieGroundPounded) {
src/game/behaviors/dorrie.inc.c:                    o->oDorrieVelY = -15.0f;
src/game/behaviors/dorrie.inc.c:                    o->oDorrieVelY = -6.0f;
src/game/behaviors/dorrie.inc.c:        o->oDorrieOffsetY += o->oDorrieVelY;
src/game/behaviors/dorrie.inc.c:        approach_f32_ptr(&o->oDorrieVelY, 3.0f, 1.0f);
src/game/behaviors/dorrie.inc.c:        if (o->oDorrieVelY > 0.0f && o->oDorrieOffsetY > maxOffsetY) {
src/game/behaviors/dorrie.inc.c:            o->oDorrieOffsetY = maxOffsetY;
src/game/behaviors/dorrie.inc.c:        o->oPosY = o->oHomeY + o->oDorrieOffsetY;
src/game/behaviors/dorrie.inc.c:        switch (o->oAction) {
src/game/behaviors/drawbridge.inc.c:    drawbridge1->oMoveAngleYaw = o->oMoveAngleYaw;
src/game/behaviors/drawbridge.inc.c:    drawbridge1->oPosX += coss(o->oMoveAngleYaw) * 640.0f;
src/game/behaviors/drawbridge.inc.c:    drawbridge1->oPosZ += sins(o->oMoveAngleYaw) * 640.0f;
src/game/behaviors/drawbridge.inc.c:    drawbridge2->oMoveAngleYaw = o->oMoveAngleYaw + 0x8000;
src/game/behaviors/drawbridge.inc.c:    drawbridge2->oPosX += coss(o->oMoveAngleYaw) * -640.0f;
src/game/behaviors/drawbridge.inc.c:    drawbridge2->oPosZ += sins(o->oMoveAngleYaw) * -640.0f;
src/game/behaviors/drawbridge.inc.c:    o->activeFlags = ACTIVE_FLAG_DEACTIVATED;
src/game/behaviors/drawbridge.inc.c:    switch (o->oAction) {
src/game/behaviors/drawbridge.inc.c:            o->oFaceAngleRoll += 0x100;
src/game/behaviors/drawbridge.inc.c:            o->oFaceAngleRoll -= 0x100;
src/game/behaviors/drawbridge.inc.c:    if ((s16) o->oFaceAngleRoll < -0x1FFD) {
src/game/behaviors/drawbridge.inc.c:        o->oFaceAngleRoll = 0xDFFF;
src/game/behaviors/drawbridge.inc.c:        if (o->oTimer >= 51 && (globalTimer % 8) == 0) {
src/game/behaviors/drawbridge.inc.c:            o->oAction = LLL_DRAWBRIDGE_ACT_LOWER;
src/game/behaviors/drawbridge.inc.c:    if ((s16) o->oFaceAngleRoll >= 0) {
src/game/behaviors/drawbridge.inc.c:        o->oFaceAngleRoll = 0;
src/game/behaviors/drawbridge.inc.c:        if (o->oTimer >= 51 && (globalTimer % 8) == 0) {
src/game/behaviors/drawbridge.inc.c:            o->oAction = LLL_DRAWBRIDGE_ACT_RAISE;
src/game/behaviors/elevator.inc.c:    o->oVelY = 0;
src/game/behaviors/elevator.inc.c:    if (o->oElevatorUnk100 == 2) {
src/game/behaviors/elevator.inc.c:            if (o->oPosY > o->oElevatorUnkFC)
src/game/behaviors/elevator.inc.c:                o->oAction = 2;
src/game/behaviors/elevator.inc.c:                o->oAction = 1;
src/game/behaviors/elevator.inc.c:    } else if (gMarioObject->oPosY > o->oElevatorUnkFC || o->oElevatorUnk100 == 1) {
src/game/behaviors/elevator.inc.c:        o->oPosY = o->oElevatorUnkF8;
src/game/behaviors/elevator.inc.c:            o->oAction = 2;
src/game/behaviors/elevator.inc.c:        o->oPosY = o->oElevatorUnkF4;
src/game/behaviors/elevator.inc.c:            o->oAction = 1;
src/game/behaviors/elevator.inc.c:    if (o->oTimer == 0 && cur_obj_is_mario_on_platform())
src/game/behaviors/elevator.inc.c:    approach_f32_signed(&o->oVelY, 10.0f, 2.0f);
src/game/behaviors/elevator.inc.c:    o->oPosY += o->oVelY;
src/game/behaviors/elevator.inc.c:    if (o->oPosY > o->oElevatorUnkF8) {
src/game/behaviors/elevator.inc.c:        o->oPosY = o->oElevatorUnkF8;
src/game/behaviors/elevator.inc.c:        if (o->oElevatorUnk100 == 2 || o->oElevatorUnk100 == 1)
src/game/behaviors/elevator.inc.c:            o->oAction = 3;
src/game/behaviors/elevator.inc.c:        else if (gMarioObject->oPosY < o->oElevatorUnkFC)
src/game/behaviors/elevator.inc.c:            o->oAction = 2;
src/game/behaviors/elevator.inc.c:            o->oAction = 3;
src/game/behaviors/elevator.inc.c:    if (o->oTimer == 0 && cur_obj_is_mario_on_platform())
src/game/behaviors/elevator.inc.c:    approach_f32_signed(&o->oVelY, -10.0f, -2.0f);
src/game/behaviors/elevator.inc.c:    o->oPosY += o->oVelY;
src/game/behaviors/elevator.inc.c:    if (o->oPosY < o->oElevatorUnkF4) {
src/game/behaviors/elevator.inc.c:        o->oPosY = o->oElevatorUnkF4;
src/game/behaviors/elevator.inc.c:        if (o->oElevatorUnk100 == 1)
src/game/behaviors/elevator.inc.c:            o->oAction = 4;
src/game/behaviors/elevator.inc.c:        else if (o->oElevatorUnk100 == 2)
src/game/behaviors/elevator.inc.c:            o->oAction = 3;
src/game/behaviors/elevator.inc.c:        else if (gMarioObject->oPosY > o->oElevatorUnkFC)
src/game/behaviors/elevator.inc.c:            o->oAction = 1;
src/game/behaviors/elevator.inc.c:            o->oAction = 3;
src/game/behaviors/elevator.inc.c:    o->oVelY = 0;
src/game/behaviors/elevator.inc.c:    if (o->oTimer == 0) {
src/game/behaviors/elevator.inc.c:        o->oAction = 1;
src/game/behaviors/elevator.inc.c:    o->oVelY = 0;
src/game/behaviors/elevator.inc.c:    if (o->oTimer == 0) {
src/game/behaviors/elevator.inc.c:        o->oAction = 0;
src/game/behaviors/elevator.inc.c:    s32 sp1C = D_8032F38C[o->oBehParams2ndByte * 3 + 2];
src/game/behaviors/elevator.inc.c:        o->oElevatorUnkF4 = D_8032F38C[o->oBehParams2ndByte * 3];
src/game/behaviors/elevator.inc.c:        o->oElevatorUnkF8 = o->oHomeY;
src/game/behaviors/elevator.inc.c:        o->oElevatorUnkFC = (o->oElevatorUnkF4 + o->oElevatorUnkF8) / 2;
src/game/behaviors/elevator.inc.c:        o->oElevatorUnk100 = cur_obj_has_behavior(bhvRrElevatorPlatform);
src/game/behaviors/elevator.inc.c:        o->oElevatorUnkF4 = D_8032F38C[o->oBehParams2ndByte * 3];
src/game/behaviors/elevator.inc.c:        o->oElevatorUnkF8 = D_8032F38C[o->oBehParams2ndByte * 3 + 1];
src/game/behaviors/elevator.inc.c:        o->oElevatorUnkFC = (o->oElevatorUnkF4 + o->oElevatorUnkF8) / 2;
src/game/behaviors/elevator.inc.c:        o->oElevatorUnk100 = 2;
src/game/behaviors/enemy_lakitu.inc.c:    if (o->oDistanceToMario < 2000.0f) {
src/game/behaviors/enemy_lakitu.inc.c:        o->oAction = ENEMY_LAKITU_ACT_MAIN;
src/game/behaviors/enemy_lakitu.inc.c:    if (o->oVelY < 0.0f) {
src/game/behaviors/enemy_lakitu.inc.c:    if (o->oPosY < gMarioObject->oPosY + offsetY + margin) {
src/game/behaviors/enemy_lakitu.inc.c:    f32 distToMario = o->oDistanceToMario;
src/game/behaviors/enemy_lakitu.inc.c:    o->oForwardVel = distToMario * 0.04f;
src/game/behaviors/enemy_lakitu.inc.c:    clamp_f32(&o->oForwardVel, minSpeed, 40.0f);
src/game/behaviors/enemy_lakitu.inc.c:    if (o->oEnemyLakituFaceForwardCountdown != 0) {
src/game/behaviors/enemy_lakitu.inc.c:        o->oEnemyLakituFaceForwardCountdown -= 1;
src/game/behaviors/enemy_lakitu.inc.c:        obj_face_yaw_approach(o->oAngleToMario, 0x600);
src/game/behaviors/enemy_lakitu.inc.c:    cur_obj_rotate_yaw_toward(o->oAngleToMario, turnSpeed);
src/game/behaviors/enemy_lakitu.inc.c:    if (o->oEnemyLakituSpinyCooldown != 0) {
src/game/behaviors/enemy_lakitu.inc.c:        o->oEnemyLakituSpinyCooldown -= 1;
src/game/behaviors/enemy_lakitu.inc.c:    } else if (o->oEnemyLakituNumSpinies < 3 && o->oDistanceToMario < 800.0f
src/game/behaviors/enemy_lakitu.inc.c:               && abs_angle_diff(o->oAngleToMario, o->oFaceAngleYaw) < 0x4000) {
src/game/behaviors/enemy_lakitu.inc.c:            o->prevObj = spiny;
src/game/behaviors/enemy_lakitu.inc.c:            o->oEnemyLakituNumSpinies += 1;
src/game/behaviors/enemy_lakitu.inc.c:            o->oSubAction = ENEMY_LAKITU_SUB_ACT_HOLD_SPINY;
src/game/behaviors/enemy_lakitu.inc.c:            o->oEnemyLakituSpinyCooldown = 30;
src/game/behaviors/enemy_lakitu.inc.c:    if (o->oEnemyLakituSpinyCooldown != 0) {
src/game/behaviors/enemy_lakitu.inc.c:        o->oEnemyLakituSpinyCooldown -= 1;
src/game/behaviors/enemy_lakitu.inc.c:    else if (o->oDistanceToMario > o->oDrawingDistance - 100.0f
src/game/behaviors/enemy_lakitu.inc.c:             || (o->oDistanceToMario < 500.0f
src/game/behaviors/enemy_lakitu.inc.c:                 && abs_angle_diff(o->oAngleToMario, o->oFaceAngleYaw) < 0x2000)) {
src/game/behaviors/enemy_lakitu.inc.c:        o->oSubAction = ENEMY_LAKITU_SUB_ACT_THROW_SPINY;
src/game/behaviors/enemy_lakitu.inc.c:        o->oEnemyLakituFaceForwardCountdown = 20;
src/game/behaviors/enemy_lakitu.inc.c:        o->prevObj = NULL;
src/game/behaviors/enemy_lakitu.inc.c:        o->oSubAction = ENEMY_LAKITU_SUB_ACT_NO_SPINY;
src/game/behaviors/enemy_lakitu.inc.c:        o->oEnemyLakituSpinyCooldown = random_linear_offset(100, 100);
src/game/behaviors/enemy_lakitu.inc.c:    if (o->oMoveFlags & OBJ_MOVE_HIT_WALL) {
src/game/behaviors/enemy_lakitu.inc.c:        o->oMoveAngleYaw = cur_obj_reflect_move_angle_off_wall();
src/game/behaviors/enemy_lakitu.inc.c:    obj_update_blinking(&o->oEnemyLakituBlinkTimer, 20, 40, 4);
src/game/behaviors/enemy_lakitu.inc.c:    switch (o->oSubAction) {
src/game/behaviors/enemy_lakitu.inc.c:    if (obj_check_attacks(&sEnemyLakituHitbox, o->oAction)) {
src/game/behaviors/enemy_lakitu.inc.c:        o->prevObj = NULL;
src/game/behaviors/enemy_lakitu.inc.c:    switch (o->oAction) {
src/game/behaviors/exclamation_box.inc.c:    if (o->parentObj->oAction != 1)
src/game/behaviors/exclamation_box.inc.c:    if (o->oBehParams2ndByte < 4) {
src/game/behaviors/exclamation_box.inc.c:        o->oAnimState = o->oBehParams2ndByte;
src/game/behaviors/exclamation_box.inc.c:        if ((save_file_get_flags() & D_8032F0C0[o->oBehParams2ndByte])
src/game/behaviors/exclamation_box.inc.c:            || ((o->oBehParams >> 24) & 0xFF) != 0)
src/game/behaviors/exclamation_box.inc.c:            o->oAction = 2;
src/game/behaviors/exclamation_box.inc.c:            o->oAction = 2;
src/game/behaviors/exclamation_box.inc.c:        o->oAnimState = 4;
src/game/behaviors/exclamation_box.inc.c:        o->oAction = 2;
src/game/behaviors/exclamation_box.inc.c:    if (o->oTimer == 0) {
src/game/behaviors/exclamation_box.inc.c:    if ((save_file_get_flags() & D_8032F0C0[o->oBehParams2ndByte])
src/game/behaviors/exclamation_box.inc.c:        || ((o->oBehParams >> 24) & 0xFF) != 0) {
src/game/behaviors/exclamation_box.inc.c:        o->oAction = 2;
src/game/behaviors/exclamation_box.inc.c:    if (o->oTimer == 0) {
src/game/behaviors/exclamation_box.inc.c:        o->oInteractStatus = 0;
src/game/behaviors/exclamation_box.inc.c:        o->oPosY = o->oHomeY;
src/game/behaviors/exclamation_box.inc.c:        o->oGraphYOffset = 0.0f;
src/game/behaviors/exclamation_box.inc.c:        o->oExclamationBoxUnkFC = 0x4000;
src/game/behaviors/exclamation_box.inc.c:        o->oVelY = 30.0f;
src/game/behaviors/exclamation_box.inc.c:        o->oGravity = -8.0f;
src/game/behaviors/exclamation_box.inc.c:        o->oFloorHeight = o->oPosY;
src/game/behaviors/exclamation_box.inc.c:        o->oAction = 3;
src/game/behaviors/exclamation_box.inc.c:    if (o->oVelY < 0.0f) {
src/game/behaviors/exclamation_box.inc.c:        o->oVelY = 0.0f;
src/game/behaviors/exclamation_box.inc.c:        o->oGravity = 0.0f;
src/game/behaviors/exclamation_box.inc.c:    o->oExclamationBoxUnkF8 = (sins(o->oExclamationBoxUnkFC) + 1.0) * 0.3 + 0.0;
src/game/behaviors/exclamation_box.inc.c:    o->oExclamationBoxUnkF4 = (-sins(o->oExclamationBoxUnkFC) + 1.0) * 0.5 + 1.0;
src/game/behaviors/exclamation_box.inc.c:    o->oGraphYOffset = (-sins(o->oExclamationBoxUnkFC) + 1.0) * 26.0;
src/game/behaviors/exclamation_box.inc.c:    o->oExclamationBoxUnkFC += 0x1000;
src/game/behaviors/exclamation_box.inc.c:    o->header.gfx.scale[0] = o->oExclamationBoxUnkF4 * 2.0f;
src/game/behaviors/exclamation_box.inc.c:    o->header.gfx.scale[1] = o->oExclamationBoxUnkF8 * 2.0f;
src/game/behaviors/exclamation_box.inc.c:    o->header.gfx.scale[2] = o->oExclamationBoxUnkF4 * 2.0f;
src/game/behaviors/exclamation_box.inc.c:    if (o->oTimer == 7)
src/game/behaviors/exclamation_box.inc.c:        o->oAction = 4;
src/game/behaviors/exclamation_box.inc.c:    if (o->oBehParams2ndByte == 1) {
src/game/behaviors/exclamation_box.inc.c:                o->oBehParams = 0x06000000;
src/game/behaviors/exclamation_box.inc.c:                    o->oBehParams |= a0->unk2 << 24;
src/game/behaviors/exclamation_box.inc.c:                        o->oFlags |= 0x4000;
src/game/behaviors/exclamation_box.inc.c:    exclamation_box_spawn_contents(sExclamationBoxContents, o->oBehParams2ndByte);
src/game/behaviors/exclamation_box.inc.c:    spawn_triangle_break_particles(20, 139, 0.3f, o->oAnimState);
src/game/behaviors/exclamation_box.inc.c:    if ((o->oBehParams2ndByte < 4)&&(o->oBehParams2ndByte != 1)&&(gCurrLevelNum!=LEVEL_SSL)) {
src/game/behaviors/exclamation_box.inc.c:        o->oAction = 5;
src/game/behaviors/exclamation_box.inc.c:    if (o->oTimer > 300)
src/game/behaviors/exclamation_box.inc.c:        o->oAction = 2;
src/game/behaviors/explosion.inc.c:    o->oOpacity = 255;
src/game/behaviors/explosion.inc.c:    if (o->oTimer == 9) {
src/game/behaviors/explosion.inc.c:        if (find_water_level(o->oPosX, o->oPosZ) > o->oPosY) {
src/game/behaviors/explosion.inc.c:        o->activeFlags = ACTIVE_FLAG_DEACTIVATED;
src/game/behaviors/explosion.inc.c:    o->oOpacity -= 14;
src/game/behaviors/explosion.inc.c:    cur_obj_scale((f32) o->oTimer / 9.0f + 1.0);
src/game/behaviors/express_elevator.inc.c:    o->oVelY = 0.0f;
src/game/behaviors/express_elevator.inc.c:    if (o->oAction == 0) {
src/game/behaviors/express_elevator.inc.c:            o->oAction++;
src/game/behaviors/express_elevator.inc.c:    } else if (o->oAction == 1) {
src/game/behaviors/express_elevator.inc.c:        o->oVelY = -20.0f;
src/game/behaviors/express_elevator.inc.c:        o->oPosY += o->oVelY;
src/game/behaviors/express_elevator.inc.c:        if (o->oTimer > 132)
src/game/behaviors/express_elevator.inc.c:            o->oAction++;
src/game/behaviors/express_elevator.inc.c:    } else if (o->oAction == 2) {
src/game/behaviors/express_elevator.inc.c:        if (o->oTimer > 110)
src/game/behaviors/express_elevator.inc.c:            o->oAction++;
src/game/behaviors/express_elevator.inc.c:    } else if (o->oAction == 3) {
src/game/behaviors/express_elevator.inc.c:        o->oVelY = 10.0f;
src/game/behaviors/express_elevator.inc.c:        o->oPosY += o->oVelY;
src/game/behaviors/express_elevator.inc.c:        if (o->oPosY >= o->oHomeY) {
src/game/behaviors/express_elevator.inc.c:            o->oPosY = o->oHomeY;
src/game/behaviors/express_elevator.inc.c:            o->oAction++;
src/game/behaviors/express_elevator.inc.c:        o->oAction = 0;
src/game/behaviors/eyerok.inc.c:    if (gMarioObject->oPosZ - o->oHomeZ < arg0) {
src/game/behaviors/eyerok.inc.c:    if (o->oTimer == 0) {
src/game/behaviors/eyerok.inc.c:    } else if (o->oDistanceToMario < 500.0f) {
src/game/behaviors/eyerok.inc.c:        o->oAction = EYEROK_BOSS_ACT_WAKE_UP;
src/game/behaviors/eyerok.inc.c:    if (o->oEyerokBossNumHands == 2) {
src/game/behaviors/eyerok.inc.c:        if (o->oTimer > 5) {
src/game/behaviors/eyerok.inc.c:            if (o->oSubAction == 0) {
src/game/behaviors/eyerok.inc.c:                o->oSubAction += 1;
src/game/behaviors/eyerok.inc.c:            if (o->oEyerokBossUnk110 == 0.0f && mario_ready_to_speak() != 0) {
src/game/behaviors/eyerok.inc.c:                o->oAction = EYEROK_BOSS_ACT_SHOW_INTRO_TEXT;
src/game/behaviors/eyerok.inc.c:            } else if (o->oTimer > 150) {
src/game/behaviors/eyerok.inc.c:                if (approach_f32_ptr(&o->oEyerokBossUnk110, 0.0f, 10.0f)) {
src/game/behaviors/eyerok.inc.c:                    o->oTimer = 0;
src/game/behaviors/eyerok.inc.c:            } else if (o->oTimer > 90) {
src/game/behaviors/eyerok.inc.c:                approach_f32_ptr(&o->oEyerokBossUnk110, 300.f, 10.0f);
src/game/behaviors/eyerok.inc.c:        o->oTimer = 0;
src/game/behaviors/eyerok.inc.c:        o->oAction = EYEROK_BOSS_ACT_FIGHT;
src/game/behaviors/eyerok.inc.c:    if (o->oEyerokBossNumHands == 0) {
src/game/behaviors/eyerok.inc.c:        o->oAction = EYEROK_BOSS_ACT_DIE;
src/game/behaviors/eyerok.inc.c:    } else if (o->oEyerokBossUnk1AC == 0 && o->oEyerokBossActiveHand == 0) {
src/game/behaviors/eyerok.inc.c:        if (o->oEyerokBossUnk104 != 0) {
src/game/behaviors/eyerok.inc.c:            if (approach_f32_ptr(&o->oEyerokBossUnk110, 1.0f, 0.02f)) {
src/game/behaviors/eyerok.inc.c:                if (o->oEyerokBossUnk104 < 0) {
src/game/behaviors/eyerok.inc.c:                    if (eyerok_check_mario_relative_z(400) == 0 && ++o->oEyerokBossUnk104 == 0) {
src/game/behaviors/eyerok.inc.c:                        o->oEyerokBossUnk104 = 1;
src/game/behaviors/eyerok.inc.c:                    o->oEyerokBossUnk104 -= 1;
src/game/behaviors/eyerok.inc.c:                if (o->oEyerokBossUnk104 != 0 && o->oEyerokBossUnk104 != 1) {
src/game/behaviors/eyerok.inc.c:                    o->oEyerokBossUnkFC += 1;
src/game/behaviors/eyerok.inc.c:                    if ((o->oEyerokBossActiveHand = o->oEyerokBossUnkFC & 0x1) == 0) {
src/game/behaviors/eyerok.inc.c:                        o->oEyerokBossActiveHand = -1;
src/game/behaviors/eyerok.inc.c:            o->oEyerokBossUnkFC += 1;
src/game/behaviors/eyerok.inc.c:                o->oEyerokBossUnk104 = -8;
src/game/behaviors/eyerok.inc.c:                o->oEyerokBossUnk110 = 1.0f;
src/game/behaviors/eyerok.inc.c:                o->oEyerokBossUnk108 = 0.0f;
src/game/behaviors/eyerok.inc.c:            } else if (o->oEyerokBossNumHands == 2 && o->oEyerokBossUnkFC % 6 == 0) {
src/game/behaviors/eyerok.inc.c:                o->oEyerokBossUnk104 = 8;
src/game/behaviors/eyerok.inc.c:                o->oEyerokBossUnk110 = 0.0f;
src/game/behaviors/eyerok.inc.c:                if ((o->oEyerokBossUnkFC = random_u16() & 0x1) != 0) {
src/game/behaviors/eyerok.inc.c:                    o->oEyerokBossUnk108 = -1.0f;
src/game/behaviors/eyerok.inc.c:                    o->oEyerokBossUnk108 = 1.0f;
src/game/behaviors/eyerok.inc.c:                o->oEyerokBossUnk10C = gMarioObject->oPosZ;
src/game/behaviors/eyerok.inc.c:                clamp_f32(&o->oEyerokBossUnk10C, o->oPosZ + 400.0f, o->oPosZ + 1600.0f);
src/game/behaviors/eyerok.inc.c:            } else if ((o->oEyerokBossActiveHand = o->oEyerokBossUnkFC & 0x1) == 0) {
src/game/behaviors/eyerok.inc.c:                o->oEyerokBossActiveHand = -1;
src/game/behaviors/eyerok.inc.c:    if (o->oTimer == 60) {
src/game/behaviors/eyerok.inc.c:            o->oTimer -= 1;
src/game/behaviors/eyerok.inc.c:    } else if (o->oTimer > 120) {
src/game/behaviors/eyerok.inc.c:    switch (o->oAction) {
src/game/behaviors/eyerok.inc.c:    if (o->oEyerokReceivedAttack != 0 && abs_angle_diff(o->oAngleToMario, o->oFaceAngleYaw) < 0x3000) {
src/game/behaviors/eyerok.inc.c:        if (--o->oHealth >= 2) {
src/game/behaviors/eyerok.inc.c:            o->oAction = EYEROK_HAND_ACT_ATTACKED;
src/game/behaviors/eyerok.inc.c:            o->oVelY = 30.0f;
src/game/behaviors/eyerok.inc.c:            o->parentObj->oEyerokBossNumHands -= 1;
src/game/behaviors/eyerok.inc.c:            o->oAction = EYEROK_HAND_ACT_DIE;
src/game/behaviors/eyerok.inc.c:            o->oVelY = 50.0f;
src/game/behaviors/eyerok.inc.c:        o->oForwardVel *= 0.2f;
src/game/behaviors/eyerok.inc.c:        o->oMoveAngleYaw = o->oFaceAngleYaw + 0x8000;
src/game/behaviors/eyerok.inc.c:        o->oMoveFlags = 0;
src/game/behaviors/eyerok.inc.c:        o->oGravity = -4.0f;
src/game/behaviors/eyerok.inc.c:        o->oAnimState = 3;
src/game/behaviors/eyerok.inc.c:    set_camera_shake_from_point(SHAKE_POS_SMALL, o->oPosX, o->oPosY, o->oPosZ);
src/game/behaviors/eyerok.inc.c:    if (o->parentObj->oAction != EYEROK_BOSS_ACT_SLEEP
src/game/behaviors/eyerok.inc.c:        && ++o->oEyerokHandWakeUpTimer > -3 * o->oBehParams2ndByte) {
src/game/behaviors/eyerok.inc.c:            o->parentObj->oEyerokBossNumHands += 1;
src/game/behaviors/eyerok.inc.c:            o->oAction = EYEROK_HAND_ACT_IDLE;
src/game/behaviors/eyerok.inc.c:            o->collisionData = segmented_to_virtual(&ssl_seg7_collision_07028274);
src/game/behaviors/eyerok.inc.c:            approach_f32_ptr(&o->oPosX, o->oHomeX, 15.0f);
src/game/behaviors/eyerok.inc.c:            o->oPosY = o->oHomeY
src/game/behaviors/eyerok.inc.c:                       + (200 * o->oBehParams2ndByte + 400)
src/game/behaviors/eyerok.inc.c:                             * sins((s16)(absf(o->oPosX - o->oHomeX) / 724.0f * 0x8000));
src/game/behaviors/eyerok.inc.c:            obj_face_yaw_approach(o->oMoveAngleYaw, 400);
src/game/behaviors/eyerok.inc.c:        if (o->oBehParams2ndByte < 0) {
src/game/behaviors/eyerok.inc.c:            o->collisionData = segmented_to_virtual(&ssl_seg7_collision_070284B0);
src/game/behaviors/eyerok.inc.c:            o->collisionData = segmented_to_virtual(&ssl_seg7_collision_07028370);
src/game/behaviors/eyerok.inc.c:        o->oPosX = o->oHomeX + 724.0f * o->oBehParams2ndByte;
src/game/behaviors/eyerok.inc.c:    if (o->parentObj->oAction == EYEROK_BOSS_ACT_FIGHT) {
src/game/behaviors/eyerok.inc.c:        if (o->parentObj->oEyerokBossUnk104 != 0) {
src/game/behaviors/eyerok.inc.c:            if (o->parentObj->oEyerokBossUnk104 != 1) {
src/game/behaviors/eyerok.inc.c:                o->oAction = EYEROK_HAND_ACT_BEGIN_DOUBLE_POUND;
src/game/behaviors/eyerok.inc.c:                o->oGravity = 0.0f;
src/game/behaviors/eyerok.inc.c:        } else if (o->parentObj->oEyerokBossUnk1AC == 0 && o->parentObj->oEyerokBossActiveHand != 0) {
src/game/behaviors/eyerok.inc.c:            if (o->parentObj->oEyerokBossActiveHand == o->oBehParams2ndByte) {
src/game/behaviors/eyerok.inc.c:                    o->oAction = EYEROK_HAND_ACT_TARGET_MARIO;
src/game/behaviors/eyerok.inc.c:                    o->oMoveAngleYaw = o->oAngleToMario;
src/game/behaviors/eyerok.inc.c:                    o->oGravity = 0.0f;
src/game/behaviors/eyerok.inc.c:                    o->oAction = EYEROK_HAND_ACT_FIST_PUSH;
src/game/behaviors/eyerok.inc.c:                    if (o->parentObj->oPosX - gMarioObject->oPosX < 0.0f) {
src/game/behaviors/eyerok.inc.c:                        o->oMoveAngleYaw = -0x800;
src/game/behaviors/eyerok.inc.c:                        o->oMoveAngleYaw = 0x800;
src/game/behaviors/eyerok.inc.c:                    o->oMoveAngleYaw += o->oAngleToMario;
src/game/behaviors/eyerok.inc.c:                    o->oGravity = -4.0f;
src/game/behaviors/eyerok.inc.c:                o->oAction = EYEROK_HAND_ACT_OPEN;
src/game/behaviors/eyerok.inc.c:        o->oPosY = o->oHomeY + o->parentObj->oEyerokBossUnk110;
src/game/behaviors/eyerok.inc.c:    o->parentObj->oEyerokBossUnk1AC = o->oBehParams2ndByte;
src/game/behaviors/eyerok.inc.c:        o->oAction = EYEROK_HAND_ACT_SHOW_EYE;
src/game/behaviors/eyerok.inc.c:        o->oEyerokHandUnkFC = 2;
src/game/behaviors/eyerok.inc.c:        o->oEyerokHandUnk100 = 60;
src/game/behaviors/eyerok.inc.c:        o->collisionData = segmented_to_virtual(ssl_seg7_collision_070282F8);
src/game/behaviors/eyerok.inc.c:        if (o->parentObj->oEyerokBossNumHands != 2) {
src/game/behaviors/eyerok.inc.c:            sp1E = o->oAngleToMario;
src/game/behaviors/eyerok.inc.c:            o->oMoveAngleYaw = sp1E;
src/game/behaviors/eyerok.inc.c:            o->oForwardVel = 50.0f;
src/game/behaviors/eyerok.inc.c:            o->oMoveAngleYaw = 0;
src/game/behaviors/eyerok.inc.c:        if (o->parentObj->oEyerokBossActiveHand == 0) {
src/game/behaviors/eyerok.inc.c:            if (o->oAnimState < 3) {
src/game/behaviors/eyerok.inc.c:                o->oAnimState += 1;
src/game/behaviors/eyerok.inc.c:                val06 = (s16)(o->oAngleToMario - o->oFaceAngleYaw) * o->oBehParams2ndByte;
src/game/behaviors/eyerok.inc.c:                o->oAction = EYEROK_HAND_ACT_CLOSE;
src/game/behaviors/eyerok.inc.c:            if (o->oEyerokHandUnk100--) {
src/game/behaviors/eyerok.inc.c:                if (o->oEyerokHandUnkFC != 0) {
src/game/behaviors/eyerok.inc.c:                    o->oEyerokHandUnkFC -= 1;
src/game/behaviors/eyerok.inc.c:                o->oAnimState = D_80331BA4[o->oEyerokHandUnkFC];
src/game/behaviors/eyerok.inc.c:                o->oEyerokHandUnkFC = 5;
src/game/behaviors/eyerok.inc.c:                o->oEyerokHandUnk100 = random_linear_offset(20, 50);
src/game/behaviors/eyerok.inc.c:            if (o->parentObj->oEyerokBossNumHands != 2) {
src/game/behaviors/eyerok.inc.c:                obj_face_yaw_approach(o->oMoveAngleYaw, 0x800);
src/game/behaviors/eyerok.inc.c:                if (o->oTimer > 10
src/game/behaviors/eyerok.inc.c:                    && (o->oPosZ - gMarioObject->oPosZ > 0.0f || (o->oMoveFlags & 0x00000400))) {
src/game/behaviors/eyerok.inc.c:                    o->parentObj->oEyerokBossActiveHand = 0;
src/game/behaviors/eyerok.inc.c:                    o->oForwardVel = 0.0f;
src/game/behaviors/eyerok.inc.c:        o->collisionData = segmented_to_virtual(ssl_seg7_collision_07028274);
src/game/behaviors/eyerok.inc.c:        if (o->parentObj->oEyerokBossNumHands != 2) {
src/game/behaviors/eyerok.inc.c:            o->oAction = EYEROK_HAND_ACT_RETREAT;
src/game/behaviors/eyerok.inc.c:            o->parentObj->oEyerokBossActiveHand = o->oBehParams2ndByte;
src/game/behaviors/eyerok.inc.c:        } else if (o->parentObj->oEyerokBossActiveHand == 0) {
src/game/behaviors/eyerok.inc.c:            o->oAction = EYEROK_HAND_ACT_IDLE;
src/game/behaviors/eyerok.inc.c:            o->parentObj->oEyerokBossUnk1AC = 0;
src/game/behaviors/eyerok.inc.c:        o->oAction = EYEROK_HAND_ACT_RECOVER;
src/game/behaviors/eyerok.inc.c:        o->collisionData = segmented_to_virtual(ssl_seg7_collision_07028274);
src/game/behaviors/eyerok.inc.c:    if (o->oMoveFlags & 0x00000003) {
src/game/behaviors/eyerok.inc.c:        o->oForwardVel = 0.0f;
src/game/behaviors/eyerok.inc.c:        o->oAction = EYEROK_HAND_ACT_BECOME_ACTIVE;
src/game/behaviors/eyerok.inc.c:    if (o->parentObj->oEyerokBossActiveHand == 0 || o->parentObj->oEyerokBossNumHands != 2) {
src/game/behaviors/eyerok.inc.c:        o->oAction = EYEROK_HAND_ACT_RETREAT;
src/game/behaviors/eyerok.inc.c:        o->parentObj->oEyerokBossActiveHand = o->oBehParams2ndByte;
src/game/behaviors/eyerok.inc.c:        o->parentObj->oEyerokBossUnk1AC = 0;
src/game/behaviors/eyerok.inc.c:    if (o->oMoveFlags & 0x00000003) {
src/game/behaviors/eyerok.inc.c:        o->oForwardVel = 0.0f;
src/game/behaviors/eyerok.inc.c:    o->oPosX = o->oHomeX - distToHome * sins(angleToHome);
src/game/behaviors/eyerok.inc.c:    o->oPosZ = o->oHomeZ - distToHome * coss(angleToHome);
src/game/behaviors/eyerok.inc.c:    if (approach_f32_ptr(&o->oPosY, o->oHomeY, 20.0f) && distToHome == 0.0f && o->oFaceAngleYaw == 0) {
src/game/behaviors/eyerok.inc.c:        o->oAction = EYEROK_HAND_ACT_IDLE;
src/game/behaviors/eyerok.inc.c:        o->parentObj->oEyerokBossActiveHand -= o->oBehParams2ndByte;
src/game/behaviors/eyerok.inc.c:        if (o->parentObj->oEyerokBossUnk1AC == o->oBehParams2ndByte) {
src/game/behaviors/eyerok.inc.c:            o->parentObj->oEyerokBossUnk1AC = 0;
src/game/behaviors/eyerok.inc.c:    if (eyerok_check_mario_relative_z(400) != 0 || o->oPosZ - gMarioObject->oPosZ > 0.0f
src/game/behaviors/eyerok.inc.c:        || o->oPosZ - o->parentObj->oPosZ > 1700.0f || absf(o->oPosX - o->parentObj->oPosX) > 900.0f
src/game/behaviors/eyerok.inc.c:        || (o->oMoveFlags & 0x00000200)) {
src/game/behaviors/eyerok.inc.c:        o->oForwardVel = 0.0f;
src/game/behaviors/eyerok.inc.c:        if (approach_f32_ptr(&o->oPosY, o->oHomeY + 300.0f, 20.0f)) {
src/game/behaviors/eyerok.inc.c:            o->oAction = EYEROK_HAND_ACT_SMASH;
src/game/behaviors/eyerok.inc.c:        approach_f32_ptr(&o->oPosY, o->oHomeY + 300.0f, 20.0f);
src/game/behaviors/eyerok.inc.c:        cur_obj_rotate_yaw_toward(o->oAngleToMario, 4000);
src/game/behaviors/eyerok.inc.c:    if (o->oTimer > 20) {
src/game/behaviors/eyerok.inc.c:        if (o->oMoveFlags & 0x00000003) {
src/game/behaviors/eyerok.inc.c:            if (o->oGravity < -4.0f) {
src/game/behaviors/eyerok.inc.c:                o->oGravity = -4.0f;
src/game/behaviors/eyerok.inc.c:                sp1E = abs_angle_diff(o->oFaceAngleYaw, o->oAngleToMario);
src/game/behaviors/eyerok.inc.c:                if (o->oDistanceToMario < 300.0f && sp1E > 0x2000 && sp1E < 0x6000) {
src/game/behaviors/eyerok.inc.c:                    o->oAction = EYEROK_HAND_ACT_FIST_SWEEP;
src/game/behaviors/eyerok.inc.c:                    if ((s16)(o->oFaceAngleYaw - o->oAngleToMario) < 0) {
src/game/behaviors/eyerok.inc.c:                        o->oMoveAngleYaw = 0x4000;
src/game/behaviors/eyerok.inc.c:                        o->oMoveAngleYaw = -0x4000;
src/game/behaviors/eyerok.inc.c:                    o->oAction = EYEROK_HAND_ACT_RETREAT;
src/game/behaviors/eyerok.inc.c:            o->oGravity = -20.0f;
src/game/behaviors/eyerok.inc.c:    if (o->oTimer > 5 && (o->oPosZ - gMarioObject->oPosZ > 0.0f || (o->oMoveFlags & 0x00000400))) {
src/game/behaviors/eyerok.inc.c:        o->oAction = EYEROK_HAND_ACT_FIST_SWEEP;
src/game/behaviors/eyerok.inc.c:        o->oForwardVel = 0.0f;
src/game/behaviors/eyerok.inc.c:        if (o->oPosX - gMarioObject->oPosX < 0.0f) {
src/game/behaviors/eyerok.inc.c:            o->oMoveAngleYaw = 0x4000;
src/game/behaviors/eyerok.inc.c:            o->oMoveAngleYaw = -0x4000;
src/game/behaviors/eyerok.inc.c:        o->oForwardVel = 50.0f;
src/game/behaviors/eyerok.inc.c:    if (o->oPosZ - o->parentObj->oPosZ < 1000.0f || (o->oMoveFlags & 0x400)) {
src/game/behaviors/eyerok.inc.c:        o->oAction = EYEROK_HAND_ACT_RETREAT;
src/game/behaviors/eyerok.inc.c:        o->oForwardVel = 0.0f;
src/game/behaviors/eyerok.inc.c:        o->oForwardVel *= 1.08f;
src/game/behaviors/eyerok.inc.c:        o->oTimer = 0;
src/game/behaviors/eyerok.inc.c:    if (o->parentObj->oEyerokBossUnk104 < 0
src/game/behaviors/eyerok.inc.c:        || o->parentObj->oEyerokBossActiveHand == o->oBehParams2ndByte) {
src/game/behaviors/eyerok.inc.c:        o->oAction = EYEROK_HAND_ACT_DOUBLE_POUND;
src/game/behaviors/eyerok.inc.c:        o->oMoveAngleYaw = (s32)(o->oFaceAngleYaw - 0x4000 * o->parentObj->oEyerokBossUnk108);
src/game/behaviors/eyerok.inc.c:        sp4 = o->parentObj->oPosX + 400.0f * o->parentObj->oEyerokBossUnk108
src/game/behaviors/eyerok.inc.c:              - 180.0f * o->oBehParams2ndByte;
src/game/behaviors/eyerok.inc.c:        o->oPosX = o->oHomeX + (sp4 - o->oHomeX) * o->parentObj->oEyerokBossUnk110;
src/game/behaviors/eyerok.inc.c:        o->oPosY = o->oHomeY + 300.0f * o->parentObj->oEyerokBossUnk110;
src/game/behaviors/eyerok.inc.c:        o->oPosZ =
src/game/behaviors/eyerok.inc.c:            o->oHomeZ + (o->parentObj->oEyerokBossUnk10C - o->oHomeZ) * o->parentObj->oEyerokBossUnk110;
src/game/behaviors/eyerok.inc.c:    if (o->parentObj->oEyerokBossNumHands != 2) {
src/game/behaviors/eyerok.inc.c:        o->parentObj->oEyerokBossActiveHand = o->oBehParams2ndByte;
src/game/behaviors/eyerok.inc.c:    if (o->parentObj->oEyerokBossUnk104 == 1) {
src/game/behaviors/eyerok.inc.c:        o->oAction = EYEROK_HAND_ACT_RETREAT;
src/game/behaviors/eyerok.inc.c:        o->parentObj->oEyerokBossUnk1AC = o->oBehParams2ndByte;
src/game/behaviors/eyerok.inc.c:    } else if (o->parentObj->oEyerokBossActiveHand == o->oBehParams2ndByte) {
src/game/behaviors/eyerok.inc.c:        if (o->oMoveFlags & 0x00000003) {
src/game/behaviors/eyerok.inc.c:            if (o->oGravity < -15.0f) {
src/game/behaviors/eyerok.inc.c:                o->parentObj->oEyerokBossActiveHand = 0;
src/game/behaviors/eyerok.inc.c:                o->oForwardVel = 0.0f;
src/game/behaviors/eyerok.inc.c:                o->oGravity = -15.0f;
src/game/behaviors/eyerok.inc.c:                o->oForwardVel = 30.0f * absf(o->parentObj->oEyerokBossUnk108);
src/game/behaviors/eyerok.inc.c:                o->oVelY = 100.0f;
src/game/behaviors/eyerok.inc.c:                o->oMoveFlags = 0;
src/game/behaviors/eyerok.inc.c:        } else if (o->oVelY <= 0.0f) {
src/game/behaviors/eyerok.inc.c:            o->oGravity = -20.0f;
src/game/behaviors/eyerok.inc.c:    o->header.gfx.scale[0] = 1.5f;
src/game/behaviors/eyerok.inc.c:    if (o->oAction == EYEROK_HAND_ACT_SLEEP) {
src/game/behaviors/eyerok.inc.c:        switch (o->oAction) {
src/game/behaviors/eyerok.inc.c:        o->oEyerokReceivedAttack = obj_check_attacks(&sEyerokHitbox, o->oAction);
src/game/behaviors/eyerok.inc.c:    o->header.gfx.scale[0] = 1.5f * o->oBehParams2ndByte;
src/game/behaviors/falling_pillar.inc.c:    o->oGravity = 0.5f;
src/game/behaviors/falling_pillar.inc.c:    o->oFriction = 0.91f;
src/game/behaviors/falling_pillar.inc.c:    o->oBuoyancy = 1.3f;
src/game/behaviors/falling_pillar.inc.c:    return atan2s(targetZ - o->oPosZ, targetX - o->oPosX);
src/game/behaviors/falling_pillar.inc.c:    switch (o->oAction) {
src/game/behaviors/falling_pillar.inc.c:            if (is_point_within_radius_of_mario(o->oPosX, o->oPosY, o->oPosZ, 1300)) {
src/game/behaviors/falling_pillar.inc.c:                o->oMoveAngleYaw = o->oAngleToMario;
src/game/behaviors/falling_pillar.inc.c:                o->oForwardVel = 1.0f;
src/game/behaviors/falling_pillar.inc.c:                o->oAction = FALLING_PILLAR_ACT_TURNING;
src/game/behaviors/falling_pillar.inc.c:            o->oFaceAngleYaw = approach_s16_symmetric(o->oFaceAngleYaw, angleInFrontOfMario, 0x400);
src/game/behaviors/falling_pillar.inc.c:            if (o->oTimer > 10)
src/game/behaviors/falling_pillar.inc.c:                o->oAction = FALLING_PILLAR_ACT_FALLING;
src/game/behaviors/falling_pillar.inc.c:            o->oFallingPillarPitchAcceleration += 4.0f;
src/game/behaviors/falling_pillar.inc.c:            o->oAngleVelPitch += o->oFallingPillarPitchAcceleration;
src/game/behaviors/falling_pillar.inc.c:            o->oFaceAnglePitch += o->oAngleVelPitch;
src/game/behaviors/falling_pillar.inc.c:            if (o->oFaceAnglePitch > 0x3900) {
src/game/behaviors/falling_pillar.inc.c:                o->oPosX += sins(o->oFaceAngleYaw) * 500.0f;
src/game/behaviors/falling_pillar.inc.c:                o->oPosZ += coss(o->oFaceAngleYaw) * 500.0f;
src/game/behaviors/falling_pillar.inc.c:                set_camera_shake_from_point(SHAKE_POS_MEDIUM, o->oPosX, o->oPosY, o->oPosZ);
src/game/behaviors/falling_pillar.inc.c:                o->activeFlags = ACTIVE_FLAG_DEACTIVATED;
src/game/behaviors/falling_pillar.inc.c:    s32 pitch = o->parentObj->oFaceAnglePitch;
src/game/behaviors/falling_pillar.inc.c:    s32 yaw = o->parentObj->oFaceAngleYaw;
src/game/behaviors/falling_pillar.inc.c:    f32 x = o->parentObj->oPosX;
src/game/behaviors/falling_pillar.inc.c:    f32 y = o->parentObj->oPosY;
src/game/behaviors/falling_pillar.inc.c:    f32 z = o->parentObj->oPosZ;
src/game/behaviors/falling_pillar.inc.c:    f32 yOffset = o->oBehParams2ndByte * 400 + 300;
src/game/behaviors/falling_pillar.inc.c:    o->oPosX = sins(pitch) * sins(yaw) * yOffset + x;
src/game/behaviors/falling_pillar.inc.c:    o->oPosY = coss(pitch) * yOffset + y;
src/game/behaviors/falling_pillar.inc.c:    o->oPosZ = sins(pitch) * coss(yaw) * yOffset + z;
src/game/behaviors/falling_pillar.inc.c:    if (o->parentObj->activeFlags == ACTIVE_FLAG_DEACTIVATED)
src/game/behaviors/falling_pillar.inc.c:        o->activeFlags = ACTIVE_FLAG_DEACTIVATED;
src/game/behaviors/falling_rising_platform.inc.c:    o->header.gfx.scale[1] = (sins(o->oPlatformTimer) + 1.0) * 0.3 + 0.4;
src/game/behaviors/falling_rising_platform.inc.c:    o->oPlatformTimer += 0x80;
src/game/behaviors/falling_rising_platform.inc.c:    o->oPosY -=
src/game/behaviors/falling_rising_platform.inc.c:        sins(o->oPlatformTimer)
src/game/behaviors/falling_rising_platform.inc.c:    o->oPlatformTimer += 0x100; //change to 0x200 or whatever you want
src/game/behaviors/falling_rising_platform.inc.c:    obj_copy_pos_and_angle(o, o->parentObj);
src/game/behaviors/falling_rising_platform.inc.c:    if (o->oBehParams2ndByte != 0) {
src/game/behaviors/falling_rising_platform.inc.c:        if (o->oTimer == 0)
src/game/behaviors/falling_rising_platform.inc.c:            o->oPosY -= 300.0f;
src/game/behaviors/falling_rising_platform.inc.c:        o->oPosY += sins(o->oPlatformTimer) * 7.0f;
src/game/behaviors/falling_rising_platform.inc.c:        o->oPosY -= sins(o->oPlatformTimer) * 3.0f;
src/game/behaviors/falling_rising_platform.inc.c:    o->oPlatformTimer += 0x100;
src/game/behaviors/ferris_wheel.inc.c:    o->collisionData = segmented_to_virtual(sFerrisWheelProperties[o->oBehParams2ndByte].axleCollision);
src/game/behaviors/ferris_wheel.inc.c:                                         sFerrisWheelProperties[o->oBehParams2ndByte].platformModel,
src/game/behaviors/ferris_wheel.inc.c:                segmented_to_virtual(sFerrisWheelProperties[o->oBehParams2ndByte].platformCollision);
src/game/behaviors/ferris_wheel.inc.c:    offsetAngle = o->parentObj->oFaceAngleRoll + o->oBehParams2ndByte * 0x4000;
src/game/behaviors/ferris_wheel.inc.c:    o->oPosX = o->parentObj->oPosX + offsetXZ * sins(o->parentObj->oMoveAngleYaw)
src/game/behaviors/ferris_wheel.inc.c:               + 300.0f * coss(o->parentObj->oMoveAngleYaw);
src/game/behaviors/ferris_wheel.inc.c:    o->oPosY = o->parentObj->oPosY + 400.0f * sins(offsetAngle);
src/game/behaviors/ferris_wheel.inc.c:    o->oPosZ = o->parentObj->oPosZ + offsetXZ * coss(o->parentObj->oMoveAngleYaw)
src/game/behaviors/ferris_wheel.inc.c:               + 300.0f * sins(o->parentObj->oMoveAngleYaw);
src/game/behaviors/fire_piranha_plant.inc.c:    o->oFirePiranhaPlantNeutralScale = D_80331B5C[(u16)(o->oBehParams >> 16)];
src/game/behaviors/fire_piranha_plant.inc.c:    if ((u16)(o->oBehParams >> 16) != 0) {
src/game/behaviors/fire_piranha_plant.inc.c:        o->oFlags |= 0x00004000;
src/game/behaviors/fire_piranha_plant.inc.c:        o->oHealth = 1;
src/game/behaviors/fire_piranha_plant.inc.c:        if (o->oBehParams & 0x0000FF00) {
src/game/behaviors/fire_piranha_plant.inc.c:            o->oNumLootCoins = 0;
src/game/behaviors/fire_piranha_plant.inc.c:            o->oNumLootCoins = 2;
src/game/behaviors/fire_piranha_plant.inc.c:    if (o->oFirePiranhaPlantDeathSpinTimer != 0) {
src/game/behaviors/fire_piranha_plant.inc.c:        o->oMoveAngleYaw += (s32) o->oFirePiranhaPlantDeathSpinVel;
src/game/behaviors/fire_piranha_plant.inc.c:        approach_f32_ptr(&o->oFirePiranhaPlantDeathSpinVel, 0.0f, 200.0f);
src/game/behaviors/fire_piranha_plant.inc.c:            if (--o->oFirePiranhaPlantDeathSpinTimer == 0) {
src/game/behaviors/fire_piranha_plant.inc.c:    } else if (approach_f32_ptr(&o->oFirePiranhaPlantScale, 0.0f,
src/game/behaviors/fire_piranha_plant.inc.c:                                0.04f * o->oFirePiranhaPlantNeutralScale)) {
src/game/behaviors/fire_piranha_plant.inc.c:        if (o->oFirePiranhaPlantActive) {
src/game/behaviors/fire_piranha_plant.inc.c:            o->oFirePiranhaPlantActive = FALSE;
src/game/behaviors/fire_piranha_plant.inc.c:            if ((u16)(o->oBehParams >> 16) != 0 && o->oHealth == 0) {
src/game/behaviors/fire_piranha_plant.inc.c:        } else if (sNumActiveFirePiranhaPlants < 2 && o->oTimer > 100 && o->oDistanceToMario > 400.0f
src/game/behaviors/fire_piranha_plant.inc.c:                   && o->oDistanceToMario < 1200.0f) {
src/game/behaviors/fire_piranha_plant.inc.c:            o->oFirePiranhaPlantActive = TRUE;
src/game/behaviors/fire_piranha_plant.inc.c:            o->oAction = FIRE_PIRANHA_PLANT_ACT_GROW;
src/game/behaviors/fire_piranha_plant.inc.c:            o->oMoveAngleYaw = o->oAngleToMario;
src/game/behaviors/fire_piranha_plant.inc.c:    if (approach_f32_ptr(&o->oFirePiranhaPlantScale, o->oFirePiranhaPlantNeutralScale,
src/game/behaviors/fire_piranha_plant.inc.c:                         0.04f * o->oFirePiranhaPlantNeutralScale)) {
src/game/behaviors/fire_piranha_plant.inc.c:        if (o->oTimer > 80) {
src/game/behaviors/fire_piranha_plant.inc.c:            o->oAction = FIRE_PIRANHA_PLANT_ACT_HIDE;
src/game/behaviors/fire_piranha_plant.inc.c:        } else if (o->oTimer < 50) {
src/game/behaviors/fire_piranha_plant.inc.c:            cur_obj_rotate_yaw_toward(o->oAngleToMario, 0x400);
src/game/behaviors/fire_piranha_plant.inc.c:                    obj_spit_fire(0, (s32)(30.0f * o->oFirePiranhaPlantNeutralScale),
src/game/behaviors/fire_piranha_plant.inc.c:                                  (s32)(140.0f * o->oFirePiranhaPlantNeutralScale),
src/game/behaviors/fire_piranha_plant.inc.c:                                  5.0f * o->oFirePiranhaPlantNeutralScale, MODEL_RED_FLAME_SHADOW,
src/game/behaviors/fire_piranha_plant.inc.c:    } else if (o->oFirePiranhaPlantScale > o->oFirePiranhaPlantNeutralScale / 2) {
src/game/behaviors/fire_piranha_plant.inc.c:    cur_obj_scale(o->oFirePiranhaPlantScale);
src/game/behaviors/fire_piranha_plant.inc.c:    switch (o->oAction) {
src/game/behaviors/fire_piranha_plant.inc.c:    if (obj_check_attacks(&sFirePiranhaPlantHitbox, o->oAction)) {
src/game/behaviors/fire_piranha_plant.inc.c:        if (--o->oHealth < 0) {
src/game/behaviors/fire_piranha_plant.inc.c:            if (o->oFirePiranhaPlantActive) {
src/game/behaviors/fire_piranha_plant.inc.c:                    spawn_default_star(o->oPosX, o->oPosY+100.0f, o->oPosZ);
src/game/behaviors/fire_piranha_plant.inc.c:        o->oAction = FIRE_PIRANHA_PLANT_ACT_HIDE;
src/game/behaviors/fire_piranha_plant.inc.c:        o->oFirePiranhaPlantDeathSpinTimer = 10;
src/game/behaviors/fire_piranha_plant.inc.c:        o->oFirePiranhaPlantDeathSpinVel = 8000.0f;
src/game/behaviors/fire_spitter.inc.c:    approach_f32_ptr(&o->header.gfx.scale[0], 0.2f, 0.002f);
src/game/behaviors/fire_spitter.inc.c:    if (o->oTimer > 150 && o->oDistanceToMario < 800.0f && !(o->oMoveFlags & 0x00000078)) {
src/game/behaviors/fire_spitter.inc.c:        o->oAction = FIRE_SPITTER_ACT_SPIT_FIRE;
src/game/behaviors/fire_spitter.inc.c:        o->oFireSpitterScaleVel = 0.05f;
src/game/behaviors/fire_spitter.inc.c:    o->oMoveAngleYaw = o->oAngleToMario;
src/game/behaviors/fire_spitter.inc.c:    scaleStatus = obj_grow_then_shrink(&o->oFireSpitterScaleVel, 0.15f, 0.1f);
src/game/behaviors/fire_spitter.inc.c:            o->oAction = FIRE_SPITTER_ACT_IDLE;
src/game/behaviors/fire_spitter.inc.c:    cur_obj_scale(o->header.gfx.scale[0]);
src/game/behaviors/fire_spitter.inc.c:    o->oGraphYOffset = 40.0f;
src/game/behaviors/fire_spitter.inc.c:    switch (o->oAction) {
src/game/behaviors/fish.inc.c: * Spawns fish with settings chosen by the field o->oBehParams2ndByte.
src/game/behaviors/fish.inc.c:    switch (o->oBehParams2ndByte) {
src/game/behaviors/fish.inc.c:    if (o->oDistanceToMario < minDistToMario || gCurrLevelNum == LEVEL_SA) {
src/game/behaviors/fish.inc.c:            fishObject->oBehParams2ndByte = o->oBehParams2ndByte;
src/game/behaviors/fish.inc.c:        o->oAction = FISH_ACT_ACTIVE;
src/game/behaviors/fish.inc.c:        if (gMarioObject->oPosY - o->oPosY > 2000.0f) {
src/game/behaviors/fish.inc.c:            o->oAction = FISH_ACT_RESPAWN;
src/game/behaviors/fish.inc.c:    o->oAction = FISH_ACT_INIT;
src/game/behaviors/fish.inc.c:    f32 parentY = o->parentObj->oPosY;
src/game/behaviors/fish.inc.c:        if (500.0f < absf(o->oPosY - o->oFishPosY)) {
src/game/behaviors/fish.inc.c:        o->oPosY = approach_f32_symmetric(o->oPosY, o->oFishPosY, speed);
src/game/behaviors/fish.inc.c:    } else if (parentY - 100.0f - o->oFishDepthDistance < o->oPosY
src/game/behaviors/fish.inc.c:               && o->oPosY < parentY + 1000.0f + o->oFishDepthDistance) {
src/game/behaviors/fish.inc.c:        o->oPosY = approach_f32_symmetric(o->oPosY, o->oFishPosY, speed);
src/game/behaviors/fish.inc.c:    f32 fishY = o->oPosY - gMarioObject->oPosY;
src/game/behaviors/fish.inc.c:    if (o->oTimer < 10) {
src/game/behaviors/fish.inc.c:    if (o->oTimer == 0) {
src/game/behaviors/fish.inc.c:        o->oForwardVel = random_float() * 2 + 3.0f;
src/game/behaviors/fish.inc.c:            o->oFishRandomOffset = random_float() * 700.0f;
src/game/behaviors/fish.inc.c:            o->oFishRandomOffset = random_float() * 100.0f;
src/game/behaviors/fish.inc.c:        o->oFishRespawnDistance = random_float() * 500 + 200.0f;
src/game/behaviors/fish.inc.c:    o->oFishPosY = gMarioObject->oPosY + o->oFishRandomOffset;
src/game/behaviors/fish.inc.c:    cur_obj_rotate_yaw_toward(o->oAngleToMario, 0x400);
src/game/behaviors/fish.inc.c:    if (o->oPosY < o->oFishWaterLevel - 50.0f) {
src/game/behaviors/fish.inc.c:        o->oPosY = o->oFishWaterLevel - 50.0f;
src/game/behaviors/fish.inc.c:            o->oPosY = o->oPosY - 1.0f;
src/game/behaviors/fish.inc.c:    if (o->oDistanceToMario < o->oFishRespawnDistance + 150.0f) {
src/game/behaviors/fish.inc.c:        o->oAction = FISH_ACT_RESPAWN;
src/game/behaviors/fish.inc.c:    f32 fishY = o->oPosY - gMarioObject->oPosY;
src/game/behaviors/fish.inc.c:    o->oFishPosY = gMarioObject->oPosY + o->oFishRandomOffset;
src/game/behaviors/fish.inc.c:    if (o->oTimer == 0) {
src/game/behaviors/fish.inc.c:        o->oFishActiveDistance = random_float() * 300.0f;
src/game/behaviors/fish.inc.c:        o->oFishRandomSpeed = random_float() * 1024.0f + 1024.0f;
src/game/behaviors/fish.inc.c:        o->oFishRandomVel = random_float() * 4.0f + 8.0f + 5.0f;
src/game/behaviors/fish.inc.c:        if (o->oDistanceToMario < 600.0f) {
src/game/behaviors/fish.inc.c:            distance = (s32)(1.0 / (o->oDistanceToMario / 600.0));
src/game/behaviors/fish.inc.c:    if (o->oTimer < 20) {
src/game/behaviors/fish.inc.c:    if (o->oForwardVel < o->oFishRandomVel) {
src/game/behaviors/fish.inc.c:        o->oForwardVel = o->oForwardVel + 0.5;
src/game/behaviors/fish.inc.c:    o->oFishPosY = gMarioObject->oPosY + o->oFishRandomOffset;
src/game/behaviors/fish.inc.c:    cur_obj_rotate_yaw_toward(o->oAngleToMario + 0x8000, o->oFishRandomSpeed);
src/game/behaviors/fish.inc.c:    if (o->oPosY < o->oFishWaterLevel - 50.0f) {
src/game/behaviors/fish.inc.c:        o->oPosY = o->oFishWaterLevel - 50.0f;
src/game/behaviors/fish.inc.c:            o->oPosY -= 1.0f;
src/game/behaviors/fish.inc.c:    if (o->oDistanceToMario > o->oFishActiveDistance + 500.0f) {
src/game/behaviors/fish.inc.c:        o->oAction = FISH_ACT_ACTIVE;
src/game/behaviors/fish.inc.c:    o->header.gfx.unk38.animFrame = (s16)(random_float() * 28.0f);
src/game/behaviors/fish.inc.c:    o->oFishDepthDistance = random_float() * 300.0f;
src/game/behaviors/fish.inc.c:    o->oAction = FISH_ACT_ACTIVE;
src/game/behaviors/fish.inc.c:    o->oFishWaterLevel = find_water_level(o->oPosX, o->oPosZ);
src/game/behaviors/fish.inc.c:        o->oFishWaterLevel = 0.0f;
src/game/behaviors/fish.inc.c:    o->oWallHitboxRadius = 30.0f;
src/game/behaviors/fish.inc.c:        if (o->oFishWaterLevel < -10000.0f) {
src/game/behaviors/fish.inc.c:        o->oFishWaterLevel = 1000.0f;
src/game/behaviors/fish.inc.c:    if (o->parentObj->oAction == FISH_ACT_RESPAWN) {
src/game/behaviors/fishing_boo.inc.c:    o->oDistanceToMario = lateral_dist_between_objects(o, gMarioObject);
src/game/behaviors/fishing_boo.inc.c:    o->oPosY -= 100.0f;
src/game/behaviors/fishing_boo.inc.c:    switch (o->oAction) {
src/game/behaviors/fishing_boo.inc.c:            o->oAction++;
src/game/behaviors/fishing_boo.inc.c:            o->oAction++;
src/game/behaviors/fishing_boo.inc.c:    o->oForwardVel = sins(o->oMovingFlameTimer) * 70.0f;
src/game/behaviors/fishing_boo.inc.c:    o->oMovingFlameTimer += 0x800;
src/game/behaviors/flame.inc.c:    if ((u16)(o->oBehParams >> 16) == 0) {
src/game/behaviors/flame.inc.c:        if (o->oTimer > 0) {
src/game/behaviors/flame.inc.c:            o->header.gfx.scale[1] = o->header.gfx.scale[2] * (1.0f + 0.7f * sp2C);
src/game/behaviors/flame.inc.c:            o->header.gfx.scale[0] = o->header.gfx.scale[2] * (0.9f - 0.5f * sp2C);
src/game/behaviors/flame.inc.c:            o->oAnimState = random_u16();
src/game/behaviors/flame.inc.c:        if (approach_f32_ptr(&o->oSmallPiranhaFlameUnkF4, o->oSmallPiranhaFlameUnkF8, 0.6f)) {
src/game/behaviors/flame.inc.c:            cur_obj_rotate_yaw_toward(o->oAngleToMario, 0x200);
src/game/behaviors/flame.inc.c:        obj_compute_vel_from_move_pitch(o->oSmallPiranhaFlameUnkF4);
src/game/behaviors/flame.inc.c:        spawn_object_with_scale(o, o->oSmallPiranhaFlameUnkFC, bhvSmallPiranhaFlame,
src/game/behaviors/flame.inc.c:                                0.4f * o->header.gfx.scale[0]);
src/game/behaviors/flame.inc.c:        if (o->oTimer > o->oSmallPiranhaFlameUnk100) {
src/game/behaviors/flame.inc.c:            spawn_object_relative_with_scale(1, 0, o->oGraphYOffset, 0, o->header.gfx.scale[0], o,
src/game/behaviors/flame.inc.c:                                             o->oSmallPiranhaFlameUnkFC, bhvFlyguyFlame);
src/game/behaviors/flame.inc.c:            o->oSmallPiranhaFlameUnk100 = random_linear_offset(8, 15);
src/game/behaviors/flame.inc.c:            o->oTimer = 0;
src/game/behaviors/flame.inc.c:        obj_check_attacks(&sPiranhaPlantFireHitbox, o->oAction);
src/game/behaviors/flame.inc.c:        o->oSmallPiranhaFlameUnk104 += o->oSmallPiranhaFlameUnkF4;
src/game/behaviors/flame.inc.c:        if (o->oSmallPiranhaFlameUnk104 > 1500.0f || (o->oMoveFlags & 0x00000278)) {
src/game/behaviors/flame.inc.c:    o->oGraphYOffset = 15.0f * o->header.gfx.scale[1];
src/game/behaviors/flame.inc.c:    if (approach_f32_ptr(&o->header.gfx.scale[0], 0.0f, 0.6f)) {
src/game/behaviors/flame.inc.c:    cur_obj_scale(o->header.gfx.scale[0]);
src/game/behaviors/flamethrower.inc.c:    if (o->oTimer == 0) {
src/game/behaviors/flamethrower.inc.c:        o->oAnimState = (s32)(random_float() * 10.0f);
src/game/behaviors/flamethrower.inc.c:    if (o->oBehParams2ndByte == 2)
src/game/behaviors/flamethrower.inc.c:        size = o->oTimer * (o->oForwardVel - 6.0f) / 100.0 + 2.0;
src/game/behaviors/flamethrower.inc.c:        size = o->oTimer * (o->oForwardVel - 20.0) / 100.0 + 1.0;
src/game/behaviors/flamethrower.inc.c:    if (o->oBehParams2ndByte == 3) {
src/game/behaviors/flamethrower.inc.c:        o->hitboxHeight = 200.0f;
src/game/behaviors/flamethrower.inc.c:        o->hitboxDownOffset = 150.0f;
src/game/behaviors/flamethrower.inc.c:        o->oVelY = -28.0f;
src/game/behaviors/flamethrower.inc.c:        if (o->oPosY - 25.0f * size < o->oFloorHeight) {
src/game/behaviors/flamethrower.inc.c:            o->oVelY = 0;
src/game/behaviors/flamethrower.inc.c:            o->oPosY = o->oFloorHeight + 25.0f * size;
src/game/behaviors/flamethrower.inc.c:        sp18 = o->parentObj->oFlameThowerFlameUnk110 / 1.2;
src/game/behaviors/flamethrower.inc.c:        sp18 = o->parentObj->oFlameThowerFlameUnk110;
src/game/behaviors/flamethrower.inc.c:    if (o->oBehParams2ndByte == 4)
src/game/behaviors/flamethrower.inc.c:        o->oPosY += o->oForwardVel; // weird? //not wierd dumb ass, this is for flame going up
src/game/behaviors/flamethrower.inc.c:    if (o->oTimer > sp18)
src/game/behaviors/flamethrower.inc.c:    o->oInteractStatus = 0;
src/game/behaviors/flamethrower.inc.c:    if (o->oAction == 0) {
src/game/behaviors/flamethrower.inc.c:            if (o->oDistanceToMario < 2000.0f)
src/game/behaviors/flamethrower.inc.c:                o->oAction++;
src/game/behaviors/flamethrower.inc.c:    } else if (o->oAction == 1) {
src/game/behaviors/flamethrower.inc.c:        if (o->oBehParams2ndByte == 1)
src/game/behaviors/flamethrower.inc.c:        if (o->oBehParams2ndByte == 2)
src/game/behaviors/flamethrower.inc.c:        if (o->oTimer < 60)
src/game/behaviors/flamethrower.inc.c:        else if (o->oTimer < 74)
src/game/behaviors/flamethrower.inc.c:            sp34 = 75 - o->oTimer; // Range: [15..2]
src/game/behaviors/flamethrower.inc.c:            o->oAction++;
src/game/behaviors/flamethrower.inc.c:        o->oFlameThowerUnk110 = sp34;
src/game/behaviors/flamethrower.inc.c:        flame = spawn_object_relative(o->oBehParams2ndByte, 0, 0, 0, o, model, bhvFlamethrowerFlame);
src/game/behaviors/flamethrower.inc.c:    } else if (o->oTimer > 60)
src/game/behaviors/flamethrower.inc.c:        o->oAction = 0;
src/game/behaviors/flamethrower.inc.c:    o->oMoveAngleYaw -= 0x80;
src/game/behaviors/flamethrower.inc.c:    o->oAngleVelYaw = -0x80;
src/game/behaviors/flame_mario.inc.c:    spawn_object_with_scale(o, MODEL_BURN_SMOKE, bhvBlackSmokeBowser, o->header.gfx.scale[0]);
src/game/behaviors/flame_mario.inc.c:    if (o->oTimer == 0) {
src/game/behaviors/flame_mario.inc.c:        o->oForwardVel = random_float() * 2 + 0.5;
src/game/behaviors/flame_mario.inc.c:        o->oMoveAngleYaw = random_u16();
src/game/behaviors/flame_mario.inc.c:        o->oVelY = 8;
src/game/behaviors/flame_mario.inc.c:        o->oBlackSmokeBowserUnkF4 = o->header.gfx.scale[0];
src/game/behaviors/flame_mario.inc.c:    o->oMoveAngleYaw += o->oAngleVelYaw;
src/game/behaviors/flame_mario.inc.c:    o->oPosY += o->oVelY;
src/game/behaviors/flame_mario.inc.c:    if (o->oTimer == 0) {
src/game/behaviors/flame_mario.inc.c:        o->oForwardVel = random_float() * 2 + 0.5;
src/game/behaviors/flame_mario.inc.c:        o->oMoveAngleYaw = (gMarioObject->oMoveAngleYaw + 0x7000) + random_float() * 8192.0f;
src/game/behaviors/flame_mario.inc.c:        o->oVelY = 8;
src/game/behaviors/flame_mario.inc.c:    o->oMoveAngleYaw += o->oAngleVelYaw;
src/game/behaviors/flame_mario.inc.c:    o->oPosY += o->oVelY;
src/game/behaviors/flame_mario.inc.c:    if (o->oTimer != 0)
src/game/behaviors/flame_mario.inc.c:        if (o->oTimer & 1)
src/game/behaviors/flame_mario.inc.c:        o->parentObj->oActiveParticleFlags &= ~0x800;
src/game/behaviors/floating_box.inc.c:    o->oPosY = o->oHomeY + sins(o->oTimer * 0x400) * 10.0f;
src/game/behaviors/floating_platform.inc.c:    sp20 = find_water_level(o->oPosX, o->oPosZ);
src/game/behaviors/floating_platform.inc.c:    sp1C = find_floor(o->oPosX, o->oPosY, o->oPosZ, &sp24);
src/game/behaviors/floating_platform.inc.c:    if (sp20 > sp1C + o->oFloatingPlatformUnkFC) {
src/game/behaviors/floating_platform.inc.c:        o->oFloatingPlatformUnkF4 = 0;
src/game/behaviors/floating_platform.inc.c:        return sp20 + o->oFloatingPlatformUnkFC;
src/game/behaviors/floating_platform.inc.c:        o->oFloatingPlatformUnkF4 = 1;
src/game/behaviors/floating_platform.inc.c:        return sp1C + o->oFloatingPlatformUnkFC;
src/game/behaviors/floating_platform.inc.c:    s16 sp6 = (gMarioObject->header.gfx.pos[0] - o->oPosX) * coss(-1*o->oMoveAngleYaw)
src/game/behaviors/floating_platform.inc.c:              + (gMarioObject->header.gfx.pos[2] - o->oPosZ) * sins(-1*o->oMoveAngleYaw)/o->oBehParams2ndByte;
src/game/behaviors/floating_platform.inc.c:    s16 sp4 = (gMarioObject->header.gfx.pos[2] - o->oPosZ) * coss(-1*o->oMoveAngleYaw)
src/game/behaviors/floating_platform.inc.c:              - (gMarioObject->header.gfx.pos[0] - o->oPosX) * sins(-1*o->oMoveAngleYaw)/o->oBehParams2ndByte;
src/game/behaviors/floating_platform.inc.c:        o->oFaceAnglePitch = (o->oFaceAnglePitch+sp4 * 2)/2;
src/game/behaviors/floating_platform.inc.c:        o->oFaceAngleRoll = (o->oFaceAngleRoll+-sp6 * 2)/2;
src/game/behaviors/floating_platform.inc.c:        o->oVelY -= 1.0f;
src/game/behaviors/floating_platform.inc.c:        if (o->oVelY < 0.0f)
src/game/behaviors/floating_platform.inc.c:            o->oVelY = 0.0f;
src/game/behaviors/floating_platform.inc.c:        o->oFloatingPlatformUnkF8 += o->oVelY;
src/game/behaviors/floating_platform.inc.c:        if (o->oFloatingPlatformUnkF8 > 90.0f)
src/game/behaviors/floating_platform.inc.c:            o->oFloatingPlatformUnkF8 = 90.0f;
src/game/behaviors/floating_platform.inc.c:        o->oFaceAnglePitch /= 1.1;
src/game/behaviors/floating_platform.inc.c:        o->oFaceAngleRoll /= 1.1;
src/game/behaviors/floating_platform.inc.c:        o->oFloatingPlatformUnkF8 -= 5.0;
src/game/behaviors/floating_platform.inc.c:        o->oVelY = 10.0f;
src/game/behaviors/floating_platform.inc.c:        if (o->oFloatingPlatformUnkF8 < 0.0f)
src/game/behaviors/floating_platform.inc.c:            o->oFloatingPlatformUnkF8 = 0.0f;
src/game/behaviors/floating_platform.inc.c:    o->oPosY = o->oHomeY - 64.0f - o->oFloatingPlatformUnkF8 + sins(o->oFloatingPlatformUnk100 * 0x800) * 10.0f;
src/game/behaviors/floating_platform.inc.c:    o->oFloatingPlatformUnk100++;
src/game/behaviors/floating_platform.inc.c:    if (o->oFloatingPlatformUnk100 == 32)
src/game/behaviors/floating_platform.inc.c:        o->oFloatingPlatformUnk100 = 0;
src/game/behaviors/floating_platform.inc.c:    if (o->oHealth != 5) {//init
src/game/behaviors/floating_platform.inc.c:        o->oHealth = 5;
src/game/behaviors/floating_platform.inc.c:        obj_scale(o,o->oBehParams2ndByte);
src/game/behaviors/floating_platform.inc.c:    o->oHomeY = floating_platform_find_home_y();
src/game/behaviors/floating_platform.inc.c:    if (o->oFloatingPlatformUnkF4 == 0)
src/game/behaviors/floating_platform.inc.c:        o->oAction = 0;
src/game/behaviors/floating_platform.inc.c:        o->oAction = 1;
src/game/behaviors/floating_platform.inc.c:    switch (o->oAction) {
src/game/behaviors/floating_platform.inc.c:            o->oPosY = o->oHomeY;
src/game/behaviors/floating_platform.inc.c:    o->header.gfx.sharedChild = gLoadedGraphNodes[0xFE];
src/game/behaviors/floating_platform.inc.c:    if (o->oDistanceToMario > 5000) {
src/game/behaviors/floating_platform.inc.c:        o->header.gfx.sharedChild = gLoadedGraphNodes[0xF9];
src/game/behaviors/flying_bookend_switch.inc.c:        o->oAction = 1;
src/game/behaviors/flying_bookend_switch.inc.c:        o->oBookendUnkF4 = o->oFaceAnglePitch + 0x7FFF;
src/game/behaviors/flying_bookend_switch.inc.c:        o->oBookendUnkF8 = o->oFaceAngleRoll - 0x7FFF;
src/game/behaviors/flying_bookend_switch.inc.c:            o->oAction = 2;
src/game/behaviors/flying_bookend_switch.inc.c:            o->oForwardVel = 0.0f;
src/game/behaviors/flying_bookend_switch.inc.c:            o->oForwardVel = 3.0f;
src/game/behaviors/flying_bookend_switch.inc.c:            if (o->oTimer > 5) {
src/game/behaviors/flying_bookend_switch.inc.c:                obj_face_pitch_approach(o->oBookendUnkF4, 2000);
src/game/behaviors/flying_bookend_switch.inc.c:                if (o->oTimer >= 10) {
src/game/behaviors/flying_bookend_switch.inc.c:                    obj_face_roll_approach(o->oBookendUnkF8, 2000);
src/game/behaviors/flying_bookend_switch.inc.c:                    if (o->oTimer >= 20) {
src/game/behaviors/flying_bookend_switch.inc.c:                        approach_f32_ptr(&o->header.gfx.scale[0], 3.0f, 0.2f);
src/game/behaviors/flying_bookend_switch.inc.c:    if (o->oForwardVel == 0.0f) {
src/game/behaviors/flying_bookend_switch.inc.c:        o->oFaceAnglePitch = o->oMoveAnglePitch + 0x7FFF;
src/game/behaviors/flying_bookend_switch.inc.c:        cur_obj_rotate_yaw_toward(o->oAngleToMario, 1000);
src/game/behaviors/flying_bookend_switch.inc.c:        if (o->oTimer > 30) {
src/game/behaviors/flying_bookend_switch.inc.c:    o->oDamageOrCoinValue = 1;
src/game/behaviors/flying_bookend_switch.inc.c:    o->oNumLootCoins = 0;
src/game/behaviors/flying_bookend_switch.inc.c:    if (o->oTimer >= 4) {
src/game/behaviors/flying_bookend_switch.inc.c:        o->oAction = 2;
src/game/behaviors/flying_bookend_switch.inc.c:        o->oForwardVel = 50.0f;
src/game/behaviors/flying_bookend_switch.inc.c:    if (!(o->activeFlags & ACTIVE_FLAG_IN_DIFFERENT_ROOM)) {
src/game/behaviors/flying_bookend_switch.inc.c:        o->oDeathSound = SOUND_OBJ_POUNDING1;
src/game/behaviors/flying_bookend_switch.inc.c:        cur_obj_scale(o->header.gfx.scale[0]);
src/game/behaviors/flying_bookend_switch.inc.c:        switch (o->oAction) {
src/game/behaviors/flying_bookend_switch.inc.c:        if (o->oAction == -1 || (o->oMoveFlags & 0x00000203)) {
src/game/behaviors/flying_bookend_switch.inc.c:            o->oNumLootCoins = 0;
src/game/behaviors/flying_bookend_switch.inc.c:        o->oGraphYOffset = 30.0f * o->header.gfx.scale[0];
src/game/behaviors/flying_bookend_switch.inc.c:    if (!(o->activeFlags & ACTIVE_FLAG_IN_DIFFERENT_ROOM)) {
src/game/behaviors/flying_bookend_switch.inc.c:        if (o->oTimer > 40 && obj_is_near_to_and_facing_mario(600.0f, 0x2000)) {
src/game/behaviors/flying_bookend_switch.inc.c:            o->oTimer = 0;
src/game/behaviors/flying_bookend_switch.inc.c:    if (!(o->activeFlags & ACTIVE_FLAG_IN_DIFFERENT_ROOM)) {
src/game/behaviors/flying_bookend_switch.inc.c:        o->oAction = 1;
src/game/behaviors/flying_bookend_switch.inc.c:    if (o->oBookSwitchManagerUnkF8 == 0) {
src/game/behaviors/flying_bookend_switch.inc.c:            o->oBookSwitchManagerUnkF8 = 1;
src/game/behaviors/flying_bookend_switch.inc.c:    } else if (o->oTimer > 60) {
src/game/behaviors/flying_bookend_switch.inc.c:        o->oAction = 2;
src/game/behaviors/flying_bookend_switch.inc.c:        o->oBookSwitchManagerUnkF8 = 0;
src/game/behaviors/flying_bookend_switch.inc.c:    if (!(o->activeFlags & ACTIVE_FLAG_IN_DIFFERENT_ROOM)) {
src/game/behaviors/flying_bookend_switch.inc.c:        if (o->oBookSwitchManagerUnkF4 < 0) {
src/game/behaviors/flying_bookend_switch.inc.c:            if (o->oTimer > 30) {
src/game/behaviors/flying_bookend_switch.inc.c:                o->oBookSwitchManagerUnkF4 = o->oBookSwitchManagerUnkF8 = 0;
src/game/behaviors/flying_bookend_switch.inc.c:            } else if (o->oTimer > 10) {
src/game/behaviors/flying_bookend_switch.inc.c:                o->oBookSwitchManagerUnkF8 = 1;
src/game/behaviors/flying_bookend_switch.inc.c:            if (o->oBookSwitchManagerUnkF4 >= 3) {
src/game/behaviors/flying_bookend_switch.inc.c:                if (o->oTimer > 100) {
src/game/behaviors/flying_bookend_switch.inc.c:                    o->parentObj = cur_obj_nearest_object_with_behavior(bhvHauntedBookshelf);
src/game/behaviors/flying_bookend_switch.inc.c:                    o->parentObj->oAction = 1;
src/game/behaviors/flying_bookend_switch.inc.c:                    o->oPosX = o->parentObj->oPosX;
src/game/behaviors/flying_bookend_switch.inc.c:                    o->oAction = 3;
src/game/behaviors/flying_bookend_switch.inc.c:                } else if (o->oTimer == 30) {
src/game/behaviors/flying_bookend_switch.inc.c:                o->oTimer = 0;
src/game/behaviors/flying_bookend_switch.inc.c:        o->oAction = 4;
src/game/behaviors/flying_bookend_switch.inc.c:    if (o->oTimer > 85) {
src/game/behaviors/flying_bookend_switch.inc.c:        o->oAction = 4;
src/game/behaviors/flying_bookend_switch.inc.c:        o->oForwardVel = o->parentObj->oPosX - o->oPosX;
src/game/behaviors/flying_bookend_switch.inc.c:        o->oPosX = o->parentObj->oPosX;
src/game/behaviors/flying_bookend_switch.inc.c:    if (o->oBookSwitchManagerUnkF4 >= 3) {
src/game/behaviors/flying_bookend_switch.inc.c:        o->oAction = 0;
src/game/behaviors/flying_bookend_switch.inc.c:    switch (o->oAction) {
src/game/behaviors/flying_bookend_switch.inc.c:    o->header.gfx.scale[0] = 2.0f;
src/game/behaviors/flying_bookend_switch.inc.c:    o->header.gfx.scale[1] = 0.9f;
src/game/behaviors/flying_bookend_switch.inc.c:    if (o->parentObj->oAction == 4) {
src/game/behaviors/flying_bookend_switch.inc.c:        sp3C = obj_check_attacks(&sBookSwitchHitbox, o->oAction);
src/game/behaviors/flying_bookend_switch.inc.c:        if (o->parentObj->oBookSwitchManagerUnkF8 != 0 || o->oAction == 1) {
src/game/behaviors/flying_bookend_switch.inc.c:            if (o->oDistanceToMario < 100.0f) {
src/game/behaviors/flying_bookend_switch.inc.c:            o->oAction = 1;
src/game/behaviors/flying_bookend_switch.inc.c:            if (o->oBookSwitchUnkF4 == 0.0f) {
src/game/behaviors/flying_bookend_switch.inc.c:            if (approach_f32_ptr(&o->oBookSwitchUnkF4, 50.0f, 20.0f)) {
src/game/behaviors/flying_bookend_switch.inc.c:                if (o->parentObj->oBookSwitchManagerUnkF4 >= 0 && o->oTimer > 60) {
src/game/behaviors/flying_bookend_switch.inc.c:                        o->oAction = 2;
src/game/behaviors/flying_bookend_switch.inc.c:                o->oTimer = 0;
src/game/behaviors/flying_bookend_switch.inc.c:            if (approach_f32_ptr(&o->oBookSwitchUnkF4, 0.0f, 20.0f)) {
src/game/behaviors/flying_bookend_switch.inc.c:                if (o->oAction != 0) {
src/game/behaviors/flying_bookend_switch.inc.c:                    if (o->parentObj->oBookSwitchManagerUnkF4 == o->oBehParams2ndByte) {
src/game/behaviors/flying_bookend_switch.inc.c:                        o->parentObj->oBookSwitchManagerUnkF4 += 1;
src/game/behaviors/flying_bookend_switch.inc.c:                        o->parentObj->oBookSwitchManagerUnkF4 = -1;
src/game/behaviors/flying_bookend_switch.inc.c:                    o->oAction = 0;
src/game/behaviors/flying_bookend_switch.inc.c:        o->oPosX += o->parentObj->oForwardVel;
src/game/behaviors/flying_bookend_switch.inc.c:        o->oPosZ = o->oHomeZ - o->oBookSwitchUnkF4;
src/game/behaviors/fly_guy.inc.c:    o->oForwardVel = 0.0f;
src/game/behaviors/fly_guy.inc.c:    if (approach_f32_ptr(&o->header.gfx.scale[0], 1.0f, 0.02f)) {
src/game/behaviors/fly_guy.inc.c:        if (o->oDistanceToMario >= 25000.0f || o->oDistanceToMario < 2000.0f) {
src/game/behaviors/fly_guy.inc.c:            obj_face_yaw_approach(o->oAngleToMario, 0x300);
src/game/behaviors/fly_guy.inc.c:            if (cur_obj_rotate_yaw_toward(o->oAngleToMario, 0x300)) {
src/game/behaviors/fly_guy.inc.c:                o->oAction = FLY_GUY_ACT_APPROACH_MARIO;
src/game/behaviors/fly_guy.inc.c:            if (o->oFlyGuyIdleTimer >= 3 || o->oFlyGuyIdleTimer == (random_u16() & 1) + 2) {
src/game/behaviors/fly_guy.inc.c:                o->oFlyGuyIdleTimer = 0;
src/game/behaviors/fly_guy.inc.c:                o->oAction = FLY_GUY_ACT_APPROACH_MARIO;
src/game/behaviors/fly_guy.inc.c:                o->oFlyGuyUnusedJitter = o->oMoveAngleYaw + sFlyGuyJitterAmounts[o->oFlyGuyIdleTimer];
src/game/behaviors/fly_guy.inc.c:                o->oFlyGuyIdleTimer += 1;
src/game/behaviors/fly_guy.inc.c:    if (o->oDistanceToMario >= 25000.0f || o->oDistanceToMario < 2000.0f) {
src/game/behaviors/fly_guy.inc.c:        obj_face_yaw_approach(o->oAngleToMario, 0x400);
src/game/behaviors/fly_guy.inc.c:        cur_obj_rotate_yaw_toward(o->oAngleToMario, 0x200);
src/game/behaviors/fly_guy.inc.c:        if (abs_angle_diff(o->oAngleToMario, o->oFaceAngleYaw) < 0x2000) {
src/game/behaviors/fly_guy.inc.c:            if (o->oPosY - gMarioObject->oPosY > 400.0f || o->oDistanceToMario < 400.0f) {
src/game/behaviors/fly_guy.inc.c:                if (o->oBehParams2ndByte != 0 && random_u16() % 2) {
src/game/behaviors/fly_guy.inc.c:                    o->oAction = FLY_GUY_ACT_SHOOT_FIRE;
src/game/behaviors/fly_guy.inc.c:                    o->oFlyGuyScaleVel = 0.06f;
src/game/behaviors/fly_guy.inc.c:                    o->oAction = FLY_GUY_ACT_LUNGE;
src/game/behaviors/fly_guy.inc.c:                    o->oFlyGuyLungeTargetPitch = obj_turn_pitch_toward_mario(-200.0f, 0);
src/game/behaviors/fly_guy.inc.c:                    o->oForwardVel = 25.0f * coss(o->oFlyGuyLungeTargetPitch);
src/game/behaviors/fly_guy.inc.c:                    o->oVelY = 25.0f * -sins(o->oFlyGuyLungeTargetPitch);
src/game/behaviors/fly_guy.inc.c:                    o->oFlyGuyLungeYDecel = -o->oVelY / 30.0f;
src/game/behaviors/fly_guy.inc.c:        o->oAction = FLY_GUY_ACT_IDLE;
src/game/behaviors/fly_guy.inc.c:    if (o->oVelY < 0.0f) {
src/game/behaviors/fly_guy.inc.c:        o->oVelY += o->oFlyGuyLungeYDecel;
src/game/behaviors/fly_guy.inc.c:        cur_obj_rotate_yaw_toward(o->oFaceAngleYaw, 0x800);
src/game/behaviors/fly_guy.inc.c:        obj_face_pitch_approach(o->oFlyGuyLungeTargetPitch, 0x400);
src/game/behaviors/fly_guy.inc.c:        o->oFlyGuyTargetRoll = 0x1000 * (s16)(random_float() * 3.0f) - 0x1000;
src/game/behaviors/fly_guy.inc.c:        o->oTimer = 0;
src/game/behaviors/fly_guy.inc.c:        obj_face_roll_approach(o->oFlyGuyTargetRoll, 0x12C);
src/game/behaviors/fly_guy.inc.c:        o->oMoveAngleYaw -= o->oFaceAngleRoll / 4;
src/game/behaviors/fly_guy.inc.c:        obj_face_yaw_approach(o->oMoveAngleYaw, 0x800);
src/game/behaviors/fly_guy.inc.c:        if (o->oPosY < gMarioObject->oPosY + 200.0f) {
src/game/behaviors/fly_guy.inc.c:            if (o->oFaceAngleRoll == 0) {
src/game/behaviors/fly_guy.inc.c:                o->oAction = FLY_GUY_ACT_APPROACH_MARIO;
src/game/behaviors/fly_guy.inc.c:            o->oFlyGuyTargetRoll = 0;
src/game/behaviors/fly_guy.inc.c:    o->oForwardVel = 0.0f;
src/game/behaviors/fly_guy.inc.c:    if (obj_face_yaw_approach(o->oAngleToMario, 0x800)) {
src/game/behaviors/fly_guy.inc.c:        o->oMoveAngleYaw = o->oFaceAngleYaw;
src/game/behaviors/fly_guy.inc.c:        scaleStatus = obj_grow_then_shrink(&o->oFlyGuyScaleVel, 1.2f, 1.1f);
src/game/behaviors/fly_guy.inc.c:                o->oAction = FLY_GUY_ACT_IDLE;
src/game/behaviors/fly_guy.inc.c:                //o->oMoveAngleYaw = o->oFaceAngleYaw;
src/game/behaviors/fly_guy.inc.c:        o->oTimer = 0;
src/game/behaviors/fly_guy.inc.c:    if (!(o->activeFlags & ACTIVE_FLAG_IN_DIFFERENT_ROOM)) {
src/game/behaviors/fly_guy.inc.c:        o->oDeathSound = SOUND_OBJ_KOOPA_FLYGUY_DEATH;
src/game/behaviors/fly_guy.inc.c:        cur_obj_scale(o->header.gfx.scale[0]);
src/game/behaviors/fly_guy.inc.c:        if (o->oMoveFlags & OBJ_MOVE_HIT_WALL) {
src/game/behaviors/fly_guy.inc.c:            o->oMoveAngleYaw = cur_obj_reflect_move_angle_off_wall();
src/game/behaviors/fly_guy.inc.c:        } else if (o->oMoveFlags & OBJ_MOVE_MASK_IN_WATER) {
src/game/behaviors/fly_guy.inc.c:            o->oVelY = 6.0f;
src/game/behaviors/fly_guy.inc.c:        o->oFlyGuyOscTimer += 1;
src/game/behaviors/fly_guy.inc.c:        o->oPosY += coss(0x400 * o->oFlyGuyOscTimer) * 1.5f;
src/game/behaviors/fly_guy.inc.c:        switch (o->oAction) {
src/game/behaviors/fly_guy.inc.c:            o->oHomeX = gMarioState->pos[0];
src/game/behaviors/fly_guy.inc.c:            o->oHomeY = gMarioState->pos[1];
src/game/behaviors/fly_guy.inc.c:            o->oHomeZ = gMarioState->pos[2];
src/game/behaviors/fly_guy.inc.c:            if (o->oDistanceToMario > 800.0f) {
src/game/behaviors/fly_guy.inc.c:                o->oFaceAngleYaw = o->oAngleToMario;
src/game/behaviors/fly_guy.inc.c:                o->oMoveAngleYaw = o->oAngleToMario;
src/game/behaviors/fly_guy.inc.c:                o->oForwardVel = 15.0f;
src/game/behaviors/fly_guy.inc.c:                o->oDrawingDistance = 9000.0f;
src/game/behaviors/fly_guy.inc.c:        obj_check_attacks(&sFlyGuyHitbox, o->oAction);
src/game/behaviors/goomba.inc.c:    if (o->oAction == GOOMBA_TRIPLET_SPAWNER_ACT_UNLOADED) {
src/game/behaviors/goomba.inc.c:        if (o->oDistanceToMario < 3000.0f) {
src/game/behaviors/goomba.inc.c:                / (((o->oBehParams2ndByte & GOOMBA_TRIPLET_SPAWNER_BP_EXTRA_GOOMBAS_MASK) >> 2) + 3);
src/game/behaviors/goomba.inc.c:                if (!(o->oBehParams & goombaFlag)) {
src/game/behaviors/goomba.inc.c:                    spawn_object_relative((o->oBehParams2ndByte & GOOMBA_TRIPLET_SPAWNER_BP_SIZE_MASK)
src/game/behaviors/goomba.inc.c:            o->oAction += 1;
src/game/behaviors/goomba.inc.c:    } else if (o->oDistanceToMario > 4000.0f) {
src/game/behaviors/goomba.inc.c:        o->oAction = GOOMBA_TRIPLET_SPAWNER_ACT_UNLOADED;
src/game/behaviors/goomba.inc.c:    o->oGoombaSize = o->oBehParams2ndByte & GOOMBA_BP_SIZE_MASK;
src/game/behaviors/goomba.inc.c:    o->oGoombaScale = sGoombaProperties[o->oGoombaSize].scale;
src/game/behaviors/goomba.inc.c:    o->oDeathSound = sGoombaProperties[o->oGoombaSize].deathSound;
src/game/behaviors/goomba.inc.c:    o->oDrawingDistance = sGoombaProperties[o->oGoombaSize].drawDistance;
src/game/behaviors/goomba.inc.c:    o->oDamageOrCoinValue = sGoombaProperties[o->oGoombaSize].damage;
src/game/behaviors/goomba.inc.c:    o->oGravity = -8.0f / 3.0f * o->oGoombaScale;
src/game/behaviors/goomba.inc.c:    o->oAction = GOOMBA_ACT_JUMP;
src/game/behaviors/goomba.inc.c:    o->oForwardVel = 0.0f;
src/game/behaviors/goomba.inc.c:    o->oVelY = 50.0f / 3.0f * o->oGoombaScale;
src/game/behaviors/goomba.inc.c:    if (o->parentObj != o) {
src/game/behaviors/goomba.inc.c:        set_object_respawn_info_bits(o->parentObj,(o->oBehParams2ndByte & GOOMBA_BP_TRIPLET_FLAG_MASK) >> 2);o->parentObj->oBehParams =o->parentObj->oBehParams | (o->oBehParams2ndByte & GOOMBA_BP_TRIPLET_FLAG_MASK) << 6;
src/game/behaviors/goomba.inc.c:    obj_forward_vel_approach(o->oGoombaRelativeSpeed * o->oGoombaScale, 0.4f);
src/game/behaviors/goomba.inc.c:    if (o->oGoombaRelativeSpeed > 4.0f / 3.0f) {
src/game/behaviors/goomba.inc.c:    if (o->oGoombaTurningAwayFromWall) {
src/game/behaviors/goomba.inc.c:        o->oGoombaTurningAwayFromWall = obj_resolve_collisions_and_turn(o->oGoombaTargetYaw, 0x200);
src/game/behaviors/goomba.inc.c:        if (o->oDistanceToMario >= 25000.0f) {
src/game/behaviors/goomba.inc.c:            o->oGoombaTargetYaw = o->oAngleToMario;
src/game/behaviors/goomba.inc.c:            o->oGoombaWalkTimer = random_linear_offset(20, 30);
src/game/behaviors/goomba.inc.c:        if (!(o->oGoombaTurningAwayFromWall =
src/game/behaviors/goomba.inc.c:                  obj_bounce_off_walls_edges_objects(&o->oGoombaTargetYaw))) {
src/game/behaviors/goomba.inc.c:            if (o->oDistanceToMario < 500.0f) {
src/game/behaviors/goomba.inc.c:                if (o->oGoombaRelativeSpeed <= 2.0f) {
src/game/behaviors/goomba.inc.c:                o->oGoombaTargetYaw = o->oAngleToMario;
src/game/behaviors/goomba.inc.c:                o->oGoombaRelativeSpeed = 20.0f;
src/game/behaviors/goomba.inc.c:                o->oGoombaRelativeSpeed = 4.0f / 3.0f;
src/game/behaviors/goomba.inc.c:                if (o->oGoombaWalkTimer != 0) {
src/game/behaviors/goomba.inc.c:                    o->oGoombaWalkTimer -= 1;
src/game/behaviors/goomba.inc.c:                        o->oGoombaTargetYaw = obj_random_fixed_turn(0x2000);
src/game/behaviors/goomba.inc.c:                        o->oGoombaWalkTimer = random_linear_offset(100, 100);
src/game/behaviors/goomba.inc.c:                        o->oGoombaTargetYaw = obj_random_fixed_turn(0x6000);
src/game/behaviors/goomba.inc.c:        cur_obj_rotate_yaw_toward(o->oGoombaTargetYaw, 0x200);
src/game/behaviors/goomba.inc.c:    if (o->oGoombaSize == GOOMBA_SIZE_TINY) {
src/game/behaviors/goomba.inc.c:        o->oNumLootCoins = 0;
src/game/behaviors/goomba.inc.c:        o->oGoombaTargetYaw = o->oAngleToMario;
src/game/behaviors/goomba.inc.c:        o->oGoombaTurningAwayFromWall = FALSE;
src/game/behaviors/goomba.inc.c:    if (o->oMoveFlags & OBJ_MOVE_MASK_ON_GROUND) {
src/game/behaviors/goomba.inc.c:        o->oAction = GOOMBA_ACT_WALK;
src/game/behaviors/goomba.inc.c:        cur_obj_rotate_yaw_toward(o->oGoombaTargetYaw, 0x800);
src/game/behaviors/goomba.inc.c:    o->oAction = GOOMBA_ACT_ATTACKED_MARIO;
src/game/behaviors/goomba.inc.c:        o->oHomeX = gMarioState->pos[0];
src/game/behaviors/goomba.inc.c:        o->oHomeY = gMarioState->pos[1];
src/game/behaviors/goomba.inc.c:        o->oHomeZ = gMarioState->pos[2];
src/game/behaviors/goomba.inc.c:        if (o->oDistanceToMario > 800.0f) {
src/game/behaviors/goomba.inc.c:            o->oFaceAngleYaw = o->oAngleToMario;
src/game/behaviors/goomba.inc.c:            o->oMoveAngleYaw = o->oAngleToMario;
src/game/behaviors/goomba.inc.c:            o->oForwardVel = 15.0f;
src/game/behaviors/goomba.inc.c:            o->oDrawingDistance = 9000.0f;
src/game/behaviors/goomba.inc.c:    if (obj_update_standard_actions(o->oGoombaScale)) {
src/game/behaviors/goomba.inc.c:        if (o->parentObj->behavior == bhvGoombaTripletSpawner) {
src/game/behaviors/goomba.inc.c:            if (o->parentObj->oAction == GOOMBA_TRIPLET_SPAWNER_ACT_UNLOADED) {
src/game/behaviors/goomba.inc.c:        //cur_obj_scale(o->oGoombaScale);
src/game/behaviors/goomba.inc.c:        obj_update_blinking(&o->oGoombaBlinkTimer, 30, 50, 5);
src/game/behaviors/goomba.inc.c:        if ((animSpeed = o->oForwardVel / o->oGoombaScale * 0.4f) < 1.0f) {
src/game/behaviors/goomba.inc.c:        switch (o->oAction) {
src/game/behaviors/goomba.inc.c:        if (o->oHealth == 1) {
src/game/behaviors/goomba.inc.c:            o->oDamageOrCoinValue = 2;
src/game/behaviors/goomba.inc.c:            o->oNumLootCoins = 2;
src/game/behaviors/goomba.inc.c:        if (o->oNumLootCoins == 2) {
src/game/behaviors/goomba.inc.c:            o->oAnimState = 0;
src/game/behaviors/goomba.inc.c:            o->oAnimState = 1;
src/game/behaviors/goomba.inc.c:            o->oNumLootCoins = -1;
src/game/behaviors/goomba.inc.c:            o->oForwardVel = 0;
src/game/behaviors/goomba.inc.c:            if (o->oSubAction == 0) {
src/game/behaviors/goomba.inc.c:                if (o->oTimer > 120) {
src/game/behaviors/goomba.inc.c:                    o->oSubAction = 1;
src/game/behaviors/goomba.inc.c:                    o->oTimer = RandomMinMaxU16(0,60);
src/game/behaviors/goomba.inc.c:            if (o->oSubAction == 1) {
src/game/behaviors/goomba.inc.c:                if (o->oDistanceToMario < 4500.0f) {
src/game/behaviors/goomba.inc.c:                    o->oGoombaTargetYaw = o->oAngleToMario;
src/game/behaviors/goomba.inc.c:                if (o->oTimer > 120) {
src/game/behaviors/goomba.inc.c:                    o->oSubAction = 0;
src/game/behaviors/goomba.inc.c:                    o->oTimer = RandomMinMaxU16(30,90);
src/game/behaviors/goomba.inc.c:                               sGoombaAttackHandlers[o->oGoombaSize & 1])) {
src/game/behaviors/goomba.inc.c:            o->oPosZ = 0.0f;
src/game/behaviors/goomba.inc.c:        o->oAnimState = TRUE;
src/game/behaviors/grand_star.inc.c:    o->oMoveAngleYaw = atan2s(dz, dx);
src/game/behaviors/grand_star.inc.c:    o->oVelY = yVel;
src/game/behaviors/grand_star.inc.c:    o->oGravity = gravity;
src/game/behaviors/grand_star.inc.c:    time = -2.0f / o->oGravity * yVel - 1.0f;
src/game/behaviors/grand_star.inc.c:    o->oForwardVel = planarDist / time;
src/game/behaviors/grand_star.inc.c:    o->oGravity = 0.0f;
src/game/behaviors/grand_star.inc.c:    o->oVelY = 0.0f;
src/game/behaviors/grand_star.inc.c:    o->oForwardVel = 0.0f;
src/game/behaviors/grand_star.inc.c:    if (o->oAction == 0) {
src/game/behaviors/grand_star.inc.c:        if (o->oTimer == 0) {
src/game/behaviors/grand_star.inc.c:            o->oAngleVelYaw = 0x400;
src/game/behaviors/grand_star.inc.c:        if (o->oTimer > 70)
src/game/behaviors/grand_star.inc.c:            o->oAction++;
src/game/behaviors/grand_star.inc.c:    } else if (o->oAction == 1) {
src/game/behaviors/grand_star.inc.c:        if (o->oTimer == 0) {
src/game/behaviors/grand_star.inc.c:            o->oGrandStarUnk108 = arc_to_goal_pos(sp28, &o->oPosX, 80.0f, -2.0f);
src/game/behaviors/grand_star.inc.c:        if (o->oSubAction == 0) {
src/game/behaviors/grand_star.inc.c:            if (o->oPosY < o->oHomeY) {
src/game/behaviors/grand_star.inc.c:                o->oPosY = o->oHomeY;
src/game/behaviors/grand_star.inc.c:                o->oVelY = 60.0f;
src/game/behaviors/grand_star.inc.c:                o->oForwardVel = 0.0f;
src/game/behaviors/grand_star.inc.c:                o->oSubAction++;
src/game/behaviors/grand_star.inc.c:        } else if (o->oVelY < 0.0f && o->oPosY < o->oHomeY + 200.0f) {
src/game/behaviors/grand_star.inc.c:            o->oPosY = o->oHomeY + 200.0f;
src/game/behaviors/grand_star.inc.c:            o->oAction++;
src/game/behaviors/grand_star.inc.c:            o->oInteractStatus = 0;
src/game/behaviors/grand_star.inc.c:        if (o->oInteractStatus & INT_STATUS_INTERACTED) {
src/game/behaviors/grand_star.inc.c:            o->oInteractStatus = 0;
src/game/behaviors/grand_star.inc.c:    if (o->oAngleVelYaw > 0x400)
src/game/behaviors/grand_star.inc.c:        o->oAngleVelYaw -= 0x100;
src/game/behaviors/grand_star.inc.c:    o->oFaceAngleYaw += o->oAngleVelYaw;
src/game/behaviors/grand_star.inc.c:    o->oGraphYOffset = 110.0f;
src/game/behaviors/grill_door.inc.c:    switch (o->oAction) {
src/game/behaviors/grill_door.inc.c:            grillIdx = o->oBehParams2ndByte;
src/game/behaviors/grill_door.inc.c:            o->oAction++;
src/game/behaviors/grill_door.inc.c:            if ((o->oOpenableGrillUnkF4 = cur_obj_nearest_object_with_behavior(bhvFloorSwitchGrills))
src/game/behaviors/grill_door.inc.c:                o->oAction++;
src/game/behaviors/grill_door.inc.c:            grillObj = o->oOpenableGrillUnkF4;
src/game/behaviors/grill_door.inc.c:                o->oOpenableGrillUnk88 = 2;
src/game/behaviors/grill_door.inc.c:                o->oAction++;
src/game/behaviors/grill_door.inc.c:                if (o->oBehParams2ndByte != 0)
src/game/behaviors/ground_particles.inc.c:    o->parentObj->oActiveParticleFlags &= flags ^ -1; // Clear the flags given (could just be ~flags)
src/game/behaviors/haunted_chair.inc.c:        o->parentObj = val04;
src/game/behaviors/haunted_chair.inc.c:        o->oHauntedChairUnkF4 = 1;
src/game/behaviors/haunted_chair.inc.c:    if (o->parentObj != o) {
src/game/behaviors/haunted_chair.inc.c:        if (o->oHauntedChairUnk104 == 0) {
src/game/behaviors/haunted_chair.inc.c:            if (lateral_dist_between_objects(o, o->parentObj) < 250.0f) {
src/game/behaviors/haunted_chair.inc.c:                val0E = obj_angle_to_object(o, o->parentObj) - o->oFaceAngleYaw + 0x2000;
src/game/behaviors/haunted_chair.inc.c:                    o->oHauntedChairUnk100 = &o->oFaceAngleRoll;
src/game/behaviors/haunted_chair.inc.c:                        o->oHauntedChairUnk104 = 0x4000;
src/game/behaviors/haunted_chair.inc.c:                        o->oHauntedChairUnk104 = -0x4000;
src/game/behaviors/haunted_chair.inc.c:                    o->oHauntedChairUnk100 = &o->oFaceAnglePitch;
src/game/behaviors/haunted_chair.inc.c:                        o->oHauntedChairUnk104 = 0x5000;
src/game/behaviors/haunted_chair.inc.c:                        o->oHauntedChairUnk104 = -0x4000;
src/game/behaviors/haunted_chair.inc.c:                if (o->oHauntedChairUnk104 < 0) {
src/game/behaviors/haunted_chair.inc.c:                    o->oHauntedChairUnkF8 = -1500.0f;
src/game/behaviors/haunted_chair.inc.c:                    o->oHauntedChairUnkF8 = 1500.0f;
src/game/behaviors/haunted_chair.inc.c:            oscillate_toward(o->oHauntedChairUnk100, &o->oHauntedChairUnkF8, o->oHauntedChairUnk104,
src/game/behaviors/haunted_chair.inc.c:    } else if (o->oHauntedChairUnkF4 != 0) {
src/game/behaviors/haunted_chair.inc.c:        if (o->oDistanceToMario < 500.0f) {
src/game/behaviors/haunted_chair.inc.c:            o->oHauntedChairUnkF4 -= 1;
src/game/behaviors/haunted_chair.inc.c:        o->oTimer = 0.0f;
src/game/behaviors/haunted_chair.inc.c:        if ((o->oTimer & 0x8) != 0) {
src/game/behaviors/haunted_chair.inc.c:            if (o->oFaceAnglePitch < 0) {
src/game/behaviors/haunted_chair.inc.c:            o->oHomeX -= val08;
src/game/behaviors/haunted_chair.inc.c:            o->oHomeZ -= val08;
src/game/behaviors/haunted_chair.inc.c:            o->oFaceAnglePitch = o->oFaceAngleRoll = (s32)(50.0f * val08);
src/game/behaviors/haunted_chair.inc.c:            o->oFaceAnglePitch = o->oFaceAngleRoll = 0;
src/game/behaviors/haunted_chair.inc.c:        if (o->oTimer > 30) {
src/game/behaviors/haunted_chair.inc.c:            o->oAction = 1;
src/game/behaviors/haunted_chair.inc.c:            o->oHauntedChairUnkF8 = 0.0f;
src/game/behaviors/haunted_chair.inc.c:            o->oHauntedChairUnkFC = 200.0f;
src/game/behaviors/haunted_chair.inc.c:            o->oHauntedChairUnkF4 = 40;
src/game/behaviors/haunted_chair.inc.c:    if (o->oTimer < 70) {
src/game/behaviors/haunted_chair.inc.c:        if (o->oTimer < 50) {
src/game/behaviors/haunted_chair.inc.c:            o->oVelY = 6.0f;
src/game/behaviors/haunted_chair.inc.c:            o->oVelY = 0.0f;
src/game/behaviors/haunted_chair.inc.c:        o->oGravity = 0.0f;
src/game/behaviors/haunted_chair.inc.c:        oscillate_toward(&o->oFaceAnglePitch, &o->oHauntedChairUnkF8, -4000, 200.0f, 20.0f, 2.0f);
src/game/behaviors/haunted_chair.inc.c:        oscillate_toward(&o->oFaceAngleRoll, &o->oHauntedChairUnkFC, 0, 0.0f, 20.0f, 1.0f);
src/game/behaviors/haunted_chair.inc.c:        if (o->oHauntedChairUnkF4 != 0) {
src/game/behaviors/haunted_chair.inc.c:            if (--o->oHauntedChairUnkF4 == 0) {
src/game/behaviors/haunted_chair.inc.c:                o->oMoveAnglePitch = obj_turn_pitch_toward_mario(120.0f, 0);
src/game/behaviors/haunted_chair.inc.c:                o->oMoveAngleYaw = o->oAngleToMario;
src/game/behaviors/haunted_chair.inc.c:            } else if (o->oHauntedChairUnkF4 > 20) {
src/game/behaviors/haunted_chair.inc.c:                o->oFaceAngleYaw += 0x2710;
src/game/behaviors/haunted_chair.inc.c:        } else if (o->oMoveFlags & 0x00000203) {
src/game/behaviors/haunted_chair.inc.c:    obj_check_attacks(&sHauntedChairHitbox, o->oAction);
src/game/behaviors/haunted_chair.inc.c:    if (!(o->activeFlags & ACTIVE_FLAG_IN_DIFFERENT_ROOM)) {
src/game/behaviors/haunted_chair.inc.c:        switch (o->oAction) {
src/game/behaviors/heave_ho.inc.c:    o->oParentRelativePosX = 200.0f;
src/game/behaviors/heave_ho.inc.c:    o->oParentRelativePosY = -50.0f;
src/game/behaviors/heave_ho.inc.c:    o->oParentRelativePosZ = 0.0f;
src/game/behaviors/heave_ho.inc.c:    o->oMoveAngleYaw = o->parentObj->oMoveAngleYaw;
src/game/behaviors/heave_ho.inc.c:    switch (o->parentObj->oHeaveHoUnk88) {
src/game/behaviors/heave_ho.inc.c:            o->parentObj->oHeaveHoUnk88 = 0;
src/game/behaviors/heave_ho.inc.c:    o->oForwardVel = 0.0f;
src/game/behaviors/heave_ho.inc.c:            o->oAction = 2;
src/game/behaviors/heave_ho.inc.c:        if (o->oTimer < D_8032F460[sp1C][0]) {
src/game/behaviors/heave_ho.inc.c:        o->oAngleToMario = cur_obj_angle_to_home();
src/game/behaviors/heave_ho.inc.c:    if (o->oTimer > 150) {
src/game/behaviors/heave_ho.inc.c:        o->oHeaveHoUnkF4 = (302 - o->oTimer) / 152.0f;
src/game/behaviors/heave_ho.inc.c:        if (o->oHeaveHoUnkF4 < 0.1) {
src/game/behaviors/heave_ho.inc.c:            o->oHeaveHoUnkF4 = 0.1;
src/game/behaviors/heave_ho.inc.c:            o->oAction = 1;
src/game/behaviors/heave_ho.inc.c:        o->oHeaveHoUnkF4 = 1.0f;
src/game/behaviors/heave_ho.inc.c:    cur_obj_init_animation_with_accel_and_sound(0, o->oHeaveHoUnkF4);
src/game/behaviors/heave_ho.inc.c:    o->oForwardVel = o->oHeaveHoUnkF4 * 10.0f;
src/game/behaviors/heave_ho.inc.c:    angleVel = o->oHeaveHoUnkF4 * 0x400;
src/game/behaviors/heave_ho.inc.c:    o->oMoveAngleYaw = approach_s16_symmetric(o->oMoveAngleYaw, o->oAngleToMario, angleVel);
src/game/behaviors/heave_ho.inc.c:    o->oForwardVel = 0.0f;
src/game/behaviors/heave_ho.inc.c:    if (o->oTimer == 0)
src/game/behaviors/heave_ho.inc.c:        o->oHeaveHoUnk88 = 2;
src/game/behaviors/heave_ho.inc.c:    if (o->oTimer == 1) {
src/game/behaviors/heave_ho.inc.c:        o->numCollidedObjs = 20;
src/game/behaviors/heave_ho.inc.c:        o->oAction = 1;
src/game/behaviors/heave_ho.inc.c:    if (find_water_level(o->oPosX, o->oPosZ) < o->oPosY && o->oDistanceToMario < 4000.0f) {
src/game/behaviors/heave_ho.inc.c:        o->oAction = 1;
src/game/behaviors/heave_ho.inc.c:    if (o->oMoveFlags & (0x40 | 0x20 | 0x10 | 0x8))
src/game/behaviors/heave_ho.inc.c:        o->oGraphYOffset = -15.0f;
src/game/behaviors/heave_ho.inc.c:        o->oGraphYOffset = 0.0f;
src/game/behaviors/heave_ho.inc.c:    if (o->oForwardVel > 3.0f)
src/game/behaviors/heave_ho.inc.c:    if (o->oAction != 0 && o->oMoveFlags & (0x40 | 0x20 | 0x10 | 0x8))
src/game/behaviors/heave_ho.inc.c:        o->oAction = 0;
src/game/behaviors/heave_ho.inc.c:    if (o->oInteractStatus & INT_STATUS_GRABBED_MARIO) {
src/game/behaviors/heave_ho.inc.c:        o->oInteractStatus = 0;
src/game/behaviors/heave_ho.inc.c:        o->oHeaveHoUnk88 = 1;
src/game/behaviors/heave_ho.inc.c:        o->oAction = 3;
src/game/behaviors/heave_ho.inc.c:    switch (o->oHeldState) {
src/game/behaviors/heave_ho.inc.c:    o->oInteractStatus = 0;
src/game/behaviors/hidden_star.inc.c:            spawn_object_abs_with_rot(o, 0, MODEL_STAR, bhvStar, o->oPosX, o->oPosY, o->oPosZ, 0, 0, 0);
src/game/behaviors/hidden_star.inc.c:        sp30->oBehParams = o->oBehParams;
src/game/behaviors/hidden_star.inc.c:        o->activeFlags = ACTIVE_FLAG_DEACTIVATED;
src/game/behaviors/hidden_star.inc.c:    o->oHiddenStarTriggerCounter = 5 - sp36;
src/game/behaviors/hidden_star.inc.c:    switch (o->oAction) {
src/game/behaviors/hidden_star.inc.c:            if (o->oHiddenStarTriggerCounter == 5)
src/game/behaviors/hidden_star.inc.c:                o->oAction = 1;
src/game/behaviors/hidden_star.inc.c:            if (o->oTimer > 2) {
src/game/behaviors/hidden_star.inc.c:                spawn_red_coin_cutscene_star(o->oPosX, o->oPosY, o->oPosZ);
src/game/behaviors/hidden_star.inc.c:                o->activeFlags = ACTIVE_FLAG_DEACTIVATED;
src/game/behaviors/hidden_star.inc.c:        o->activeFlags = ACTIVE_FLAG_DEACTIVATED;
src/game/behaviors/hidden_star.inc.c:    gRedCoinsCollected = o->oHiddenStarTriggerCounter;
src/game/behaviors/hidden_star.inc.c:    switch (o->oAction) {
src/game/behaviors/hidden_star.inc.c:            if (o->oHiddenStarTriggerCounter == 8)
src/game/behaviors/hidden_star.inc.c:                o->oAction = 1;
src/game/behaviors/hidden_star.inc.c:            if (o->oTimer > 2) {
src/game/behaviors/hidden_star.inc.c:                spawn_no_exit_star(o->oPosX, o->oPosY, o->oPosZ);
src/game/behaviors/hidden_star.inc.c:                o->activeFlags = ACTIVE_FLAG_DEACTIVATED;
src/game/behaviors/hoot.inc.c:    o->oHomeX = o->oPosX + 800.0f;
src/game/behaviors/hoot.inc.c:    o->oHomeY = o->oPosY - 150.0f;
src/game/behaviors/hoot.inc.c:    o->oHomeZ = o->oPosZ + 300.0f;
src/game/behaviors/hoot.inc.c:    o->header.gfx.node.flags |= GRAPH_RENDER_INVISIBLE;
src/game/behaviors/hoot.inc.c:    f32 sp24 = arg1 * sins(o->oMoveAngleYaw) + o->oPosX;
src/game/behaviors/hoot.inc.c:    UNUSED f32 sp20 = o->oPosY;
src/game/behaviors/hoot.inc.c:    f32 sp1c = arg1 * coss(o->oMoveAngleYaw) + o->oPosZ;
src/game/behaviors/hoot.inc.c:    if (floorY + 75.0f > o->oPosY)
src/game/behaviors/hoot.inc.c:        o->oMoveAnglePitch -= 3640.8888;
src/game/behaviors/hoot.inc.c:    if (floorY + 125.0f > o->oPosY)
src/game/behaviors/hoot.inc.c:        o->oMoveAnglePitch -= 7281.7776;
src/game/behaviors/hoot.inc.c:    if (floorY + 125.0f > o->oPosY)
src/game/behaviors/hoot.inc.c:        o->oPosY = floorY + 125.0f;
src/game/behaviors/hoot.inc.c:    if (o->oMoveAnglePitch < -21845.3328)
src/game/behaviors/hoot.inc.c:        o->oMoveAnglePitch = -21845;
src/game/behaviors/hoot.inc.c:    s16 yaw = o->oMoveAngleYaw;
src/game/behaviors/hoot.inc.c:    s16 pitch = o->oMoveAnglePitch;
src/game/behaviors/hoot.inc.c:    s16 sp26 = o->header.gfx.unk38.animFrame;
src/game/behaviors/hoot.inc.c:    f32 xPrev = o->oPosX;
src/game/behaviors/hoot.inc.c:    f32 zPrev = o->oPosZ;
src/game/behaviors/hoot.inc.c:    o->oVelY = sins(pitch) * speed;
src/game/behaviors/hoot.inc.c:    o->oVelX = sins(yaw) * hSpeed;
src/game/behaviors/hoot.inc.c:    o->oVelZ = coss(yaw) * hSpeed;
src/game/behaviors/hoot.inc.c:    o->oPosX += o->oVelX;
src/game/behaviors/hoot.inc.c:        o->oPosY -= o->oVelY + coss((s32)(sp26 * 3276.8)) * 50.0f / 4;
src/game/behaviors/hoot.inc.c:        o->oPosY -= o->oVelY + coss((s32)(sp26 * 6553.6)) * 50.0f / 4;
src/game/behaviors/hoot.inc.c:    o->oPosZ += o->oVelZ;
src/game/behaviors/hoot.inc.c:    find_floor_height_and_data(o->oPosX, o->oPosY, o->oPosZ, &sp2c);
src/game/behaviors/hoot.inc.c:        o->oPosX = xPrev;
src/game/behaviors/hoot.inc.c:        o->oPosZ = zPrev;
src/game/behaviors/hoot.inc.c:    UNUSED s16 pitch = o->oMoveAnglePitch;
src/game/behaviors/hoot.inc.c:    o->oMoveAngleYaw -= 5 * stickX;
src/game/behaviors/hoot.inc.c:    s16 yaw = o->oMoveAngleYaw;
src/game/behaviors/hoot.inc.c:    s16 pitch = o->oMoveAnglePitch;
src/game/behaviors/hoot.inc.c:    s16 sp22 = o->header.gfx.unk38.animFrame;
src/game/behaviors/hoot.inc.c:    o->oVelY = sins(pitch) * speed;
src/game/behaviors/hoot.inc.c:    o->oVelX = sins(yaw) * hSpeed;
src/game/behaviors/hoot.inc.c:    o->oVelZ = coss(yaw) * hSpeed;
src/game/behaviors/hoot.inc.c:    o->oPosX += o->oVelX;
src/game/behaviors/hoot.inc.c:    o->oPosY -= o->oVelY + coss((s32)(sp22 * 6553.6)) * 50.0f / 4;
src/game/behaviors/hoot.inc.c:    o->oPosZ += o->oVelZ;
src/game/behaviors/hoot.inc.c:    hitbox.x = o->oPosX;
src/game/behaviors/hoot.inc.c:    hitbox.y = o->oPosY;
src/game/behaviors/hoot.inc.c:    hitbox.z = o->oPosZ;
src/game/behaviors/hoot.inc.c:        o->oPosX = hitbox.x;
src/game/behaviors/hoot.inc.c:        o->oPosY = hitbox.y;
src/game/behaviors/hoot.inc.c:        o->oPosZ = hitbox.z;
src/game/behaviors/hoot.inc.c:    floorY = find_floor_height_and_data(o->oPosX, o->oPosY, o->oPosZ, &sp44);
src/game/behaviors/hoot.inc.c:        o->oPosX = xPrev;
src/game/behaviors/hoot.inc.c:        o->oPosZ = zPrev;
src/game/behaviors/hoot.inc.c:    if (absf_2(o->oPosX) > 8000.0f)
src/game/behaviors/hoot.inc.c:        o->oPosX = xPrev;
src/game/behaviors/hoot.inc.c:    if (absf_2(o->oPosZ) > 8000.0f)
src/game/behaviors/hoot.inc.c:        o->oPosZ = zPrev;
src/game/behaviors/hoot.inc.c:    if (floorY + 125.0f > o->oPosY)
src/game/behaviors/hoot.inc.c:        o->oPosY = floorY + 125.0f;
src/game/behaviors/hoot.inc.c:    f32 negX = 0 - o->oPosX;
src/game/behaviors/hoot.inc.c:    f32 negZ = 0 - o->oPosZ;
src/game/behaviors/hoot.inc.c:    o->oMoveAngleYaw = approach_s16_symmetric(o->oMoveAngleYaw, angleToOrigin, 0x500);
src/game/behaviors/hoot.inc.c:    o->oMoveAnglePitch = 0xCE38;
src/game/behaviors/hoot.inc.c:    if (o->oTimer >= 29) {
src/game/behaviors/hoot.inc.c:        o->header.gfx.unk38.animFrame = 1;
src/game/behaviors/hoot.inc.c:    if (o->oPosY > 6500.0f)
src/game/behaviors/hoot.inc.c:        o->oAction = HOOT_ACT_CARRY;
src/game/behaviors/hoot.inc.c:    f32 xPrev = o->oPosX;
src/game/behaviors/hoot.inc.c:    f32 yPrev = o->oPosY;
src/game/behaviors/hoot.inc.c:    f32 zPrev = o->oPosZ;
src/game/behaviors/hoot.inc.c:    switch (o->oAction) {
src/game/behaviors/hoot.inc.c:            o->oMoveAnglePitch = 0x71C;
src/game/behaviors/hoot.inc.c:            if (o->oPosY < 2700.0f) {
src/game/behaviors/hoot.inc.c:                    o->oAction = HOOT_ACT_TIRED;
src/game/behaviors/hoot.inc.c:            o->oMoveAnglePitch = 0;
src/game/behaviors/hoot.inc.c:            if (o->oTimer >= 61)
src/game/behaviors/hoot.inc.c:    f32 homeDistX = o->oHomeX - o->oPosX;
src/game/behaviors/hoot.inc.c:    f32 homeDistY = o->oHomeY - o->oPosY;
src/game/behaviors/hoot.inc.c:    f32 homeDistZ = o->oHomeZ - o->oPosZ;
src/game/behaviors/hoot.inc.c:    o->oMoveAngleYaw = approach_s16_symmetric(o->oMoveAngleYaw, hAngleToHome, 0x140);
src/game/behaviors/hoot.inc.c:    o->oMoveAnglePitch = approach_s16_symmetric(o->oMoveAnglePitch, vAngleToHome, 0x140);
src/game/behaviors/hoot.inc.c:    if (o->oInteractStatus == INT_STATUS_HOOT_GRABBED_BY_MARIO) {
src/game/behaviors/hoot.inc.c:        o->oAction = 0;
src/game/behaviors/hoot.inc.c:        o->oTimer = 0;
src/game/behaviors/hoot.inc.c:    switch (o->oHootAvailability) {
src/game/behaviors/hoot.inc.c:            if (is_point_within_radius_of_mario(o->oPosX, o->oPosY, o->oPosZ, 50)) {
src/game/behaviors/hoot.inc.c:                o->header.gfx.node.flags &= ~GRAPH_RENDER_INVISIBLE;
src/game/behaviors/hoot.inc.c:                o->oHootAvailability = HOOT_AVAIL_WANTS_TO_TALK;
src/game/behaviors/hoot.inc.c:                o->oHootAvailability = HOOT_AVAIL_READY_TO_FLY;
src/game/behaviors/horizontal_grindel.inc.c:    o->oHorizontalGrindelTargetYaw = o->oMoveAngleYaw;
src/game/behaviors/horizontal_grindel.inc.c:    if (o->oMoveFlags & 0x00000003) {
src/game/behaviors/horizontal_grindel.inc.c:        if (!o->oHorizontalGrindelOnGround) {
src/game/behaviors/horizontal_grindel.inc.c:            o->oHorizontalGrindelOnGround = TRUE;
src/game/behaviors/horizontal_grindel.inc.c:            set_camera_shake_from_point(SHAKE_POS_SMALL, o->oPosX, o->oPosY, o->oPosZ);
src/game/behaviors/horizontal_grindel.inc.c:            o->oHorizontalGrindelDistToHome = cur_obj_lateral_dist_to_home();
src/game/behaviors/horizontal_grindel.inc.c:            o->oForwardVel = 0.0f;
src/game/behaviors/horizontal_grindel.inc.c:            o->oTimer = 0;
src/game/behaviors/horizontal_grindel.inc.c:        if (cur_obj_rotate_yaw_toward(o->oHorizontalGrindelTargetYaw, 0x400)) {
src/game/behaviors/horizontal_grindel.inc.c:            if (o->oTimer > 60) {
src/game/behaviors/horizontal_grindel.inc.c:                if (o->oHorizontalGrindelDistToHome > 300.0f) {
src/game/behaviors/horizontal_grindel.inc.c:                    o->oHorizontalGrindelTargetYaw += 0x8000;
src/game/behaviors/horizontal_grindel.inc.c:                    o->oHorizontalGrindelDistToHome = 0.0f;
src/game/behaviors/horizontal_grindel.inc.c:                    o->oForwardVel = 11.0f;
src/game/behaviors/horizontal_grindel.inc.c:                    o->oVelY = 70.0f;
src/game/behaviors/horizontal_grindel.inc.c:                    o->oGravity = -4.0f;
src/game/behaviors/horizontal_grindel.inc.c:                    o->oMoveFlags = 0;
src/game/behaviors/horizontal_grindel.inc.c:            o->oTimer = 0;
src/game/behaviors/horizontal_grindel.inc.c:        o->oHorizontalGrindelOnGround = FALSE;
src/game/behaviors/horizontal_grindel.inc.c:        if (o->oVelY < 0.0f) {
src/game/behaviors/horizontal_grindel.inc.c:            o->oGravity = -16.0f;
src/game/behaviors/horizontal_grindel.inc.c:    o->oFaceAngleYaw = o->oMoveAngleYaw + 0x4000;
src/game/behaviors/intro_lakitu.inc.c:    o->oFaceAnglePitch = pitch;
src/game/behaviors/intro_lakitu.inc.c:    o->oFaceAngleYaw = yaw;
src/game/behaviors/intro_lakitu.inc.c:    s16 splineSegment = o->oIntroLakituSplineSegment;
src/game/behaviors/intro_lakitu.inc.c:    if ((move_point_along_spline(newFocus, offset, &splineSegment, &(o->oIntroLakituSplineSegmentProgress)) == 1)
src/game/behaviors/intro_lakitu.inc.c:        || (move_point_along_spline(newOffset, focus, &splineSegment, &(o->oIntroLakituSplineSegmentProgress)) == 1))
src/game/behaviors/intro_lakitu.inc.c:    o->oIntroLakituSplineSegment = splineSegment;
src/game/behaviors/intro_peach.inc.c:    vec3f_set_dist_and_angle(gLakituState.pos, newPos, o->oIntroPeachDistToCamera, o->oIntroPeachPitchFromFocus + focusPitch,
src/game/behaviors/intro_peach.inc.c:                             o->oIntroPeachYawFromFocus + focusYaw);
src/game/behaviors/intro_peach.inc.c:    newOpacity = o->oOpacity;
src/game/behaviors/intro_peach.inc.c:    o->oOpacity = newOpacity;
src/game/behaviors/jrb_ship.inc.c:    if (o->oDistanceToMario > 10000.0f)
src/game/behaviors/jrb_ship.inc.c:        o->oOpacity = 140;
src/game/behaviors/jrb_ship.inc.c:        o->oOpacity = o->oDistanceToMario * 140.0f / 10000.0;
src/game/behaviors/jrb_ship.inc.c:    s16 sp1E = o->oFaceAnglePitch;
src/game/behaviors/jrb_ship.inc.c:    s16 sp1C = o->oFaceAngleRoll;
src/game/behaviors/jrb_ship.inc.c:    o->oShipPart3UnkF4 += 0x100;
src/game/behaviors/jrb_ship.inc.c:    o->oFaceAnglePitch = sins(o->oShipPart3UnkF4) * 1024.0f;
src/game/behaviors/jrb_ship.inc.c:    o->oFaceAngleRoll = sins(o->oShipPart3UnkF8) * 1024.0f;
src/game/behaviors/jrb_ship.inc.c:    o->oAngleVelPitch = o->oFaceAnglePitch - sp1E;
src/game/behaviors/jrb_ship.inc.c:    o->oAngleVelRoll = o->oFaceAngleRoll - sp1C;
src/game/behaviors/jrb_ship.inc.c:    if (o->oJrbSlidingBoxUnkF4 == NULL) {
src/game/behaviors/jrb_ship.inc.c:            o->oJrbSlidingBoxUnkF4 = sp3C;
src/game/behaviors/jrb_ship.inc.c:        o->oParentRelativePosX = o->oPosX - sp3C->oPosX;
src/game/behaviors/jrb_ship.inc.c:        o->oParentRelativePosY = o->oPosY - sp3C->oPosY;
src/game/behaviors/jrb_ship.inc.c:        o->oParentRelativePosZ = o->oPosZ - sp3C->oPosZ;
src/game/behaviors/jrb_ship.inc.c:        sp3C = o->oJrbSlidingBoxUnkF4;
src/game/behaviors/jrb_ship.inc.c:        sp54[0] = o->oParentRelativePosX;
src/game/behaviors/jrb_ship.inc.c:        sp54[1] = o->oParentRelativePosY;
src/game/behaviors/jrb_ship.inc.c:        sp54[2] = o->oParentRelativePosZ;
src/game/behaviors/jrb_ship.inc.c:        o->oPosX = sp3C->oPosX + sp48[0];
src/game/behaviors/jrb_ship.inc.c:        o->oPosY = sp3C->oPosY + sp48[1];
src/game/behaviors/jrb_ship.inc.c:        o->oPosZ = sp3C->oPosZ + sp48[2];
src/game/behaviors/jrb_ship.inc.c:    sp20[0] = o->oPosX;
src/game/behaviors/jrb_ship.inc.c:    sp20[1] = o->oPosY;
src/game/behaviors/jrb_ship.inc.c:    sp20[2] = o->oPosZ;
src/game/behaviors/jrb_ship.inc.c:        o->oFaceAnglePitch = sp1E;
src/game/behaviors/jrb_ship.inc.c:    o->oJrbSlidingBoxUnkFC = sins(o->oJrbSlidingBoxUnkF8) * 20.0f;
src/game/behaviors/jrb_ship.inc.c:    o->oJrbSlidingBoxUnkF8 += 0x100;
src/game/behaviors/jrb_ship.inc.c:    o->oParentRelativePosZ += o->oJrbSlidingBoxUnkFC;
src/game/behaviors/jrb_ship.inc.c:        if (absf(o->oJrbSlidingBoxUnkFC) > 3.0f)
src/game/behaviors/jrb_ship.inc.c:    if (!(o->oJrbSlidingBoxUnkF8 & 0x7FFF))
src/game/behaviors/jrb_ship.inc.c:        o->oInteractStatus = 0;
src/game/behaviors/jumping_box.inc.c:    if (o->oSubAction == 0) {
src/game/behaviors/jumping_box.inc.c:        if (o->oJumpingBoxUnkF8-- < 0)
src/game/behaviors/jumping_box.inc.c:            o->oSubAction++;
src/game/behaviors/jumping_box.inc.c:        if (o->oTimer > o->oJumpingBoxUnkF4) {
src/game/behaviors/jumping_box.inc.c:            o->oVelY = random_float() * 5.0f + 15.0f;
src/game/behaviors/jumping_box.inc.c:            o->oSubAction++;
src/game/behaviors/jumping_box.inc.c:    } else if (o->oMoveFlags & 2) {
src/game/behaviors/jumping_box.inc.c:        o->oSubAction = 0;
src/game/behaviors/jumping_box.inc.c:        o->oJumpingBoxUnkF8 = random_float() * 60.0f + 30.0f;
src/game/behaviors/jumping_box.inc.c:    if (o->oMoveFlags & (0x200 | 0x40 | 0x20 | 0x10 | 0x8 | 0x1)) {
src/game/behaviors/jumping_box.inc.c:    switch (o->oHeldState) {
src/game/behaviors/jumping_box.inc.c:            o->oAction = 1;
src/game/behaviors/jumping_box.inc.c:    if (o->oInteractStatus & INT_STATUS_STOP_RIDING) {
src/game/behaviors/jumping_box.inc.c:    o->oInteractStatus = 0;
src/game/behaviors/kickable_board.inc.c:        if (abs_angle_diff(o->oMoveAngleYaw, gMarioObject->oMoveAngleYaw) > 0x6000) {
src/game/behaviors/kickable_board.inc.c:    o->oKickableBoardF8 = 1600;
src/game/behaviors/kickable_board.inc.c:    o->oKickableBoardF4 = 0;
src/game/behaviors/kickable_board.inc.c:    switch (o->oAction) {
src/game/behaviors/kickable_board.inc.c:            o->oFaceAnglePitch = 0;
src/game/behaviors/kickable_board.inc.c:                o->oAction++;
src/game/behaviors/kickable_board.inc.c:            o->oFaceAnglePitch = 0;
src/game/behaviors/kickable_board.inc.c:            o->oFaceAnglePitch = -sins(o->oKickableBoardF4) * o->oKickableBoardF8;
src/game/behaviors/kickable_board.inc.c:            if (o->oTimer > 30 && (sp24 = check_mario_attacking(0))) {
src/game/behaviors/kickable_board.inc.c:                if (gMarioObject->oPosY > o->oPosY + 160.0f && sp24 == 2) {
src/game/behaviors/kickable_board.inc.c:                    o->oAction++;
src/game/behaviors/kickable_board.inc.c:                    o->oTimer = 0;
src/game/behaviors/kickable_board.inc.c:            if (o->oTimer != 0) {
src/game/behaviors/kickable_board.inc.c:                o->oKickableBoardF8 -= 8;
src/game/behaviors/kickable_board.inc.c:                if (o->oKickableBoardF8 < 0)
src/game/behaviors/kickable_board.inc.c:                    o->oAction = 0;
src/game/behaviors/kickable_board.inc.c:            if (!(o->oKickableBoardF4 & 0x7FFF))
src/game/behaviors/kickable_board.inc.c:            o->oKickableBoardF4 += 0x400;
src/game/behaviors/kickable_board.inc.c:            o->oAngleVelPitch -= 0x80;
src/game/behaviors/kickable_board.inc.c:            o->oFaceAnglePitch += o->oAngleVelPitch;
src/game/behaviors/kickable_board.inc.c:            if (o->oFaceAnglePitch < -0x4000) {
src/game/behaviors/kickable_board.inc.c:                o->oFaceAnglePitch = -0x4000;
src/game/behaviors/kickable_board.inc.c:                o->oAngleVelPitch = 0;
src/game/behaviors/kickable_board.inc.c:                o->oAction++;
src/game/behaviors/kickable_board.inc.c:    o->header.gfx.throwMatrix = NULL;
src/game/behaviors/king_bobomb.inc.c:    o->oForwardVel = 0;
src/game/behaviors/king_bobomb.inc.c:    o->oVelY = 0;
src/game/behaviors/king_bobomb.inc.c:    if (o->oSubAction == 0) {
src/game/behaviors/king_bobomb.inc.c:        o->oHealth = 3;
src/game/behaviors/king_bobomb.inc.c:            o->oSubAction++;
src/game/behaviors/king_bobomb.inc.c:        o->oAction = 2;
src/game/behaviors/king_bobomb.inc.c:        o->oFlags |= OBJ_FLAG_HOLDABLE;
src/game/behaviors/king_bobomb.inc.c:    if (arg0 < o->oPosY - gMarioObject->oPosY)
src/game/behaviors/king_bobomb.inc.c:    if (o->oPosY - o->oHomeY < -100.0f) { // Thrown off hill
src/game/behaviors/king_bobomb.inc.c:        o->oAction = 5;
src/game/behaviors/king_bobomb.inc.c:    if (o->oKingBobombUnk100 == 0) {
src/game/behaviors/king_bobomb.inc.c:            o->oKingBobombUnk100++;
src/game/behaviors/king_bobomb.inc.c:        if (o->oKingBobombUnk100 == 1) {
src/game/behaviors/king_bobomb.inc.c:            o->oKingBobombUnk100 = 2;
src/game/behaviors/king_bobomb.inc.c:        if (o->oKingBobombUnk108 == 0) {
src/game/behaviors/king_bobomb.inc.c:            o->oForwardVel = 3.0f;
src/game/behaviors/king_bobomb.inc.c:            cur_obj_rotate_yaw_toward(o->oAngleToMario, 0x100);
src/game/behaviors/king_bobomb.inc.c:            o->oForwardVel = 0.0f;
src/game/behaviors/king_bobomb.inc.c:            o->oKingBobombUnk108--;
src/game/behaviors/king_bobomb.inc.c:        o->oAction = 3;
src/game/behaviors/king_bobomb.inc.c:        o->oAction = 0;
src/game/behaviors/king_bobomb.inc.c:    if (o->oSubAction == 0) {
src/game/behaviors/king_bobomb.inc.c:        o->oForwardVel = 0;
src/game/behaviors/king_bobomb.inc.c:        o->oKingBobombUnk104 = 0;
src/game/behaviors/king_bobomb.inc.c:        o->oKingBobombUnkFC = 0;
src/game/behaviors/king_bobomb.inc.c:        if (o->oTimer == 0)
src/game/behaviors/king_bobomb.inc.c:            o->oSubAction++;
src/game/behaviors/king_bobomb.inc.c:        if (o->oSubAction == 1) {
src/game/behaviors/king_bobomb.inc.c:            o->oKingBobombUnkFC += player_performed_grab_escape_action();
src/game/behaviors/king_bobomb.inc.c:            print_debug_bottom_up("%d", o->oKingBobombUnkFC);
src/game/behaviors/king_bobomb.inc.c:            if (o->oKingBobombUnkFC > 10) {
src/game/behaviors/king_bobomb.inc.c:                o->oKingBobombUnk88 = 3;
src/game/behaviors/king_bobomb.inc.c:                o->oAction = 2;
src/game/behaviors/king_bobomb.inc.c:                o->oKingBobombUnk108 = 35;
src/game/behaviors/king_bobomb.inc.c:                o->oInteractStatus &= ~(INT_STATUS_GRABBED_MARIO);
src/game/behaviors/king_bobomb.inc.c:                o->oForwardVel = 3.0f;
src/game/behaviors/king_bobomb.inc.c:                if (o->oKingBobombUnk104 > 20 && cur_obj_rotate_yaw_toward(0, 0x400)) {
src/game/behaviors/king_bobomb.inc.c:                    o->oSubAction++;
src/game/behaviors/king_bobomb.inc.c:            o->oKingBobombUnk104++;
src/game/behaviors/king_bobomb.inc.c:                o->oKingBobombUnk88 = 2;
src/game/behaviors/king_bobomb.inc.c:                o->oAction = 1;
src/game/behaviors/king_bobomb.inc.c:                o->oInteractStatus &= ~(INT_STATUS_GRABBED_MARIO);
src/game/behaviors/king_bobomb.inc.c:    o->oForwardVel = 0;
src/game/behaviors/king_bobomb.inc.c:    o->oVelY = 0;
src/game/behaviors/king_bobomb.inc.c:    o->oMoveAngleYaw = approach_s16_symmetric(o->oMoveAngleYaw, o->oAngleToMario, 512);
src/game/behaviors/king_bobomb.inc.c:    if (o->oDistanceToMario < 2500.0f)
src/game/behaviors/king_bobomb.inc.c:        o->oAction = 2;
src/game/behaviors/king_bobomb.inc.c:        o->oAction = 0;
src/game/behaviors/king_bobomb.inc.c:    if (o->oSubAction == 0) {
src/game/behaviors/king_bobomb.inc.c:        if (o->oTimer == 0) {
src/game/behaviors/king_bobomb.inc.c:            o->oKingBobombUnk104 = 0;
src/game/behaviors/king_bobomb.inc.c:            o->oInteractType = 8;
src/game/behaviors/king_bobomb.inc.c:            o->oKingBobombUnk104++;
src/game/behaviors/king_bobomb.inc.c:        if (o->oKingBobombUnk104 > 3) {
src/game/behaviors/king_bobomb.inc.c:            o->oSubAction++;
src/game/behaviors/king_bobomb.inc.c:        if (o->oSubAction == 1) {
src/game/behaviors/king_bobomb.inc.c:                o->oSubAction++;
src/game/behaviors/king_bobomb.inc.c:                o->oInteractType = 2;
src/game/behaviors/king_bobomb.inc.c:            if (cur_obj_rotate_yaw_toward(o->oAngleToMario, 0x800) == 1)
src/game/behaviors/king_bobomb.inc.c:                o->oAction = 2;
src/game/behaviors/king_bobomb.inc.c:        o->oPosY += 100.0f;
src/game/behaviors/king_bobomb.inc.c:        o->oAction = 8;
src/game/behaviors/king_bobomb.inc.c:    if (o->oTimer == 60)
src/game/behaviors/king_bobomb.inc.c:    if (o->oPosY - o->oHomeY > -100.0f) { // not thrown off hill
src/game/behaviors/king_bobomb.inc.c:        if (o->oMoveFlags & 1) {
src/game/behaviors/king_bobomb.inc.c:            o->oHealth--;
src/game/behaviors/king_bobomb.inc.c:            o->oForwardVel = 0;
src/game/behaviors/king_bobomb.inc.c:            o->oVelY = 0;
src/game/behaviors/king_bobomb.inc.c:            if (o->oHealth)
src/game/behaviors/king_bobomb.inc.c:                o->oAction = 6;
src/game/behaviors/king_bobomb.inc.c:                o->oAction = 7;
src/game/behaviors/king_bobomb.inc.c:        if (o->oSubAction == 0) {
src/game/behaviors/king_bobomb.inc.c:            if (o->oMoveFlags & 2) {
src/game/behaviors/king_bobomb.inc.c:                o->oForwardVel = 0;
src/game/behaviors/king_bobomb.inc.c:                o->oVelY = 0;
src/game/behaviors/king_bobomb.inc.c:                o->oSubAction++;
src/game/behaviors/king_bobomb.inc.c:            } else if (o->oMoveFlags & 1)
src/game/behaviors/king_bobomb.inc.c:                o->oAction = 5; // Go back to top of hill
src/game/behaviors/king_bobomb.inc.c:            o->oSubAction++;
src/game/behaviors/king_bobomb.inc.c:    switch (o->oSubAction) {
src/game/behaviors/king_bobomb.inc.c:            if (o->oTimer == 0)
src/game/behaviors/king_bobomb.inc.c:            o->oKingBobombUnkF8 = 1;
src/game/behaviors/king_bobomb.inc.c:            o->oMoveAngleYaw =  cur_obj_angle_to_home();
src/game/behaviors/king_bobomb.inc.c:            if (o->oPosY < o->oHomeY)
src/game/behaviors/king_bobomb.inc.c:                o->oVelY = 100.0f;
src/game/behaviors/king_bobomb.inc.c:                arc_to_goal_pos(&o->oHomeX, &o->oPosX, 100.0f, -4.0f);
src/game/behaviors/king_bobomb.inc.c:                o->oSubAction++;
src/game/behaviors/king_bobomb.inc.c:            if (o->oVelY < 0 && o->oPosY < o->oHomeY) {
src/game/behaviors/king_bobomb.inc.c:                o->oPosY = o->oHomeY;
src/game/behaviors/king_bobomb.inc.c:                o->oVelY = 0;
src/game/behaviors/king_bobomb.inc.c:                o->oForwardVel = 0;
src/game/behaviors/king_bobomb.inc.c:                o->oGravity = -4.0f;
src/game/behaviors/king_bobomb.inc.c:                o->oKingBobombUnkF8 = 0;
src/game/behaviors/king_bobomb.inc.c:                o->oSubAction++;
src/game/behaviors/king_bobomb.inc.c:                o->oSubAction++;
src/game/behaviors/king_bobomb.inc.c:                o->oAction = 0;
src/game/behaviors/king_bobomb.inc.c:                o->oSubAction++;
src/game/behaviors/king_bobomb.inc.c:                o->oAction = 2;
src/game/behaviors/king_bobomb.inc.c:    if (o->oKingBobombUnkF8 == 0)
src/game/behaviors/king_bobomb.inc.c:    if (o->oDistanceToMario < 5000.0f)
src/game/behaviors/king_bobomb.inc.c:    o->oInteractionSubtype |= INT_SUBTYPE_GRABS_MARIO;
src/game/behaviors/king_bobomb.inc.c:    switch (o->oHeldState) {
src/game/behaviors/king_bobomb.inc.c:            o->oPosY += 20.0f;
src/game/behaviors/king_bobomb.inc.c:    o->oInteractStatus = 0;
src/game/behaviors/klepto.inc.c:    o->oKleptoDistanceToTarget = lateral_dist_between_objects(gMarioObject, o);
src/game/behaviors/klepto.inc.c:    o->oKleptoUnk1B0 = obj_turn_pitch_toward_mario(250.0f, 0);
src/game/behaviors/klepto.inc.c:    o->oKleptoYawToTarget = o->oAngleToMario;
src/game/behaviors/klepto.inc.c:    o->oKleptoUnk1AE = -60;
src/game/behaviors/klepto.inc.c:    if (o->oSoundStateID == 6) {
src/game/behaviors/klepto.inc.c:    } else if (o->oSoundStateID == 5) {
src/game/behaviors/klepto.inc.c:            o->header.gfx.unk38.animFrame = 9;
src/game/behaviors/klepto.inc.c:    if (o->oKleptoUnk1AE > 0) {
src/game/behaviors/klepto.inc.c:        if (o->oKleptoUnk1B0 < -400) {
src/game/behaviors/klepto.inc.c:            o->oKleptoUnk1AE = 0;
src/game/behaviors/klepto.inc.c:            if (o->oSoundStateID == 0) {
src/game/behaviors/klepto.inc.c:            } else if (--o->oKleptoUnk1AE == 0) {
src/game/behaviors/klepto.inc.c:                o->oKleptoUnk1AE = -random_linear_offset(60, 60);
src/game/behaviors/klepto.inc.c:        obj_move_pitch_approach(o->oKleptoUnk1B0, 600);
src/game/behaviors/klepto.inc.c:            if (o->oKleptoUnk1AE != 0) {
src/game/behaviors/klepto.inc.c:                o->oKleptoUnk1AE += 1;
src/game/behaviors/klepto.inc.c:            } else if (o->oKleptoUnk1B0 > -100) {
src/game/behaviors/klepto.inc.c:                o->oKleptoUnk1AE = random_linear_offset(60, 60);
src/game/behaviors/klepto.inc.c:    if (o->oBehParams2ndByte != 0) {
src/game/behaviors/klepto.inc.c:        o->oAnimState = KLEPTO_ANIM_STATE_HOLDING_STAR;
src/game/behaviors/klepto.inc.c:        o->oKleptoStartPosX = o->oPosX;
src/game/behaviors/klepto.inc.c:        o->oKleptoStartPosY = o->oPosY;
src/game/behaviors/klepto.inc.c:        o->oKleptoStartPosZ = o->oPosZ;
src/game/behaviors/klepto.inc.c:            o->oAnimState = KLEPTO_ANIM_STATE_HOLDING_CAP;
src/game/behaviors/klepto.inc.c:            o->oAction = KLEPTO_ACT_WAIT_FOR_MARIO;
src/game/behaviors/klepto.inc.c:    if (o->oDistanceToMario > 2000.0f) {
src/game/behaviors/klepto.inc.c:    o->oKleptoUnkF8 = 400 * absi(newTarget - o->oKleptoTargetNumber);
src/game/behaviors/klepto.inc.c:    o->oKleptoTargetNumber = newTarget;
src/game/behaviors/klepto.inc.c:    o->oHomeX = sKleptoTargetPositions[o->oKleptoTargetNumber][0];
src/game/behaviors/klepto.inc.c:    o->oHomeY = sKleptoTargetPositions[o->oKleptoTargetNumber][1] + o->oKleptoUnkF8;
src/game/behaviors/klepto.inc.c:    o->oHomeZ = sKleptoTargetPositions[o->oKleptoTargetNumber][2];
src/game/behaviors/klepto.inc.c:    o->oKleptoUnkFC = cur_obj_lateral_dist_to_home() / 2;
src/game/behaviors/klepto.inc.c:    if (o->oAnimState != KLEPTO_ANIM_STATE_HOLDING_NOTHING
src/game/behaviors/klepto.inc.c:        && ((o->oTimer > 60 && o->oDistanceToMario > 2000.0f)
src/game/behaviors/klepto.inc.c:            || o->oTimer >= o->oKleptoTimeUntilTargetChange)) {
src/game/behaviors/klepto.inc.c:        o->oKleptoTimeUntilTargetChange = random_linear_offset(300, 300);
src/game/behaviors/klepto.inc.c:        o->oAction = KLEPTO_ACT_APPROACH_TARGET_HOLDING;
src/game/behaviors/klepto.inc.c:        turnAmount = 0x4000 - atan2s(radius, o->oKleptoDistanceToTarget - radius);
src/game/behaviors/klepto.inc.c:        if ((s16)(o->oMoveAngleYaw - o->oKleptoYawToTarget) < 0) {
src/game/behaviors/klepto.inc.c:        o->oKleptoYawToTarget += turnAmount;
src/game/behaviors/klepto.inc.c:            (s16)(s32)(abs_angle_diff(o->oKleptoYawToTarget, o->oMoveAngleYaw) * (0.03f * o->oKleptoSpeed));
src/game/behaviors/klepto.inc.c:        obj_rotate_yaw_and_bounce_off_walls(o->oKleptoYawToTarget, turnAmount);
src/game/behaviors/klepto.inc.c:        if (o->oKleptoSpeed > 50.0f) {
src/game/behaviors/klepto.inc.c:        approach_f32_ptr(&o->oKleptoSpeed, targetSpeed, accel);
src/game/behaviors/klepto.inc.c:    if (o->oKleptoDistanceToTarget < 1800.0f) {
src/game/behaviors/klepto.inc.c:        o->oAction = KLEPTO_ACT_CIRCLE_TARGET_HOLDING;
src/game/behaviors/klepto.inc.c:        if (o->oKleptoUnkFC > 0.0f) {
src/game/behaviors/klepto.inc.c:            if ((o->oKleptoUnkFC -= o->oForwardVel) <= 0.0f) {
src/game/behaviors/klepto.inc.c:                o->oHomeY -= o->oKleptoUnkF8;
src/game/behaviors/klepto.inc.c:        obj_rotate_yaw_and_bounce_off_walls(o->oKleptoYawToTarget, 400);
src/game/behaviors/klepto.inc.c:        approach_f32_ptr(&o->oKleptoSpeed, targetSpeed, 0.05f);
src/game/behaviors/klepto.inc.c:    if (o->oKleptoDistanceToTarget < 1000.0f) {
src/game/behaviors/klepto.inc.c:        if (o->oKleptoDistanceToTarget < 1000.0f) {
src/game/behaviors/klepto.inc.c:            o->oAction = KLEPTO_ACT_TURN_TOWARD_MARIO;
src/game/behaviors/klepto.inc.c:            o->oFlags &= ~0x00000008;
src/game/behaviors/klepto.inc.c:    if (klepto_set_and_check_if_anim_at_end() && cur_obj_check_if_at_animation_end() && o->oKleptoDistanceToTarget > 800.0f
src/game/behaviors/klepto.inc.c:        && abs_angle_diff(o->oAngleToMario, o->oFaceAngleYaw) < 0x800 && o->oKleptoUnk1B0 < 0x400) {
src/game/behaviors/klepto.inc.c:        o->oAction = KLEPTO_ACT_DIVE_AT_MARIO;
src/game/behaviors/klepto.inc.c:        o->oMoveAngleYaw = o->oFaceAngleYaw;
src/game/behaviors/klepto.inc.c:        o->oFlags |= 0x00000008;
src/game/behaviors/klepto.inc.c:    obj_face_yaw_approach(o->oAngleToMario, 1000);
src/game/behaviors/klepto.inc.c:    approach_f32_ptr(&o->oKleptoSpeed, 60.0f, 10.0f);
src/game/behaviors/klepto.inc.c:    if (o->oSoundStateID == 2) {
src/game/behaviors/klepto.inc.c:            if (o->oAnimState != KLEPTO_ANIM_STATE_HOLDING_NOTHING) {
src/game/behaviors/klepto.inc.c:                o->oAction = KLEPTO_ACT_CIRCLE_TARGET_HOLDING;
src/game/behaviors/klepto.inc.c:                o->oKleptoTimeUntilTargetChange = 0;
src/game/behaviors/klepto.inc.c:                o->oAction = KLEPTO_ACT_WAIT_FOR_MARIO;
src/game/behaviors/klepto.inc.c:        f32 dy = o->oPosY - gMarioObject->oPosY;
src/game/behaviors/klepto.inc.c:        if (o->oSoundStateID == 3) {
src/game/behaviors/klepto.inc.c:        } else if (o->oVelY > 0.0f && dy > 200.0f) {
src/game/behaviors/klepto.inc.c:        o->oKleptoUnk1B0 = -0x3000;
src/game/behaviors/klepto.inc.c:        if (o->oAnimState == KLEPTO_ANIM_STATE_HOLDING_NOTHING) {
src/game/behaviors/klepto.inc.c:            if (o->oSubAction == 0) {
src/game/behaviors/klepto.inc.c:                o->oKleptoUnk1B0 = obj_turn_pitch_toward_mario(0.0f, 0);
src/game/behaviors/klepto.inc.c:                o->oKleptoYawToTarget = o->oAngleToMario;
src/game/behaviors/klepto.inc.c:                    o->oSubAction += 1;
src/game/behaviors/klepto.inc.c:                && o->oDistanceToMario < 200.0f && dy > 50.0f && dy < 90.0f) {
src/game/behaviors/klepto.inc.c:                    o->oAnimState = KLEPTO_ANIM_STATE_HOLDING_CAP;
src/game/behaviors/klepto.inc.c:    obj_move_pitch_approach(o->oKleptoUnk1B0, 600);
src/game/behaviors/klepto.inc.c:    obj_face_pitch_approach(o->oMoveAnglePitch, 600);
src/game/behaviors/klepto.inc.c:    obj_rotate_yaw_and_bounce_off_walls(o->oKleptoYawToTarget, 600);
src/game/behaviors/klepto.inc.c:    obj_face_yaw_approach(o->oMoveAngleYaw + 0x8000, 800);
src/game/behaviors/klepto.inc.c:        o->oAction = KLEPTO_ACT_RETREAT;
src/game/behaviors/klepto.inc.c:        o->oGravity = 0.0f;
src/game/behaviors/klepto.inc.c:        o->oMoveAnglePitch = -obj_get_pitch_from_vel();
src/game/behaviors/klepto.inc.c:        o->oKleptoSpeed = sqrtf(o->oForwardVel * o->oForwardVel + o->oVelY * o->oVelY);
src/game/behaviors/klepto.inc.c:        o->oHomeX = o->oPosX;
src/game/behaviors/klepto.inc.c:        o->oHomeY = o->oPosY + 500.0f;
src/game/behaviors/klepto.inc.c:        o->oHomeZ = o->oPosZ;
src/game/behaviors/klepto.inc.c:    approach_f32_ptr(&o->oKleptoSpeed, 40.0f, 10.0f);
src/game/behaviors/klepto.inc.c:    obj_move_pitch_approach(o->oKleptoUnk1B0, 1000);
src/game/behaviors/klepto.inc.c:    obj_face_pitch_approach(o->oMoveAnglePitch, 1000);
src/game/behaviors/klepto.inc.c:    obj_rotate_yaw_and_bounce_off_walls(o->oKleptoYawToTarget, 600);
src/game/behaviors/klepto.inc.c:    if (obj_face_yaw_approach(o->oMoveAngleYaw, 1000)) {
src/game/behaviors/klepto.inc.c:        if (abs_angle_diff(o->oFaceAnglePitch, o->oMoveAnglePitch) == 0) {
src/game/behaviors/klepto.inc.c:            o->oAction = KLEPTO_ACT_RESET_POSITION;
src/game/behaviors/klepto.inc.c:            o->oHomeY = 1500.0f;
src/game/behaviors/klepto.inc.c:            o->oKleptoUnk1AE = -100;
src/game/behaviors/klepto.inc.c:            o->oFlags |= 0x00000008;
src/game/behaviors/klepto.inc.c:    if (o->oTimer < 300) {
src/game/behaviors/klepto.inc.c:    } else if (o->oBehParams2ndByte != 0) {
src/game/behaviors/klepto.inc.c:        o->oHomeX = -2000.0f;
src/game/behaviors/klepto.inc.c:        o->oHomeZ = -1000.0f;
src/game/behaviors/klepto.inc.c:        o->oHomeY = o->oKleptoDistanceToTarget = 9999.0f;
src/game/behaviors/klepto.inc.c:        if (o->oPosY > 5000.0f) {
src/game/behaviors/klepto.inc.c:        o->oAction = KLEPTO_ACT_WAIT_FOR_MARIO;
src/game/behaviors/klepto.inc.c:        o->oHomeX = o->oKleptoStartPosX;
src/game/behaviors/klepto.inc.c:        o->oHomeY = o->oKleptoStartPosY;
src/game/behaviors/klepto.inc.c:        o->oHomeZ = o->oKleptoStartPosZ;
src/game/behaviors/klepto.inc.c:    o->oForwardVel = o->oVelY = 0.0f;
src/game/behaviors/klepto.inc.c:    o->oKleptoDistanceToTarget = cur_obj_lateral_dist_to_home();
src/game/behaviors/klepto.inc.c:    o->oKleptoUnk1B0 = obj_get_pitch_to_home(o->oKleptoDistanceToTarget);
src/game/behaviors/klepto.inc.c:    o->oKleptoYawToTarget = cur_obj_angle_to_home();
src/game/behaviors/klepto.inc.c:    if (o->oAction == KLEPTO_ACT_STRUCK_BY_MARIO) {
src/game/behaviors/klepto.inc.c:        obj_compute_vel_from_move_pitch(o->oKleptoSpeed);
src/game/behaviors/klepto.inc.c:        switch (o->oAction) {
src/game/behaviors/klepto.inc.c:        if (obj_handle_attacks(&sKleptoHitbox, o->oAction, sKleptoAttackHandlers)) {
src/game/behaviors/klepto.inc.c:            if (o->oAnimState == KLEPTO_ANIM_STATE_HOLDING_CAP) {
src/game/behaviors/klepto.inc.c:            } else if (o->oAnimState == KLEPTO_ANIM_STATE_HOLDING_STAR) {
src/game/behaviors/klepto.inc.c:            o->oAnimState = KLEPTO_ANIM_STATE_HOLDING_NOTHING;
src/game/behaviors/klepto.inc.c:            o->oAction = KLEPTO_ACT_STRUCK_BY_MARIO;
src/game/behaviors/klepto.inc.c:            o->oGravity = -2.0f;
src/game/behaviors/klepto.inc.c:            o->oMoveAngleYaw = o->oAngleToMario + 0x8000;
src/game/behaviors/klepto.inc.c:            o->oFlags &= ~0x00000008;
src/game/behaviors/klepto.inc.c:    obj_roll_to_match_yaw_turn(o->oKleptoYawToTarget, 0x3000, 600);
src/game/behaviors/koopa.inc.c:    if ((o->oKoopaMovementType = o->oBehParams2ndByte) == KOOPA_BP_TINY) {
src/game/behaviors/koopa.inc.c:        o->oKoopaMovementType = KOOPA_BP_NORMAL;
src/game/behaviors/koopa.inc.c:        o->oKoopaAgility = 1.6f / 3.0f;
src/game/behaviors/koopa.inc.c:        o->oDrawingDistance = 1500.0f;
src/game/behaviors/koopa.inc.c:        o->oGravity = -6.4f / 3.0f;
src/game/behaviors/koopa.inc.c:    } else if (o->oKoopaMovementType >= KOOPA_BP_KOOPA_THE_QUICK_BASE) {
src/game/behaviors/koopa.inc.c:        o->oKoopaTheQuickRaceIndex = o->oKoopaMovementType - KOOPA_BP_KOOPA_THE_QUICK_BASE;
src/game/behaviors/koopa.inc.c:        o->oKoopaAgility = 4.0f;
src/game/behaviors/koopa.inc.c:        o->oKoopaAgility = 1.0f;
src/game/behaviors/koopa.inc.c:    if (o->header.gfx.scale[0] > 1.5f) {
src/game/behaviors/koopa.inc.c:    if (o->oKoopaDistanceToMario < 300.0f
src/game/behaviors/koopa.inc.c:        && abs_angle_diff(o->oKoopaAngleToMario, o->oMoveAngleYaw) < 0x3000) {
src/game/behaviors/koopa.inc.c:        o->oAction = KOOPA_SHELLED_ACT_RUN_FROM_MARIO;
src/game/behaviors/koopa.inc.c:    o->oForwardVel = 0.0f;
src/game/behaviors/koopa.inc.c:        o->oAction = KOOPA_SHELLED_ACT_WALK;
src/game/behaviors/koopa.inc.c:        o->oKoopaTargetYaw = o->oMoveAngleYaw + 0x2000 * (s16) random_sign();
src/game/behaviors/koopa.inc.c:    obj_forward_vel_approach(3.0f * o->oKoopaAgility, 0.3f * o->oKoopaAgility);
src/game/behaviors/koopa.inc.c:        o->oSubAction += 1;
src/game/behaviors/koopa.inc.c:        o->oKoopaCountdown = random_linear_offset(30, 100);
src/game/behaviors/koopa.inc.c:    if (o->oKoopaCountdown != 0) {
src/game/behaviors/koopa.inc.c:        o->oKoopaCountdown -= 1;
src/game/behaviors/koopa.inc.c:        o->oSubAction += 1;
src/game/behaviors/koopa.inc.c:    obj_forward_vel_approach(0.0f, 1.0f * o->oKoopaAgility);
src/game/behaviors/koopa.inc.c:        o->oAction = KOOPA_SHELLED_ACT_STOPPED;
src/game/behaviors/koopa.inc.c:    if (o->oKoopaTurningAwayFromWall) {
src/game/behaviors/koopa.inc.c:        o->oKoopaTurningAwayFromWall = obj_resolve_collisions_and_turn(o->oKoopaTargetYaw, 0x200);
src/game/behaviors/koopa.inc.c:        if (o->oDistanceToMario >= 25000.0f) {
src/game/behaviors/koopa.inc.c:            o->oKoopaTargetYaw = o->oAngleToMario;
src/game/behaviors/koopa.inc.c:        o->oKoopaTurningAwayFromWall = obj_bounce_off_walls_edges_objects(&o->oKoopaTargetYaw);
src/game/behaviors/koopa.inc.c:        cur_obj_rotate_yaw_toward(o->oKoopaTargetYaw, 0x200);
src/game/behaviors/koopa.inc.c:    switch (o->oSubAction) {
src/game/behaviors/koopa.inc.c:    if (o->oDistanceToMario >= 25000.0f) {
src/game/behaviors/koopa.inc.c:        o->oAngleToMario += 0x8000;
src/game/behaviors/koopa.inc.c:        o->oDistanceToMario = 0.0f;
src/game/behaviors/koopa.inc.c:    if (o->oTimer > 30 && o->oDistanceToMario > 800.0f) {
src/game/behaviors/koopa.inc.c:            o->oAction = KOOPA_SHELLED_ACT_STOPPED;
src/game/behaviors/koopa.inc.c:        cur_obj_rotate_yaw_toward(o->oAngleToMario + 0x8000, 0x400);
src/game/behaviors/koopa.inc.c:    if (o->oMoveFlags & OBJ_MOVE_MASK_ON_GROUND) {
src/game/behaviors/koopa.inc.c:        if (o->oForwardVel > 5.0f) {
src/game/behaviors/koopa.inc.c:            if (!(o->oTimer % 4)) {
src/game/behaviors/koopa.inc.c:    if (o->oForwardVel != 0.0f) {
src/game/behaviors/koopa.inc.c:        if (o->oMoveFlags & OBJ_MOVE_HIT_WALL) {
src/game/behaviors/koopa.inc.c:            o->oMoveAngleYaw = cur_obj_reflect_move_angle_off_wall();
src/game/behaviors/koopa.inc.c:    } else if (o->oKoopaCountdown != 0) {
src/game/behaviors/koopa.inc.c:        o->oKoopaCountdown -= 1;
src/game/behaviors/koopa.inc.c:        o->oAction = KOOPA_SHELLED_ACT_STOPPED;
src/game/behaviors/koopa.inc.c:    if (o->header.gfx.scale[0] > 0.8f) {
src/game/behaviors/koopa.inc.c:        o->oKoopaMovementType = KOOPA_BP_UNSHELLED;
src/game/behaviors/koopa.inc.c:        o->oAction = KOOPA_UNSHELLED_ACT_LYING;
src/game/behaviors/koopa.inc.c:        o->oForwardVel = 20.0f;
src/game/behaviors/koopa.inc.c:            o->oMoveAngleYaw = obj_angle_to_object(gMarioObject, o);
src/game/behaviors/koopa.inc.c:    obj_update_blinking(&o->oKoopaBlinkTimer, 20, 50, 4);
src/game/behaviors/koopa.inc.c:    switch (o->oAction) {
src/game/behaviors/koopa.inc.c:    if (o->header.gfx.scale[0] > 0.8f) {
src/game/behaviors/koopa.inc.c:        obj_handle_attacks(&sKoopaHitbox, o->oAction, sKoopaShelledAttackHandlers);
src/game/behaviors/koopa.inc.c:        if (o->oAction == KOOPA_SHELLED_ACT_DIE) {
src/game/behaviors/koopa.inc.c:    if (o->oKoopaTurningAwayFromWall) {
src/game/behaviors/koopa.inc.c:        o->oKoopaTurningAwayFromWall = obj_resolve_collisions_and_turn(o->oKoopaTargetYaw, 0x600);
src/game/behaviors/koopa.inc.c:        if (o->oDistanceToMario >= 25000.0f) {
src/game/behaviors/koopa.inc.c:            o->oKoopaTargetYaw = o->oAngleToMario;
src/game/behaviors/koopa.inc.c:            o->oKoopaTargetYaw = obj_angle_to_object(o, shell);
src/game/behaviors/koopa.inc.c:        } else if (!(o->oKoopaTurningAwayFromWall =
src/game/behaviors/koopa.inc.c:                         obj_bounce_off_walls_edges_objects(&o->oKoopaTargetYaw))) {
src/game/behaviors/koopa.inc.c:            if (o->oKoopaUnshelledTimeUntilTurn != 0) {
src/game/behaviors/koopa.inc.c:                o->oKoopaUnshelledTimeUntilTurn -= 1;
src/game/behaviors/koopa.inc.c:                o->oKoopaTargetYaw = obj_random_fixed_turn(0x2000);
src/game/behaviors/koopa.inc.c:        if (o->oDistanceToMario > 800.0f
src/game/behaviors/koopa.inc.c:                && abs_angle_diff(o->oKoopaTargetYaw, o->oAngleToMario + 0x8000) < 0x2000)) {
src/game/behaviors/koopa.inc.c:            cur_obj_rotate_yaw_toward(o->oKoopaTargetYaw, 0x600);
src/game/behaviors/koopa.inc.c:            cur_obj_rotate_yaw_toward(o->oAngleToMario + 0x8000, 0x600);
src/game/behaviors/koopa.inc.c:        && abs_angle_diff(o->oKoopaTargetYaw, o->oMoveAngleYaw) < 0xC00) {
src/game/behaviors/koopa.inc.c:        o->oMoveAngleYaw = o->oKoopaTargetYaw;
src/game/behaviors/koopa.inc.c:        o->oAction = KOOPA_UNSHELLED_ACT_DIVE;
src/game/behaviors/koopa.inc.c:        o->oForwardVel *= 1.2f;
src/game/behaviors/koopa.inc.c:        o->oVelY = distToShell / 20.0f;
src/game/behaviors/koopa.inc.c:        o->oKoopaCountdown = 20;
src/game/behaviors/koopa.inc.c:    if (o->oTimer > 10) {
src/game/behaviors/koopa.inc.c:    if (o->oTimer > 10) {
src/game/behaviors/koopa.inc.c:            o->oKoopaMovementType = KOOPA_BP_NORMAL;
src/game/behaviors/koopa.inc.c:            o->oAction = KOOPA_SHELLED_ACT_LYING;
src/game/behaviors/koopa.inc.c:            o->oForwardVel *= 0.5f;
src/game/behaviors/koopa.inc.c:    if (o->oForwardVel != 0.0f) {
src/game/behaviors/koopa.inc.c:        if (o->oAction == KOOPA_UNSHELLED_ACT_LYING) {
src/game/behaviors/koopa.inc.c:            o->oAnimState = 1;
src/game/behaviors/koopa.inc.c:    } else if (o->oKoopaCountdown != 0) {
src/game/behaviors/koopa.inc.c:        o->oKoopaCountdown -= 1;
src/game/behaviors/koopa.inc.c:        o->oAction = KOOPA_UNSHELLED_ACT_RUN;
src/game/behaviors/koopa.inc.c:    obj_update_blinking(&o->oKoopaBlinkTimer, 10, 15, 3);
src/game/behaviors/koopa.inc.c:    switch (o->oAction) {
src/game/behaviors/koopa.inc.c:    obj_handle_attacks(&sKoopaHitbox, o->oAction, sKoopaUnshelledAttackHandlers);
src/game/behaviors/koopa.inc.c:    if (o->oTimer == 50) {
src/game/behaviors/koopa.inc.c:            o->parentObj->oKoopaRaceEndpointRaceBegun = TRUE;
src/game/behaviors/koopa.inc.c:    } else if (o->oTimer > 50) {
src/game/behaviors/koopa.inc.c:    if (o->oKoopaTheQuickInitTextboxCooldown != 0) {
src/game/behaviors/koopa.inc.c:        o->oKoopaTheQuickInitTextboxCooldown -= 1;
src/game/behaviors/koopa.inc.c:        o->oAction = KOOPA_THE_QUICK_ACT_SHOW_INIT_TEXT;
src/game/behaviors/koopa.inc.c:        o->oForwardVel = 0.0f;
src/game/behaviors/koopa.inc.c:        sKoopaTheQuickProperties[o->oKoopaTheQuickRaceIndex].initText);
src/game/behaviors/koopa.inc.c:        o->oAction = KOOPA_THE_QUICK_ACT_RACE;
src/game/behaviors/koopa.inc.c:        o->oForwardVel = 0.0f;
src/game/behaviors/koopa.inc.c:        o->parentObj = cur_obj_nearest_object_with_behavior(bhvKoopaRaceEndpoint);
src/game/behaviors/koopa.inc.c:        o->oPathedStartWaypoint = o->oPathedPrevWaypoint =
src/game/behaviors/koopa.inc.c:            segmented_to_virtual(sKoopaTheQuickProperties[o->oKoopaTheQuickRaceIndex].path);
src/game/behaviors/koopa.inc.c:        o->oKoopaTurningAwayFromWall = FALSE;
src/game/behaviors/koopa.inc.c:        o->oFlags |= OBJ_FLAG_ACTIVE_FROM_AFAR;
src/game/behaviors/koopa.inc.c:        o->oAction = KOOPA_THE_QUICK_ACT_WAIT_BEFORE_RACE;
src/game/behaviors/koopa.inc.c:        o->oKoopaTheQuickInitTextboxCooldown = 60;
src/game/behaviors/koopa.inc.c:        ballSpeedInKoopaRunDir = ball->oForwardVel * coss(ball->oMoveAngleYaw - o->oMoveAngleYaw);
src/game/behaviors/koopa.inc.c:        if (abs_angle_diff(o->oMoveAngleYaw, angleToBall) < 0x4000) {
src/game/behaviors/koopa.inc.c:                if (ballSpeedInKoopaRunDir < o->oForwardVel * 0.7f) {
src/game/behaviors/koopa.inc.c:                    o->oForwardVel -= 2.0f;
src/game/behaviors/koopa.inc.c:        } else if (distToBall < 300.0f && ballSpeedInKoopaRunDir > o->oForwardVel) {
src/game/behaviors/koopa.inc.c:    cur_obj_init_animation_with_accel_and_sound(9, o->oForwardVel * 0.09f);
src/game/behaviors/koopa.inc.c:            o->oAction = KOOPA_THE_QUICK_ACT_DECELERATE;
src/game/behaviors/koopa.inc.c:            downhillSteepness = 1.0f + sins((s16)(f32) o->oPathedTargetPitch);
src/game/behaviors/koopa.inc.c:            cur_obj_rotate_yaw_toward(o->oPathedTargetYaw, (s32)(o->oKoopaAgility * 150.0f));
src/game/behaviors/koopa.inc.c:            switch (o->oSubAction) {
src/game/behaviors/koopa.inc.c:                    if (o->parentObj->oKoopaRaceEndpointRaceStatus != 0 && o->oDistanceToMario > 1500.0f
src/game/behaviors/koopa.inc.c:                        && (o->oPathedPrevWaypointFlags & WAYPOINT_MASK_00FF) < 28) {
src/game/behaviors/koopa.inc.c:                        o->oKoopaAgility = 8.0f;
src/game/behaviors/koopa.inc.c:                    } else if (o->oKoopaTheQuickRaceIndex != KOOPA_THE_QUICK_BOB_INDEX) {
src/game/behaviors/koopa.inc.c:                        o->oKoopaAgility = 6.0f;
src/game/behaviors/koopa.inc.c:                        o->oKoopaAgility = 4.0f;
src/game/behaviors/koopa.inc.c:                    obj_forward_vel_approach(o->oKoopaAgility * 6.0f * downhillSteepness,
src/game/behaviors/koopa.inc.c:                                             o->oKoopaAgility * 0.1f);
src/game/behaviors/koopa.inc.c:                    if (o->oMoveFlags & OBJ_MOVE_HIT_WALL) {
src/game/behaviors/koopa.inc.c:                        o->oVelY = 20.0f;
src/game/behaviors/koopa.inc.c:                    if (bowlingBallStatus != 0 || (o->oMoveFlags & OBJ_MOVE_HIT_EDGE)) {
src/game/behaviors/koopa.inc.c:                            o->oForwardVel = 0.0f;
src/game/behaviors/koopa.inc.c:                            || (o->oPathedPrevWaypointFlags & WAYPOINT_MASK_00FF) >= 8) {
src/game/behaviors/koopa.inc.c:                            o->oVelY = 80.0f;
src/game/behaviors/koopa.inc.c:                            o->oVelY = 40.0f;
src/game/behaviors/koopa.inc.c:                        o->oGravity = -6.0f;
src/game/behaviors/koopa.inc.c:                        o->oSubAction = 2;
src/game/behaviors/koopa.inc.c:                        o->oMoveFlags = 0;
src/game/behaviors/koopa.inc.c:                    if (o->oMoveFlags & OBJ_MOVE_MASK_ON_GROUND) {
src/game/behaviors/koopa.inc.c:                            o->oSubAction -= 1;
src/game/behaviors/koopa.inc.c:        o->oAction = KOOPA_THE_QUICK_ACT_STOP;
src/game/behaviors/koopa.inc.c:        o->oForwardVel = 3.0f;
src/game/behaviors/koopa.inc.c:    if (o->oAction == KOOPA_SHELLED_ACT_STOPPED) {
src/game/behaviors/koopa.inc.c:        o->oAction = KOOPA_THE_QUICK_ACT_AFTER_RACE;
src/game/behaviors/koopa.inc.c:    if (o->parentObj->oKoopaRaceEndpointUnk100 == 0) {
src/game/behaviors/koopa.inc.c:            if (o->parentObj->oKoopaRaceEndpointRaceStatus != 0) {
src/game/behaviors/koopa.inc.c:                if (o->parentObj->oKoopaRaceEndpointRaceStatus < 0) {
src/game/behaviors/koopa.inc.c:                    o->parentObj->oKoopaRaceEndpointRaceStatus = 0;
src/game/behaviors/koopa.inc.c:                    o->parentObj->oKoopaRaceEndpointUnk100 = DIALOG_006;
src/game/behaviors/koopa.inc.c:                    o->parentObj->oKoopaRaceEndpointUnk100 =
src/game/behaviors/koopa.inc.c:                        sKoopaTheQuickProperties[o->oKoopaTheQuickRaceIndex].winText;
src/game/behaviors/koopa.inc.c:                o->parentObj->oKoopaRaceEndpointUnk100 = DIALOG_041;
src/game/behaviors/koopa.inc.c:            o->oFlags &= ~OBJ_FLAG_ACTIVE_FROM_AFAR;
src/game/behaviors/koopa.inc.c:    } else if (o->parentObj->oKoopaRaceEndpointUnk100 > 0) {
src/game/behaviors/koopa.inc.c:        s32 dialogResponse = cur_obj_update_dialog_with_cutscene(2, 1, CUTSCENE_DIALOG, o->parentObj->oKoopaRaceEndpointUnk100);
src/game/behaviors/koopa.inc.c:            o->parentObj->oKoopaRaceEndpointUnk100 = -1;
src/game/behaviors/koopa.inc.c:            o->oTimer = 0;
src/game/behaviors/koopa.inc.c:    } else if (o->parentObj->oKoopaRaceEndpointRaceStatus != 0) {
src/game/behaviors/koopa.inc.c:        spawn_default_star(sKoopaTheQuickProperties[o->oKoopaTheQuickRaceIndex].starPos[0],
src/game/behaviors/koopa.inc.c:                   sKoopaTheQuickProperties[o->oKoopaTheQuickRaceIndex].starPos[1],
src/game/behaviors/koopa.inc.c:                   sKoopaTheQuickProperties[o->oKoopaTheQuickRaceIndex].starPos[2]);
src/game/behaviors/koopa.inc.c:        o->parentObj->oKoopaRaceEndpointRaceStatus = 0;
src/game/behaviors/koopa.inc.c:    obj_update_blinking(&o->oKoopaBlinkTimer, 10, 15, 3);
src/game/behaviors/koopa.inc.c:    switch (o->oAction) {
src/game/behaviors/koopa.inc.c:    if (o->parentObj != o) {
src/game/behaviors/koopa.inc.c:        if (dist_between_objects(o, o->parentObj) < 400.0f) {
src/game/behaviors/koopa.inc.c:            o->parentObj->oKoopaRaceEndpointKoopaFinished = TRUE;
src/game/behaviors/koopa.inc.c:    o->oDeathSound = SOUND_OBJ_KOOPA_FLYGUY_DEATH;
src/game/behaviors/koopa.inc.c:    if (o->oKoopaMovementType >= KOOPA_BP_KOOPA_THE_QUICK_BASE) {
src/game/behaviors/koopa.inc.c:    } else if (obj_update_standard_actions(o->oKoopaAgility * 1.5f)) {
src/game/behaviors/koopa.inc.c:        o->oKoopaDistanceToMario = o->oDistanceToMario;
src/game/behaviors/koopa.inc.c:        o->oKoopaAngleToMario = o->oAngleToMario;
src/game/behaviors/koopa.inc.c:        switch (o->oKoopaMovementType) {
src/game/behaviors/koopa.inc.c:        o->oAnimState = 1;
src/game/behaviors/koopa.inc.c:    obj_face_yaw_approach(o->oMoveAngleYaw, 0x600);
src/game/behaviors/koopa.inc.c:    if (o->oKoopaRaceEndpointRaceBegun && !o->oKoopaRaceEndpointRaceEnded) {
src/game/behaviors/koopa.inc.c:        if (o->oKoopaRaceEndpointKoopaFinished || o->oDistanceToMario < 400.0f) {
src/game/behaviors/koopa.inc.c:            o->oKoopaRaceEndpointRaceEnded = TRUE;
src/game/behaviors/koopa.inc.c:            if (!o->oKoopaRaceEndpointKoopaFinished) {
src/game/behaviors/koopa.inc.c:                    o->oKoopaRaceEndpointRaceStatus = -1;
src/game/behaviors/koopa.inc.c:                    o->oKoopaRaceEndpointRaceStatus = 1;
src/game/behaviors/koopa_shell.inc.c:    if (o->oTimer == 0) {
src/game/behaviors/koopa_shell.inc.c:        o->oMoveAngleYaw = random_u16();
src/game/behaviors/koopa_shell.inc.c:        o->oVelY = random_float() * 30.0f;
src/game/behaviors/koopa_shell.inc.c:        o->oGravity = -4.0f;
src/game/behaviors/koopa_shell.inc.c:        o->oAnimState = random_float() * 10.0f;
src/game/behaviors/koopa_shell.inc.c:        o->oKoopaShellFlameUnkF8 = 4.0f;
src/game/behaviors/koopa_shell.inc.c:    if (o->oFloorHeight > o->oPosY || o->oTimer > 10)
src/game/behaviors/koopa_shell.inc.c:    o->oKoopaShellFlameUnkF8 += -0.3;
src/game/behaviors/koopa_shell.inc.c:    cur_obj_scale(o->oKoopaShellFlameUnkF8);
src/game/behaviors/koopa_shell.inc.c:    switch (o->oAction) {
src/game/behaviors/koopa_shell.inc.c:            if (o->oTimer > 300) {
src/game/behaviors/koopa_shell.inc.c:            if (o->oInteractStatus & INT_STATUS_INTERACTED)
src/game/behaviors/koopa_shell.inc.c:                o->oAction++;
src/game/behaviors/koopa_shell.inc.c:            o->oFaceAngleYaw += 0x1000;
src/game/behaviors/koopa_shell.inc.c:            if (absf(find_water_level(o->oPosX, o->oPosZ) - o->oPosY) < 10.0f)
src/game/behaviors/koopa_shell.inc.c:            else if (5.0f > absf(o->oPosY - o->oFloorHeight)) {
src/game/behaviors/koopa_shell.inc.c:            o->oFaceAngleYaw = gMarioObject->oMoveAngleYaw;
src/game/behaviors/koopa_shell.inc.c:            if (o->oInteractStatus & INT_STATUS_STOP_RIDING) {
src/game/behaviors/koopa_shell.inc.c:                o->oAction = 0;
src/game/behaviors/koopa_shell.inc.c:    o->oInteractStatus = 0;
src/game/behaviors/koopa_shell.inc.c:    s16 sp24 = o->header.gfx.unk38.animFrame;
src/game/behaviors/koopa_shell.inc.c:    switch (o->oAction) {
src/game/behaviors/koopa_shell.inc.c:            if (o->oInteractStatus & INT_STATUS_INTERACTED) {
src/game/behaviors/koopa_shell.inc.c:                o->oAction++;
src/game/behaviors/koopa_shell.inc.c:            if (o->oDistanceToMario < 3000.0f) {
src/game/behaviors/koopa_shell.inc.c:                o->oTimer = 0;
src/game/behaviors/koopa_shell.inc.c:            if (o->oTimer > 300) {
src/game/behaviors/koopa_shell.inc.c:                o->oPosX = o->oHomeX;
src/game/behaviors/koopa_shell.inc.c:                o->oPosY = o->oHomeY;
src/game/behaviors/koopa_shell.inc.c:                o->oPosZ = o->oHomeZ;
src/game/behaviors/koopa_shell.inc.c:            o->oFaceAngleYaw = gMarioObject->oMoveAngleYaw;
src/game/behaviors/koopa_shell.inc.c:            if ((gMarioState->YoshiCoins > 4)&&(o->oBehParams2ndByte == 0)) {
src/game/behaviors/koopa_shell.inc.c:                spawn_default_star(o->oPosX, o->oPosY+400.0f, o->oPosZ);
src/game/behaviors/koopa_shell.inc.c:                o->oBehParams2ndByte = 1;
src/game/behaviors/koopa_shell.inc.c:            o->oTimer = 0;
src/game/behaviors/koopa_shell.inc.c:            o->oVelY = 0;
src/game/behaviors/koopa_shell.inc.c:            if (o->oInteractStatus & INT_STATUS_STOP_RIDING) {
src/game/behaviors/koopa_shell.inc.c:                o->oAction = 0;
src/game/behaviors/koopa_shell.inc.c:                if ((sp24 == 0 || sp24 == 15)&&((o->oPosY - o->oFloorHeight) < 10.0f)) {
src/game/behaviors/koopa_shell.inc.c:    o->oInteractStatus = 0;
src/game/behaviors/koopa_shell_underwater.inc.c:    switch (o->oHeldState) {
src/game/behaviors/koopa_shell_underwater.inc.c:    if (o->oInteractStatus & INT_STATUS_STOP_RIDING) {
src/game/behaviors/koopa_shell_underwater.inc.c:    o->oInteractStatus = 0;
src/game/behaviors/lll_floating_wood_piece.inc.c:    if (o->oTimer == 0)
src/game/behaviors/lll_floating_wood_piece.inc.c:        o->oPosY -= 100.0f;
src/game/behaviors/lll_floating_wood_piece.inc.c:    o->oPosY += sins(o->oLllWoodPieceOscillationTimer) * 3.0f;
src/game/behaviors/lll_floating_wood_piece.inc.c:    o->oLllWoodPieceOscillationTimer += 0x400;
src/game/behaviors/lll_floating_wood_piece.inc.c:    if (o->parentObj->oAction == 2)
src/game/behaviors/lll_floating_wood_piece.inc.c:    switch (o->oAction) {
src/game/behaviors/lll_floating_wood_piece.inc.c:            if (o->oDistanceToMario < 2500.0f) {
src/game/behaviors/lll_floating_wood_piece.inc.c:                o->oAction = 1;
src/game/behaviors/lll_floating_wood_piece.inc.c:            if (o->oDistanceToMario > 2600.0f)
src/game/behaviors/lll_floating_wood_piece.inc.c:                o->oAction = 2;
src/game/behaviors/lll_floating_wood_piece.inc.c:            o->oAction = 0;
src/game/behaviors/lll_hexagonal_ring.inc.c:    o->oCollisionDistance = 4000.0f;
src/game/behaviors/lll_hexagonal_ring.inc.c:    o->oDrawingDistance = 8000.0f;
src/game/behaviors/lll_hexagonal_ring.inc.c:    switch (o->oAction) {
src/game/behaviors/lll_hexagonal_ring.inc.c:                o->oAction++;
src/game/behaviors/lll_hexagonal_ring.inc.c:            o->oAngleVelYaw = 0x100;
src/game/behaviors/lll_hexagonal_ring.inc.c:            o->oAngleVelYaw = 256.0f - sins(o->oTimer << 7) * 256.0f;
src/game/behaviors/lll_hexagonal_ring.inc.c:            if (o->oTimer > 128)
src/game/behaviors/lll_hexagonal_ring.inc.c:                o->oAction++;
src/game/behaviors/lll_hexagonal_ring.inc.c:                o->oAction++;
src/game/behaviors/lll_hexagonal_ring.inc.c:            if (o->oTimer > 128)
src/game/behaviors/lll_hexagonal_ring.inc.c:                o->oAction++;
src/game/behaviors/lll_hexagonal_ring.inc.c:            o->oAngleVelYaw = 0;
src/game/behaviors/lll_hexagonal_ring.inc.c:            o->oAngleVelYaw = sins(o->oTimer << 7) * 256.0f;
src/game/behaviors/lll_hexagonal_ring.inc.c:            if (o->oTimer > 128)
src/game/behaviors/lll_hexagonal_ring.inc.c:                o->oAction = 0;
src/game/behaviors/lll_hexagonal_ring.inc.c:            o->oAction = 0;
src/game/behaviors/lll_hexagonal_ring.inc.c:    o->oAngleVelYaw = -o->oAngleVelYaw;
src/game/behaviors/lll_hexagonal_ring.inc.c:    o->oMoveAngleYaw += o->oAngleVelYaw;
src/game/behaviors/lll_octagonal_rotating_mesh.inc.c:            o->oMoveAngleYaw = a0[a1 + 2];
src/game/behaviors/lll_octagonal_rotating_mesh.inc.c:            o->oForwardVel = a0[a1 + 3] / 100.0f;
src/game/behaviors/lll_octagonal_rotating_mesh.inc.c:                o->oTimer = 0;
src/game/behaviors/lll_octagonal_rotating_mesh.inc.c:            o->oMoveAngleYaw = a0[a1 + 2];
src/game/behaviors/lll_octagonal_rotating_mesh.inc.c:            o->oForwardVel = a0[a1 + 3] / 100.0f;
src/game/behaviors/lll_octagonal_rotating_mesh.inc.c:            if (o->oTimer > a0[a1 + 1]) {
src/game/behaviors/lll_octagonal_rotating_mesh.inc.c:                o->oTimer = 0;
src/game/behaviors/lll_octagonal_rotating_mesh.inc.c:            approach_f32_signed(&o->oForwardVel, a0[a1 + 2] / 100.0f, a0[a1 + 3] / 100.0f);
src/game/behaviors/lll_octagonal_rotating_mesh.inc.c:            if (o->oTimer > a0[a1 + 1]) {
src/game/behaviors/lll_octagonal_rotating_mesh.inc.c:                o->oTimer = 0;
src/game/behaviors/lll_octagonal_rotating_mesh.inc.c:            o->oForwardVel = 0.0f;
src/game/behaviors/lll_octagonal_rotating_mesh.inc.c:    if (o->oAction == 0) {
src/game/behaviors/lll_octagonal_rotating_mesh.inc.c:        o->oHorizontalMovementUnkF8 = 0;
src/game/behaviors/lll_octagonal_rotating_mesh.inc.c:        o->oAction++;
src/game/behaviors/lll_octagonal_rotating_mesh.inc.c:        o->oHorizontalMovementUnkF8 =
src/game/behaviors/lll_octagonal_rotating_mesh.inc.c:            lll_octagonal_mesh_move(D_8032F8C8[o->oBehParams2ndByte], o->oHorizontalMovementUnkF8);
src/game/behaviors/lll_octagonal_rotating_mesh.inc.c:    print_debug_top_down_objectinfo("number %d\n", o->oHorizontalMovementUnkF8);
src/game/behaviors/lll_octagonal_rotating_mesh.inc.c:    if (lll_octagonal_mesh_find_y_offset(&o->oHorizontalMovementUnk104, &o->oHorizontalMovementUnk108, 0x400, -80)) {
src/game/behaviors/lll_octagonal_rotating_mesh.inc.c:        o->oHorizontalMovementUnkF4 += 0x800;
src/game/behaviors/lll_octagonal_rotating_mesh.inc.c:        o->oHorizontalMovementUnk100 -= sins(o->oHorizontalMovementUnkF4) * 2;
src/game/behaviors/lll_octagonal_rotating_mesh.inc.c:    o->oPosY = o->oHorizontalMovementUnk100 + o->oHomeY + o->oHorizontalMovementUnk108;
src/game/behaviors/lll_rotating_hex_flame.inc.c:    f32 sp24 = o->oLllRotatingHexFlameUnkF4;
src/game/behaviors/lll_rotating_hex_flame.inc.c:    f32 sp20 = o->oLllRotatingHexFlameUnkF8;
src/game/behaviors/lll_rotating_hex_flame.inc.c:    f32 sp1C = o->oLllRotatingHexFlameUnkFC;
src/game/behaviors/lll_rotating_hex_flame.inc.c:    cur_obj_set_pos_relative(o->parentObj, sp24, sp20, sp1C);
src/game/behaviors/lll_rotating_hex_flame.inc.c:    o->oPosY = o->parentObj->oPosY + 100.0f;
src/game/behaviors/lll_rotating_hex_flame.inc.c:    if (o->parentObj->oAction == 3)
src/game/behaviors/lll_rotating_hex_flame.inc.c:    sp20 = (o->oBehParams2ndByte == 0) ? 4 : 3;
src/game/behaviors/lll_rotating_hex_flame.inc.c:        sp2C->oLllRotatingHexFlameUnkF8 = o->oPosY - 200.0f;
src/game/behaviors/lll_rotating_hex_flame.inc.c:    if (o->oDistanceToMario < 3000.0f)
src/game/behaviors/lll_rotating_hex_flame.inc.c:        o->oAction = 1;
src/game/behaviors/lll_rotating_hex_flame.inc.c:    o->oAngleVelYaw = 0;
src/game/behaviors/lll_rotating_hex_flame.inc.c:    o->oMoveAngleYaw = 0;
src/game/behaviors/lll_rotating_hex_flame.inc.c:    o->oAction = 2;
src/game/behaviors/lll_rotating_hex_flame.inc.c:    o->oAngleVelYaw = -0x100;
src/game/behaviors/lll_rotating_hex_flame.inc.c:    o->oMoveAngleYaw += o->oAngleVelYaw;
src/game/behaviors/lll_rotating_hex_flame.inc.c:    if (o->oDistanceToMario > 3200.0f)
src/game/behaviors/lll_rotating_hex_flame.inc.c:        o->oAction = 3;
src/game/behaviors/lll_rotating_hex_flame.inc.c:    o->oAction = 0;
src/game/behaviors/lll_rotating_hex_flame.inc.c:    if (o->oBehParams2ndByte == 0)
src/game/behaviors/lll_sinking_rectangle.inc.c:    switch (o->oAction) {
src/game/behaviors/lll_sinking_rectangle.inc.c:            o->oAction++;
src/game/behaviors/lll_sinking_rectangle.inc.c:            o->oPosY -= sins(o->oLllWoodPieceOscillationTimer) * a0;
src/game/behaviors/lll_sinking_rectangle.inc.c:            o->oLllWoodPieceOscillationTimer += a1;
src/game/behaviors/lll_sinking_rectangle.inc.c:    if (o->oMoveAngleYaw != 0)
src/game/behaviors/lll_sinking_rectangle.inc.c:        o->oFaceAnglePitch = sins(o->oLllWoodPieceOscillationTimer) * 512.0f;
src/game/behaviors/lll_sinking_rectangle.inc.c:        o->oLllWoodPieceOscillationTimer += 0x100;
src/game/behaviors/lll_sinking_rock_block.inc.c:    //lll_octagonal_mesh_find_y_offset(&o->oSinkWhenSteppedOnUnk104, &o->oSinkWhenSteppedOnUnk108, 124, -110);
src/game/behaviors/lll_sinking_rock_block.inc.c:    //o->oGraphYOffset = 0.0f;
src/game/behaviors/lll_sinking_rock_block.inc.c:    //o->oPosY = o->oHomeY + o->oSinkWhenSteppedOnUnk108;
src/game/behaviors/lll_sinking_rock_block.inc.c:    switch (o->oAction) {
src/game/behaviors/lll_sinking_rock_block.inc.c:        o->oPosY = -20.0f + o->oHomeY + (sins(o->oTimer*0x200) * 20.0f);
src/game/behaviors/lll_sinking_rock_block.inc.c:            o->oAction ++;
src/game/behaviors/lll_sinking_rock_block.inc.c:        o->oPosY -= 2.5f;
src/game/behaviors/lll_sinking_rock_block.inc.c:        o->oVelY = -2.5f;
src/game/behaviors/lll_sinking_rock_block.inc.c:            o->oAction ++;
src/game/behaviors/lll_sinking_rock_block.inc.c:        o->oPosY += 2.0f;
src/game/behaviors/lll_sinking_rock_block.inc.c:        o->oVelY += -2.0f;
src/game/behaviors/lll_sinking_rock_block.inc.c:            o->oAction = 1;
src/game/behaviors/lll_sinking_rock_block.inc.c:            o->oTimer = 0;
src/game/behaviors/lll_sinking_rock_block.inc.c:        if (o->oPosY > o->oHomeY-20.0f) {
src/game/behaviors/lll_sinking_rock_block.inc.c:            o->oAction = 0;
src/game/behaviors/lll_sinking_rock_block.inc.c:            o->oTimer = 0;
src/game/behaviors/lll_volcano_flames.inc.c:    o->oPosX += o->oVelX;
src/game/behaviors/lll_volcano_flames.inc.c:    o->oPosZ += o->oVelZ;
src/game/behaviors/lll_volcano_flames.inc.c:    if (o->oMoveFlags & 0x33)
src/game/behaviors/mad_piano.inc.c:    if (o->oDistanceToMario < 500.0f) {
src/game/behaviors/mad_piano.inc.c:        if (o->oTimer > 20) {
src/game/behaviors/mad_piano.inc.c:                o->oAction = MAD_PIANO_ACT_ATTACK;
src/game/behaviors/mad_piano.inc.c:        o->oTimer = 0;
src/game/behaviors/mad_piano.inc.c:    if (o->oDistanceToMario < 500.0f) {
src/game/behaviors/mad_piano.inc.c:        o->oTimer = 0;
src/game/behaviors/mad_piano.inc.c:    if (o->oTimer > 80 && cur_obj_check_if_near_animation_end()) {
src/game/behaviors/mad_piano.inc.c:        o->oAction = MAD_PIANO_ACT_WAIT;
src/game/behaviors/mad_piano.inc.c:        o->oForwardVel = 0.0f;
src/game/behaviors/mad_piano.inc.c:        f32 dx = o->oPosX - o->oHomeX;
src/game/behaviors/mad_piano.inc.c:        f32 dz = o->oPosZ - o->oHomeZ;
src/game/behaviors/mad_piano.inc.c:            o->oPosX = o->oHomeX + dx * distToHome;
src/game/behaviors/mad_piano.inc.c:            o->oPosZ = o->oHomeZ + dz * distToHome;
src/game/behaviors/mad_piano.inc.c:        cur_obj_rotate_yaw_toward(o->oAngleToMario, 400);
src/game/behaviors/mad_piano.inc.c:        o->oForwardVel = 5.0f;
src/game/behaviors/mad_piano.inc.c:    obj_check_attacks(&sMadPianoHitbox, o->oAction);
src/game/behaviors/mad_piano.inc.c:    if (!(o->activeFlags & ACTIVE_FLAG_IN_DIFFERENT_ROOM)) {
src/game/behaviors/mad_piano.inc.c:        o->oFaceAngleYaw = o->oMoveAngleYaw - 0x4000;
src/game/behaviors/mad_piano.inc.c:        switch (o->oAction) {
src/game/behaviors/manta_ray.inc.c:    o->parentObj = sp1C;
src/game/behaviors/manta_ray.inc.c:    sp1E = o->header.gfx.unk38.animFrame;
src/game/behaviors/manta_ray.inc.c:    o->oMantaUnkF8 = o->oPathedTargetYaw;
src/game/behaviors/manta_ray.inc.c:    o->oMantaUnkF4 = o->oPathedTargetPitch;
src/game/behaviors/manta_ray.inc.c:    o->oForwardVel = 10.0f;
src/game/behaviors/manta_ray.inc.c:    o->oMoveAngleYaw = approach_s16_symmetric(o->oMoveAngleYaw, o->oMantaUnkF8, 0x80);
src/game/behaviors/manta_ray.inc.c:    o->oMoveAnglePitch = approach_s16_symmetric(o->oMoveAnglePitch, o->oMantaUnkF4, 0x80);
src/game/behaviors/manta_ray.inc.c:    if ((s16) o->oMantaUnkF8 != (s16) o->oMoveAngleYaw) {
src/game/behaviors/manta_ray.inc.c:        o->oMoveAngleRoll -= 91;
src/game/behaviors/manta_ray.inc.c:        if (o->oMoveAngleRoll < -5461.3332)
src/game/behaviors/manta_ray.inc.c:            o->oMoveAngleRoll = -0x4000 / 3;
src/game/behaviors/manta_ray.inc.c:        o->oMoveAngleRoll += 91;
src/game/behaviors/manta_ray.inc.c:        if (o->oMoveAngleRoll > 5461.3332)
src/game/behaviors/manta_ray.inc.c:            o->oMoveAngleRoll = 0x4000 / 3;
src/game/behaviors/manta_ray.inc.c:    struct Object *sp1C = o->parentObj;
src/game/behaviors/manta_ray.inc.c:    if (o->oTimer == 300)
src/game/behaviors/manta_ray.inc.c:        o->oTimer = 0;
src/game/behaviors/manta_ray.inc.c:    if (o->oTimer == 0 || o->oTimer == 50 || o->oTimer == 150 || o->oTimer == 200 || o->oTimer == 250) {
src/game/behaviors/manta_ray.inc.c:        sp18->oFaceAngleYaw = o->oMoveAngleYaw;
src/game/behaviors/manta_ray.inc.c:        sp18->oFaceAnglePitch = o->oMoveAnglePitch + 0x4000;
src/game/behaviors/manta_ray.inc.c:        sp18->oPosX = o->oPosX + 200.0f * sins(o->oMoveAngleYaw + 0x8000);
src/game/behaviors/manta_ray.inc.c:        sp18->oPosY = o->oPosY + 10.0f + 200.0f * sins(o->oMoveAnglePitch);
src/game/behaviors/manta_ray.inc.c:        sp18->oPosZ = o->oPosZ + 200.0f * coss(o->oMoveAngleYaw + 0x8000);
src/game/behaviors/manta_ray.inc.c:    switch (o->oAction) {
src/game/behaviors/manta_ray.inc.c:            if (o->oMantaUnk1AC == 5) {
src/game/behaviors/manta_ray.inc.c:                o->oAction = 1;
src/game/behaviors/manta_ray.inc.c:    if (o->oInteractStatus & INT_STATUS_INTERACTED)
src/game/behaviors/manta_ray.inc.c:        o->oInteractStatus = 0;
src/game/behaviors/metal_box.inc.c:    f32 sp20 = o->oPosX + sins(o->oMoveAngleYaw) * a1;
src/game/behaviors/metal_box.inc.c:    f32 sp18 = o->oPosZ + coss(o->oMoveAngleYaw) * a1;
src/game/behaviors/metal_box.inc.c:    floorHeight = find_floor(sp20, o->oPosY, sp18, &sp24);
src/game/behaviors/metal_box.inc.c:    if (absf(floorHeight - o->oPosY) < a0) // abs
src/game/behaviors/metal_box.inc.c:    o->oForwardVel = 0.0f;
src/game/behaviors/metal_box.inc.c:            o->oMoveAngleYaw = (s16)((gMarioObject->oMoveAngleYaw + 0x2000) & 0xc000);
src/game/behaviors/metal_box.inc.c:                o->oForwardVel = 4.0f;
src/game/behaviors/metal_box.inc.c:    starId = (o->oBehParams >> 24) & 0xFF;
src/game/behaviors/metal_box.inc.c:    if ((gDialogCourseActNum-1 == starId)&&(o->oBehParams2ndByte == 2)) {
src/game/behaviors/metal_box.inc.c:        gMarioState->StarRadarLocation[0] = (s16)o->oPosX;
src/game/behaviors/metal_box.inc.c:        gMarioState->StarRadarLocation[1] = (s16)o->oPosY;
src/game/behaviors/metal_box.inc.c:        gMarioState->StarRadarLocation[2] = (s16)o->oPosZ;
src/game/behaviors/metal_box.inc.c:    if (o->oHealth == 4) {
src/game/behaviors/metal_box.inc.c:        o->oHealth = 3;
src/game/behaviors/metal_box.inc.c:        o->prevObj = spawn_object(o,MODEL_NONE, bhvMetalCrateCol);
src/game/behaviors/metal_box.inc.c:        o->oGravity = 3.0f;
src/game/behaviors/metal_box.inc.c:        o->oFriction = 1.0f;
src/game/behaviors/metal_box.inc.c:        o->oBuoyancy = 1.0f;
src/game/behaviors/metal_box.inc.c:        o->oForwardVel = 0.0f;
src/game/behaviors/metal_box.inc.c:        if (o->oDistanceToMario < 180.0f) {
src/game/behaviors/metal_box.inc.c:                o->oMoveAngleYaw = gMarioObject->oMoveAngleYaw;
src/game/behaviors/metal_box.inc.c:                o->oForwardVel = 4.0f;
src/game/behaviors/metal_box.inc.c:        if (o->oAction == OBJ_ACT_LAVA_DEATH) {
src/game/behaviors/metal_box.inc.c:            o->oHealth = 0;
src/game/behaviors/metal_box.inc.c:        if (o->oHealth < 1) {
src/game/behaviors/metal_box.inc.c:                switch(o->oBehParams2ndByte) {
src/game/behaviors/metal_box.inc.c:                    spawn_default_star(o->oPosX, o->oPosY+ 100.0f, o->oPosZ);
src/game/behaviors/metal_box.inc.c:                o->prevObj->activeFlags = ACTIVE_FLAG_DEACTIVATED;
src/game/behaviors/metal_box.inc.c:                o->activeFlags = ACTIVE_FLAG_DEACTIVATED;
src/game/behaviors/metal_box.inc.c:    if (o->oAction==0) {
src/game/behaviors/metal_box.inc.c:        o->oGravity = 3.0f;
src/game/behaviors/metal_box.inc.c:        o->oFriction = 1.0f;
src/game/behaviors/metal_box.inc.c:        o->oBuoyancy = 1.0f;
src/game/behaviors/metal_box.inc.c:        o->oForwardVel = 0.0f;
src/game/behaviors/metal_box.inc.c:        o->prevObj = spawn_object(o,0xFB, bhvStaticObject);
src/game/behaviors/metal_box.inc.c:        o->oAction = 1;
src/game/behaviors/metal_box.inc.c:            if (o->oAction == 1) {
src/game/behaviors/metal_box.inc.c:                o->oAction = 2;
src/game/behaviors/metal_box.inc.c:            o->oFaceAngleYaw = approach_s16_symmetric(o->oFaceAngleYaw, gMarioObject->oMoveAngleYaw, 0x300);
src/game/behaviors/metal_box.inc.c:            o->oMoveAngleYaw = o->oFaceAngleYaw;
src/game/behaviors/metal_box.inc.c:            if (o->oForwardVel < 15.0f) {
src/game/behaviors/metal_box.inc.c:                o->oForwardVel ++;
src/game/behaviors/metal_box.inc.c:                o->oForwardVel += 5.0f;
src/game/behaviors/metal_box.inc.c:            gMarioState->pos[0] = (gMarioState->pos[0]+o->oPosX)/2;
src/game/behaviors/metal_box.inc.c:            gMarioState->pos[2] = (gMarioState->pos[2]+o->oPosZ)/2;
src/game/behaviors/metal_box.inc.c:        o->prevObj->oPosX = o->oPosX;
src/game/behaviors/metal_box.inc.c:        o->prevObj->oPosY = o->oPosY+160.0f;
src/game/behaviors/metal_box.inc.c:        o->prevObj->oPosZ = o->oPosZ;
src/game/behaviors/metal_box.inc.c:        o->prevObj->oFaceAnglePitch += o->oForwardVel*40;
src/game/behaviors/metal_box.inc.c:        o->prevObj->oFaceAngleYaw = o->oFaceAngleYaw;
src/game/behaviors/metal_box.inc.c:        if (o->oPosY < 0.0f) {
src/game/behaviors/metal_box.inc.c:            o->oPosX = o->oHomeX;
src/game/behaviors/metal_box.inc.c:            o->oPosY = o->oHomeY;
src/game/behaviors/metal_box.inc.c:            o->oPosZ = o->oHomeZ;
src/game/behaviors/metal_box.inc.c:            o->oForwardVel = 0;
src/game/behaviors/metal_box.inc.c:            o->oAction = 1;
src/game/behaviors/metal_box.inc.c:        myhorse->oPosX = o->oPosX + (sins(o->oFaceAngleYaw) * 300.0f);
src/game/behaviors/metal_box.inc.c:        myhorse->oPosZ = o->oPosZ + (coss(o->oFaceAngleYaw) * 300.0f);
src/game/behaviors/metal_box.inc.c:        myhorse->oFaceAngleYaw = o->oFaceAngleYaw;
src/game/behaviors/metal_box.inc.c:            myhorse->oPosY = o->oPosY;
src/game/behaviors/metal_box.inc.c:        o->oDontInertia = FALSE;
src/game/behaviors/metal_box.inc.c:    o->oPosX = o->parentObj->oPosX;
src/game/behaviors/metal_box.inc.c:    o->oPosY = o->parentObj->oPosY;
src/game/behaviors/metal_box.inc.c:    o->oPosZ = o->parentObj->oPosZ;
src/game/behaviors/mips.inc.c:        o->oBehParams2ndByte = 0;
src/game/behaviors/mips.inc.c:        o->oMipsForwardVelocity = 40.0f;
src/game/behaviors/mips.inc.c:        o->oBehParams2ndByte = 1;
src/game/behaviors/mips.inc.c:        o->oMipsForwardVelocity = 45.0f;
src/game/behaviors/mips.inc.c:        o->activeFlags = ACTIVE_FLAG_DEACTIVATED;
src/game/behaviors/mips.inc.c:    o->oInteractionSubtype = INT_SUBTYPE_HOLDABLE_NPC;
src/game/behaviors/mips.inc.c:    o->oGravity = 15.0f;
src/game/behaviors/mips.inc.c:    o->oGravity = 2.5f;
src/game/behaviors/mips.inc.c:    o->oFriction = 0.89f;
src/game/behaviors/mips.inc.c:    o->oBuoyancy = 1.2f;
src/game/behaviors/mips.inc.c:    o->oMipsStartWaypointIndex = furthestWaypointIndex;
src/game/behaviors/mips.inc.c:    return (s16) o->oMipsStartWaypointIndex;
src/game/behaviors/mips.inc.c:    o->oForwardVel = 0.0f;
src/game/behaviors/mips.inc.c:    if (is_point_within_radius_of_mario(o->oPosX, o->oPosY, o->oPosZ, 500)) {
src/game/behaviors/mips.inc.c:            o->oAction = MIPS_ACT_WAIT_FOR_ANIMATION_DONE;
src/game/behaviors/mips.inc.c:            o->oAction = MIPS_ACT_FOLLOW_PATH;
src/game/behaviors/mips.inc.c:    waypoint = segmented_to_virtual(*(pathBase + o->oMipsStartWaypointIndex));
src/game/behaviors/mips.inc.c:    o->oPathedStartWaypoint = waypoint;
src/game/behaviors/mips.inc.c:    o->oForwardVel = o->oMipsForwardVelocity;
src/game/behaviors/mips.inc.c:    o->oForwardVel = 45.0f;
src/game/behaviors/mips.inc.c:    o->oMoveAngleYaw = o->oPathedTargetYaw;
src/game/behaviors/mips.inc.c:        o->oAction = MIPS_ACT_WAIT_FOR_NEARBY_MARIO;
src/game/behaviors/mips.inc.c:        o->oAction = MIPS_ACT_IDLE;
src/game/behaviors/mips.inc.c:    o->header.gfx.unk38.animFrame = 0;
src/game/behaviors/mips.inc.c:        o->oAction = MIPS_ACT_WAIT_FOR_ANIMATION_DONE;
src/game/behaviors/mips.inc.c:        o->oFlags |= OBJ_FLAG_SET_FACE_YAW_TO_MOVE_YAW;
src/game/behaviors/mips.inc.c:        o->oMoveAngleYaw = o->oFaceAngleYaw;
src/game/behaviors/mips.inc.c:    o->oForwardVel = 0;
src/game/behaviors/mips.inc.c:    if (o->oMipsStarStatus == MIPS_STAR_STATUS_SHOULD_SPAWN_STAR) {
src/game/behaviors/mips.inc.c:        bhv_spawn_star_no_level_exit(o->oBehParams2ndByte + 3);
src/game/behaviors/mips.inc.c:        o->oMipsStarStatus = MIPS_STAR_STATUS_ALREADY_SPAWNED_STAR;
src/game/behaviors/mips.inc.c:    switch (o->oAction) {
src/game/behaviors/mips.inc.c:    o->header.gfx.node.flags |= GRAPH_RENDER_INVISIBLE;
src/game/behaviors/mips.inc.c:    if (o->oMipsStarStatus == MIPS_STAR_STATUS_HAVENT_SPAWNED_STAR) {
src/game/behaviors/mips.inc.c:        if (o->oBehParams2ndByte == 0)
src/game/behaviors/mips.inc.c:            o->activeFlags |= ACTIVE_FLAG_INITIATED_TIME_STOP;
src/game/behaviors/mips.inc.c:                o->oInteractionSubtype |= INT_SUBTYPE_DROP_IMMEDIATELY;
src/game/behaviors/mips.inc.c:                o->activeFlags &= ~ACTIVE_FLAG_INITIATED_TIME_STOP;
src/game/behaviors/mips.inc.c:                o->oMipsStarStatus = MIPS_STAR_STATUS_SHOULD_SPAWN_STAR;
src/game/behaviors/mips.inc.c:    o->header.gfx.node.flags &= ~GRAPH_RENDER_INVISIBLE;
src/game/behaviors/mips.inc.c:    o->oHeldState = HELD_FREE;
src/game/behaviors/mips.inc.c:    o->oForwardVel = 3.0f;
src/game/behaviors/mips.inc.c:    o->oAction = MIPS_ACT_IDLE;
src/game/behaviors/mips.inc.c:    o->header.gfx.node.flags &= ~GRAPH_RENDER_INVISIBLE;
src/game/behaviors/mips.inc.c:    o->oHeldState = HELD_FREE;
src/game/behaviors/mips.inc.c:    o->oFlags &= ~OBJ_FLAG_SET_FACE_YAW_TO_MOVE_YAW;
src/game/behaviors/mips.inc.c:    o->oForwardVel = 25.0f;
src/game/behaviors/mips.inc.c:    o->oVelY = 20.0f;
src/game/behaviors/mips.inc.c:    o->oAction = MIPS_ACT_FALL_DOWN;
src/game/behaviors/mips.inc.c:    switch (o->oHeldState) {
src/game/behaviors/moneybag.inc.c:    o->oGravity = 3.0f;
src/game/behaviors/moneybag.inc.c:    o->oFriction = 1.0f;
src/game/behaviors/moneybag.inc.c:    o->oBuoyancy = 2.0f;
src/game/behaviors/moneybag.inc.c:    o->oOpacity = 0;
src/game/behaviors/moneybag.inc.c:    if (o->oInteractStatus & INT_STATUS_INTERACTED) /* bit 15 */
src/game/behaviors/moneybag.inc.c:        if (o->oInteractStatus & INT_STATUS_ATTACKED_MARIO) /* bit 13 */
src/game/behaviors/moneybag.inc.c:            o->oMoveAngleYaw = o->oAngleToMario + 0x8000;
src/game/behaviors/moneybag.inc.c:            o->oVelY = 30.0f;
src/game/behaviors/moneybag.inc.c:        if (o->oInteractStatus & INT_STATUS_WAS_ATTACKED) /* bit 14 */
src/game/behaviors/moneybag.inc.c:            o->oAction = MONEYBAG_ACT_DEATH;
src/game/behaviors/moneybag.inc.c:        o->oInteractStatus = 0;
src/game/behaviors/moneybag.inc.c:    s16 animFrame = o->header.gfx.unk38.animFrame;
src/game/behaviors/moneybag.inc.c:    switch (o->oMoneybagJumpState) {
src/game/behaviors/moneybag.inc.c:                o->oForwardVel = 20.0f;
src/game/behaviors/moneybag.inc.c:                o->oVelY = 40.0f;
src/game/behaviors/moneybag.inc.c:                o->oMoneybagJumpState = MONEYBAG_JUMP_JUMP;
src/game/behaviors/moneybag.inc.c:                o->oForwardVel = 0;
src/game/behaviors/moneybag.inc.c:                o->oVelY = 0;
src/game/behaviors/moneybag.inc.c:                o->oMoneybagJumpState = MONEYBAG_JUMP_LANDING;
src/game/behaviors/moneybag.inc.c:                o->oMoneybagJumpState = MONEYBAG_JUMP_LANDING;
src/game/behaviors/moneybag.inc.c:            o->oForwardVel = 10.0f;
src/game/behaviors/moneybag.inc.c:            if (o->oTimer >= 61) {
src/game/behaviors/moneybag.inc.c:                o->oMoneybagJumpState = MONEYBAG_JUMP_LANDING;
src/game/behaviors/moneybag.inc.c:                o->oForwardVel = 0;
src/game/behaviors/moneybag.inc.c:                o->header.gfx.unk38.animFrame = 0;
src/game/behaviors/moneybag.inc.c:            o->oForwardVel = 5.0f;
src/game/behaviors/moneybag.inc.c:    obj_return_and_displace_home(o, o->oHomeX, o->oHomeY, o->oHomeZ, 200);
src/game/behaviors/moneybag.inc.c:        && (o->oMoneybagJumpState == MONEYBAG_JUMP_LANDING)) {
src/game/behaviors/moneybag.inc.c:            o->oMoneybagJumpState = MONEYBAG_JUMP_WALK_AROUND;
src/game/behaviors/moneybag.inc.c:            o->oTimer = 0;
src/game/behaviors/moneybag.inc.c:            o->oMoneybagJumpState = MONEYBAG_JUMP_PREPARE;
src/game/behaviors/moneybag.inc.c:    if (!is_point_within_radius_of_mario(o->oHomeX, o->oHomeY, o->oHomeZ, 800)
src/game/behaviors/moneybag.inc.c:        o->oAction = MONEYBAG_ACT_RETURN_HOME;
src/game/behaviors/moneybag.inc.c:    f32 sp28 = o->oHomeX - o->oPosX;
src/game/behaviors/moneybag.inc.c:    f32 sp24 = o->oHomeZ - o->oPosZ;
src/game/behaviors/moneybag.inc.c:    o->oMoveAngleYaw = approach_s16_symmetric(o->oMoveAngleYaw, sp22, 0x800);
src/game/behaviors/moneybag.inc.c:        && (o->oMoneybagJumpState == MONEYBAG_JUMP_LANDING))
src/game/behaviors/moneybag.inc.c:        o->oMoneybagJumpState = MONEYBAG_JUMP_WALK_HOME;
src/game/behaviors/moneybag.inc.c:    if (is_point_close_to_object(o, o->oHomeX, o->oHomeY, o->oHomeZ, 100)) {
src/game/behaviors/moneybag.inc.c:        o->oAction = MONEYBAG_ACT_DISAPPEAR;
src/game/behaviors/moneybag.inc.c:        o->oMoneybagJumpState = MONEYBAG_JUMP_LANDING;
src/game/behaviors/moneybag.inc.c:    if (is_point_within_radius_of_mario(o->oHomeX, o->oHomeY, o->oHomeZ, 800) == 1) {
src/game/behaviors/moneybag.inc.c:        o->oAction = MONEYBAG_ACT_MOVE_AROUND;
src/game/behaviors/moneybag.inc.c:        o->oMoneybagJumpState = MONEYBAG_JUMP_LANDING;
src/game/behaviors/moneybag.inc.c:    o->oOpacity -= 6;
src/game/behaviors/moneybag.inc.c:    if (o->oOpacity < 0) {
src/game/behaviors/moneybag.inc.c:        o->oOpacity = 0;
src/game/behaviors/moneybag.inc.c:        o->activeFlags = ACTIVE_FLAG_DEACTIVATED;
src/game/behaviors/moneybag.inc.c:    if (o->oTimer == 1) {
src/game/behaviors/moneybag.inc.c:        o->activeFlags = ACTIVE_FLAG_DEACTIVATED;
src/game/behaviors/moneybag.inc.c:    switch (o->oAction) {
src/game/behaviors/moneybag.inc.c:            o->oOpacity += 12;
src/game/behaviors/moneybag.inc.c:            if (o->oOpacity >= 256) {
src/game/behaviors/moneybag.inc.c:                o->oOpacity = 255;
src/game/behaviors/moneybag.inc.c:                o->parentObj->activeFlags = ACTIVE_FLAG_DEACTIVATED;
src/game/behaviors/moneybag.inc.c:                o->oAction = MONEYBAG_ACT_MOVE_AROUND;
src/game/behaviors/moneybag.inc.c:            if (o->oTimer >= 31)
src/game/behaviors/moneybag.inc.c:    switch (o->oAction) {
src/game/behaviors/moneybag.inc.c:            if (is_point_within_radius_of_mario(o->oPosX, o->oPosY, o->oPosZ, 400)) {
src/game/behaviors/moneybag.inc.c:                o->oAction = FAKE_MONEYBAG_COIN_ACT_TRANSFORM;
src/game/behaviors/moneybag.inc.c:    o->oInteractStatus = 0;
src/game/behaviors/monty_mole.inc.c:    if (o->parentObj == o) {
src/game/behaviors/monty_mole.inc.c:    } else if (o->oMontyMoleHoleCooldown > 0) {
src/game/behaviors/monty_mole.inc.c:        o->oMontyMoleHoleCooldown -= 1;
src/game/behaviors/monty_mole.inc.c:    o->oMontyMoleCurrentHole = NULL;
src/game/behaviors/monty_mole.inc.c:    if (o->oBehParams2ndByte != MONTY_MOLE_BP_NO_ROCK) {
src/game/behaviors/monty_mole.inc.c:    if ((o->oMontyMoleCurrentHole = monty_mole_select_available_hole(minDistToMario)) != NULL) {
src/game/behaviors/monty_mole.inc.c:        o->oMontyMoleCurrentHole->oMontyMoleHoleCooldown = -1;
src/game/behaviors/monty_mole.inc.c:        o->oPosX = o->oMontyMoleCurrentHole->oPosX;
src/game/behaviors/monty_mole.inc.c:        o->oPosY = o->oFloorHeight = o->oMontyMoleCurrentHole->oPosY;
src/game/behaviors/monty_mole.inc.c:        o->oPosZ = o->oMontyMoleCurrentHole->oPosZ;
src/game/behaviors/monty_mole.inc.c:        o->oFaceAnglePitch = 0;
src/game/behaviors/monty_mole.inc.c:        o->oMoveAngleYaw = o->oMontyMoleCurrentHole->oAngleToMario;
src/game/behaviors/monty_mole.inc.c:        if (o->oDistanceToMario > 500.0f || minDistToMario > 100.0f || random_sign() < 0) {
src/game/behaviors/monty_mole.inc.c:            o->oAction = MONTY_MOLE_ACT_RISE_FROM_HOLE;
src/game/behaviors/monty_mole.inc.c:            o->oVelY = 3.0f;
src/game/behaviors/monty_mole.inc.c:            o->oGravity = 0.0f;
src/game/behaviors/monty_mole.inc.c:            o->oAction = MONTY_MOLE_ACT_JUMP_OUT_OF_HOLE;
src/game/behaviors/monty_mole.inc.c:            o->oVelY = 50.0f;
src/game/behaviors/monty_mole.inc.c:            o->oGravity = -4.0f;
src/game/behaviors/monty_mole.inc.c:    if (o->oMontyMoleHeightRelativeToFloor >= 49.0f) {
src/game/behaviors/monty_mole.inc.c:        o->oPosY = o->oFloorHeight + 50.0f;
src/game/behaviors/monty_mole.inc.c:        o->oVelY = 0.0f;
src/game/behaviors/monty_mole.inc.c:            o->oAction = MONTY_MOLE_ACT_SPAWN_ROCK;
src/game/behaviors/monty_mole.inc.c:        if (o->oBehParams2ndByte != MONTY_MOLE_BP_NO_ROCK
src/game/behaviors/monty_mole.inc.c:            && abs_angle_diff(o->oAngleToMario, o->oMoveAngleYaw) < 0x4000
src/game/behaviors/monty_mole.inc.c:            o->prevObj = rock;
src/game/behaviors/monty_mole.inc.c:            o->oAction = MONTY_MOLE_ACT_THROW_ROCK;
src/game/behaviors/monty_mole.inc.c:            o->oAction = MONTY_MOLE_ACT_BEGIN_JUMP_INTO_HOLE;
src/game/behaviors/monty_mole.inc.c:        o->oAction = MONTY_MOLE_ACT_JUMP_INTO_HOLE;
src/game/behaviors/monty_mole.inc.c:        o->oVelY = 40.0f;
src/game/behaviors/monty_mole.inc.c:        o->oGravity = -6.0f;
src/game/behaviors/monty_mole.inc.c:        o->prevObj = NULL;
src/game/behaviors/monty_mole.inc.c:        o->oAction = MONTY_MOLE_ACT_BEGIN_JUMP_INTO_HOLE;
src/game/behaviors/monty_mole.inc.c:    o->oFaceAnglePitch = -atan2s(o->oVelY, -4.0f);
src/game/behaviors/monty_mole.inc.c:    if (o->oVelY < 0.0f && o->oMontyMoleHeightRelativeToFloor < 120.0f) {
src/game/behaviors/monty_mole.inc.c:        o->oAction = MONTY_MOLE_ACT_HIDE;
src/game/behaviors/monty_mole.inc.c:        o->oGravity = 0.0f;
src/game/behaviors/monty_mole.inc.c:    o->oMontyMoleCurrentHole->oMontyMoleHoleCooldown = 30;
src/game/behaviors/monty_mole.inc.c:    o->oAction = MONTY_MOLE_ACT_SELECT_HOLE;
src/game/behaviors/monty_mole.inc.c:    o->oVelY = 0.0f;
src/game/behaviors/monty_mole.inc.c:    if (o->oMoveFlags & OBJ_MOVE_MASK_ON_GROUND) {
src/game/behaviors/monty_mole.inc.c:        approach_f32_ptr(&o->oVelY, -4.0f, 0.5f);
src/game/behaviors/monty_mole.inc.c:    if (o->oVelY > 0.0f) {
src/game/behaviors/monty_mole.inc.c:        if (o->oMontyMoleHeightRelativeToFloor < 50.0f) {
src/game/behaviors/monty_mole.inc.c:            o->oPosY = o->oFloorHeight + 50.0f;
src/game/behaviors/monty_mole.inc.c:            o->oAction = MONTY_MOLE_ACT_BEGIN_JUMP_INTO_HOLE;
src/game/behaviors/monty_mole.inc.c:            o->oVelY = o->oGravity = 0.0f;
src/game/behaviors/monty_mole.inc.c:    o->oDeathSound = SOUND_OBJ_DYING_ENEMY1;
src/game/behaviors/monty_mole.inc.c:    o->oMontyMoleHeightRelativeToFloor = o->oPosY - o->oFloorHeight;
src/game/behaviors/monty_mole.inc.c:    switch (o->oAction) {
src/game/behaviors/monty_mole.inc.c:    if (obj_check_attacks(&sMontyMoleHitbox, o->oAction)) {
src/game/behaviors/monty_mole.inc.c:            f32 dx = o->oPosX - sMontyMoleLastKilledPosX;
src/game/behaviors/monty_mole.inc.c:            f32 dy = o->oPosY - sMontyMoleLastKilledPosY;
src/game/behaviors/monty_mole.inc.c:            f32 dz = o->oPosZ - sMontyMoleLastKilledPosZ;
src/game/behaviors/monty_mole.inc.c:        sMontyMoleLastKilledPosX = o->oPosX;
src/game/behaviors/monty_mole.inc.c:        sMontyMoleLastKilledPosY = o->oPosY;
src/game/behaviors/monty_mole.inc.c:        sMontyMoleLastKilledPosZ = o->oPosZ;
src/game/behaviors/monty_mole.inc.c:        o->prevObj = NULL;
src/game/behaviors/monty_mole.inc.c:    o->oParentRelativePosX = 80.0f;
src/game/behaviors/monty_mole.inc.c:    o->oParentRelativePosY = -50.0f;
src/game/behaviors/monty_mole.inc.c:    o->oParentRelativePosZ = 0.0f;
src/game/behaviors/monty_mole.inc.c:    if (o->parentObj->prevObj == NULL) {
src/game/behaviors/monty_mole.inc.c:        f32 distToMario = o->oDistanceToMario;
src/game/behaviors/monty_mole.inc.c:        o->oAction = MONTY_MOLE_ROCK_ACT_MOVE;
src/game/behaviors/monty_mole.inc.c:        o->oMoveAngleYaw = (s32)(o->parentObj->oMoveAngleYaw + 0x1F4 - distToMario * 0.1f);
src/game/behaviors/monty_mole.inc.c:        o->oForwardVel = 40.0f;
src/game/behaviors/monty_mole.inc.c:        o->oVelY = distToMario * 0.08f + 8.0f;
src/game/behaviors/monty_mole.inc.c:        o->oMoveFlags = 0;
src/game/behaviors/monty_mole.inc.c:    if (o->oMoveFlags & (OBJ_MOVE_MASK_ON_GROUND | OBJ_MOVE_ENTERED_WATER)) {
src/game/behaviors/monty_mole.inc.c:    obj_check_attacks(&sMontyMoleRockHitbox, o->oAction);
src/game/behaviors/monty_mole.inc.c:    switch (o->oAction) {
src/game/behaviors/motos.inc.c:    return (o->oTimer > 45) || (o->oMoveFlags & OBJ_MOVE_HIT_EDGE);
src/game/behaviors/motos.inc.c:    // return (cur_obj_rotate_yaw_toward(o->oAngleToMario, 0x200)) || (o->oDistanceToMario < 500.f)
src/game/behaviors/motos.inc.c:    o->oParentRelativePosY = -30.f;
src/game/behaviors/motos.inc.c:    o->oParentRelativePosX = -70.f; // Changed relative pos to make Mario fit in the hand better
src/game/behaviors/motos.inc.c:    if (o->oChuckyaUnk88 == 1)
src/game/behaviors/motos.inc.c:    o->oForwardVel = 0.f;
src/game/behaviors/motos.inc.c:    o->oVelY = 0.f;
src/game/behaviors/motos.inc.c:    if (o->oDistanceToMario < 500.f) {
src/game/behaviors/motos.inc.c:        o->oAction = MOTOS_ACT_PLAYER_SEARCH;
src/game/behaviors/motos.inc.c:    o->oForwardVel = 5.f; // Sped up (was 2.f)
src/game/behaviors/motos.inc.c:    cur_obj_rotate_yaw_toward(o->oAngleToMario, 800); // Sped up (was 300)
src/game/behaviors/motos.inc.c:            o->oAction = MOTOS_ACT_PLAYER_PITCH;
src/game/behaviors/motos.inc.c:            o->oAction = MOTOS_ACT_CARRY_RUN;
src/game/behaviors/motos.inc.c:    o->oForwardVel = 0.f;
src/game/behaviors/motos.inc.c:        o->oChuckyaUnk88 = 2;
src/game/behaviors/motos.inc.c:        o->numCollidedObjs = 10;
src/game/behaviors/motos.inc.c:        o->oAction = MOTOS_ACT_WAIT;
src/game/behaviors/motos.inc.c:        o->oInteractStatus &= (~INT_STATUS_GRABBED_MARIO);
src/game/behaviors/motos.inc.c:    o->oForwardVel = 15.f; // Sped up (was 5.f)
src/game/behaviors/motos.inc.c:        o->oAction = MOTOS_ACT_PLAYER_PITCH;
src/game/behaviors/motos.inc.c:    if (o->oMoveFlags & OBJ_MOVE_LANDED) {
src/game/behaviors/motos.inc.c:            o->oHealth-=2;
src/game/behaviors/motos.inc.c:            o->oHealth--;
src/game/behaviors/motos.inc.c:        if (o->oHealth > 0) {
src/game/behaviors/motos.inc.c:            o->oAction = MOTOS_ACT_RECOVER; // New action: recover (used to go straight back into wait)
src/game/behaviors/motos.inc.c:            coin->oMoveAngleYaw = (f32)(o->oFaceAngleYaw + 0x8000) + random_float() * 1024.0f;
src/game/behaviors/motos.inc.c:    o->oForwardVel = 0.f;
src/game/behaviors/motos.inc.c:    if (o->oSubAction == 0) {
src/game/behaviors/motos.inc.c:        if (o->oTimer > 35)
src/game/behaviors/motos.inc.c:            o->oSubAction++;
src/game/behaviors/motos.inc.c:    } else if (o->oSubAction == 1) {
src/game/behaviors/motos.inc.c:            o->oAction = MOTOS_ACT_WAIT;
src/game/behaviors/motos.inc.c:        coin->oPosY = o->oPosY + 310.0f;
src/game/behaviors/motos.inc.c:        coin->oMoveAngleYaw = (f32)(o->oFaceAngleYaw + 0x8000) + random_float() * 1024.0f;
src/game/behaviors/motos.inc.c:    switch (o->oAction) {
src/game/behaviors/motos.inc.c:    floorY = find_floor(o->oPosX, o->oPosY, o->oPosZ, &sObjFloor);
src/game/behaviors/motos.inc.c:        if ((floorY + 1.f > o->oPosY) && (sObjFloor->type == SURFACE_BURNING)) {
src/game/behaviors/motos.inc.c:            o->oAction = MOTOS_ACT_DEATH;
src/game/behaviors/motos.inc.c:    o->oInteractionSubtype |= INT_SUBTYPE_GRABS_MARIO;
src/game/behaviors/motos.inc.c:    if (o->oInteractStatus & INT_STATUS_GRABBED_MARIO) {
src/game/behaviors/motos.inc.c:        o->oAction = MOTOS_ACT_PLAYER_CARRY;
src/game/behaviors/motos.inc.c:        o->oChuckyaUnk88 = 1;
src/game/behaviors/motos.inc.c:    switch (o->oHeldState) {
src/game/behaviors/motos.inc.c:            if (o->oAction == MOTOS_ACT_DEATH)
src/game/behaviors/motos.inc.c:    o->oInteractStatus = 0; // Added because it doesnt work without this, cmon Nintendo
src/game/behaviors/moving_coin.inc.c:    o->activeFlags = ACTIVE_FLAG_DEACTIVATED;
src/game/behaviors/moving_coin.inc.c:    o->oGravity = 3.0f;
src/game/behaviors/moving_coin.inc.c:    o->oFriction = 1.0f;
src/game/behaviors/moving_coin.inc.c:    o->oBuoyancy = 1.5f;
src/game/behaviors/moving_coin.inc.c:    switch (o->oAction) {
src/game/behaviors/moving_coin.inc.c:            if (o->oTimer < 10)
src/game/behaviors/moving_coin.inc.c:            if (o->oTimer >= 301)
src/game/behaviors/moving_coin.inc.c:                o->oAction = 1;
src/game/behaviors/moving_coin.inc.c:            o->activeFlags = ACTIVE_FLAG_DEACTIVATED;
src/game/behaviors/moving_coin.inc.c:            o->activeFlags = ACTIVE_FLAG_DEACTIVATED;
src/game/behaviors/moving_coin.inc.c:    if ((o->oInteractStatus & INT_STATUS_INTERACTED) != 0) /* bit 15 */
src/game/behaviors/moving_coin.inc.c:        o->oInteractStatus = 0;
src/game/behaviors/moving_coin.inc.c:    o->oGravity = 3.0f;
src/game/behaviors/moving_coin.inc.c:    o->oFriction = 1.0f;
src/game/behaviors/moving_coin.inc.c:    o->oBuoyancy = 1.5f;
src/game/behaviors/moving_coin.inc.c:    switch (o->oAction) {
src/game/behaviors/moving_coin.inc.c:            if (is_point_within_radius_of_mario(o->oPosX, o->oPosY, o->oPosZ, 1500))
src/game/behaviors/moving_coin.inc.c:                o->oAction = 1;
src/game/behaviors/moving_coin.inc.c:                o->oForwardVel += 25.0f;
src/game/behaviors/moving_coin.inc.c:                o->oForwardVel *= 0.98;
src/game/behaviors/moving_coin.inc.c:            if (o->oForwardVel > 75.0)
src/game/behaviors/moving_coin.inc.c:                o->oForwardVel = 75.0f;
src/game/behaviors/moving_coin.inc.c:    if ((o->oInteractStatus & INT_STATUS_INTERACTED) != 0) /* bit 15 */
src/game/behaviors/moving_coin.inc.c:        o->oInteractStatus = 0;
src/game/behaviors/moving_coin.inc.c:    o->oGravity = 3.0;
src/game/behaviors/moving_coin.inc.c:    o->oFriction = 0.98;
src/game/behaviors/moving_coin.inc.c:    o->oBuoyancy = 1.5;
src/game/behaviors/moving_coin.inc.c:    o->oForwardVel = 15.0;
src/game/behaviors/moving_coin.inc.c:    o->oMoveAngleYaw = o->oAngleToMario + 0x8000;
src/game/behaviors/moving_coin.inc.c:        o->oVelY += 18.0f;
src/game/behaviors/moving_coin.inc.c:        o->oAction = 3; /* bit 1 */
src/game/behaviors/moving_coin.inc.c:    if (is_point_within_radius_of_mario(o->oPosX, o->oPosY, o->oPosZ, 1000) == 0)
src/game/behaviors/moving_coin.inc.c:        o->oAction = 2;
src/game/behaviors/moving_coin.inc.c:    if (is_point_within_radius_of_mario(o->oPosX, o->oPosY, o->oPosZ, 500) == 1)
src/game/behaviors/moving_coin.inc.c:        o->oAction = 1;
src/game/behaviors/moving_coin.inc.c:    if (o->oTimer >= 151)
src/game/behaviors/moving_coin.inc.c:        o->oAction = 3;
src/game/behaviors/moving_coin.inc.c:    switch (o->oAction) {
src/game/behaviors/moving_coin.inc.c:            if (is_point_within_radius_of_mario(o->oPosX, o->oPosY, o->oPosZ, 500) == 1)
src/game/behaviors/moving_coin.inc.c:                o->oAction = 1;
src/game/behaviors/moving_coin.inc.c:            if (o->oTimer >= 61)
src/game/behaviors/moving_coin.inc.c:                o->oAction = 4;
src/game/behaviors/moving_coin.inc.c:            o->activeFlags = ACTIVE_FLAG_DEACTIVATED;
src/game/behaviors/moving_coin.inc.c:            o->activeFlags = ACTIVE_FLAG_DEACTIVATED;
src/game/behaviors/moving_coin.inc.c:    if ((o->oInteractStatus & INT_STATUS_INTERACTED) != 0) /* bit 15 */
src/game/behaviors/moving_coin.inc.c:        o->oInteractStatus = 0;
src/game/behaviors/moving_coin.inc.c:    switch (o->oAction) {
src/game/behaviors/moving_coin.inc.c:            if (o->oTimer == 0) {
src/game/behaviors/moving_coin.inc.c:                o->oVelY = 50.0;
src/game/behaviors/moving_coin.inc.c:            if (o->oTimer == 15) {
src/game/behaviors/moving_coin.inc.c:                o->oAction = 1;
src/game/behaviors/moving_coin.inc.c:            if (o->oTimer >= 61)
src/game/behaviors/moving_coin.inc.c:                o->oAction = 4;
src/game/behaviors/moving_coin.inc.c:    if ((o->oInteractStatus & INT_STATUS_INTERACTED) != 0) /* bit 15 */
src/game/behaviors/moving_coin.inc.c:        o->oInteractStatus = 0;
src/game/behaviors/mr_blizzard.inc.c:    if (o->oBehParams2ndByte == 1) {
src/game/behaviors/mr_blizzard.inc.c:        o->oAction = 7;
src/game/behaviors/mr_blizzard.inc.c:        o->oMrBlizzardGraphYOffset = 24.0f;
src/game/behaviors/mr_blizzard.inc.c:        o->oMrBlizzardTargetMoveYaw = o->oMoveAngleYaw;
src/game/behaviors/mr_blizzard.inc.c:        if (o->oBehParams2ndByte != 0) {
src/game/behaviors/mr_blizzard.inc.c:                o->oAnimState = 1;
src/game/behaviors/mr_blizzard.inc.c:        o->oMrBlizzardGraphYOffset = -200.0f;
src/game/behaviors/mr_blizzard.inc.c:        o->oMrBlizzardHeldObj = NULL;
src/game/behaviors/mr_blizzard.inc.c:    if (o->oMrBlizzardHeldObj == NULL && cur_obj_init_anim_check_frame(0, 5)) {
src/game/behaviors/mr_blizzard.inc.c:        o->oMrBlizzardHeldObj = spawn_object_relative(0, -70, (s32)(o->oMrBlizzardGraphYOffset + 153.0f), 0, o,
src/game/behaviors/mr_blizzard.inc.c:        o->prevObj = o->oMrBlizzardHeldObj;
src/game/behaviors/mr_blizzard.inc.c:        if (o->oMrBlizzardGraphYOffset < 0.0f) {
src/game/behaviors/mr_blizzard.inc.c:            o->oAction = 1;
src/game/behaviors/mr_blizzard.inc.c:            o->oAction = 3;
src/game/behaviors/mr_blizzard.inc.c:    if (o->oDistanceToMario < 1000.0f) {
src/game/behaviors/mr_blizzard.inc.c:        o->oAction = 2;
src/game/behaviors/mr_blizzard.inc.c:        o->oMoveAngleYaw = o->oAngleToMario;
src/game/behaviors/mr_blizzard.inc.c:        o->oMrBlizzardGraphYVel = 42.0f;
src/game/behaviors/mr_blizzard.inc.c:    if (o->oMrBlizzardTimer != 0) {
src/game/behaviors/mr_blizzard.inc.c:        o->oMrBlizzardTimer -= 1;
src/game/behaviors/mr_blizzard.inc.c:    } else if ((o->oMrBlizzardGraphYOffset += o->oMrBlizzardGraphYVel) > 24.0f) {
src/game/behaviors/mr_blizzard.inc.c:        o->oPosY += o->oMrBlizzardGraphYOffset - 24.0f;
src/game/behaviors/mr_blizzard.inc.c:        o->oMrBlizzardGraphYOffset = 24.0f;
src/game/behaviors/mr_blizzard.inc.c:        o->oAction = 3;
src/game/behaviors/mr_blizzard.inc.c:        o->oVelY = o->oMrBlizzardGraphYVel;
src/game/behaviors/mr_blizzard.inc.c:    } else if ((o->oMrBlizzardGraphYVel -= 10.0f) < 0.0f) {
src/game/behaviors/mr_blizzard.inc.c:        o->oMrBlizzardGraphYVel = 47.0f;
src/game/behaviors/mr_blizzard.inc.c:        o->oMrBlizzardTimer = 5;
src/game/behaviors/mr_blizzard.inc.c:    if (o->oMoveFlags & 0x00000003) {
src/game/behaviors/mr_blizzard.inc.c:        cur_obj_rotate_yaw_toward(o->oAngleToMario, 0x600);
src/game/behaviors/mr_blizzard.inc.c:        val06 = o->oAngleToMario - o->oMoveAngleYaw;
src/game/behaviors/mr_blizzard.inc.c:                o->oMrBlizzardChangeInDizziness -= 8.0f;
src/game/behaviors/mr_blizzard.inc.c:                o->oMrBlizzardChangeInDizziness += 8.0f;
src/game/behaviors/mr_blizzard.inc.c:            o->oMrBlizzardDizziness += o->oMrBlizzardChangeInDizziness;
src/game/behaviors/mr_blizzard.inc.c:        } else if (o->oMrBlizzardDizziness != 0.0f) {
src/game/behaviors/mr_blizzard.inc.c:            val00 = o->oMrBlizzardDizziness;
src/game/behaviors/mr_blizzard.inc.c:            if (o->oMrBlizzardDizziness < 0.0f) {
src/game/behaviors/mr_blizzard.inc.c:                approach_f32_ptr(&o->oMrBlizzardChangeInDizziness, 1000.0f, 80.0f);
src/game/behaviors/mr_blizzard.inc.c:                approach_f32_ptr(&o->oMrBlizzardChangeInDizziness, -1000.0f, 80.0f);
src/game/behaviors/mr_blizzard.inc.c:            o->oMrBlizzardDizziness += o->oMrBlizzardChangeInDizziness;
src/game/behaviors/mr_blizzard.inc.c:            if (val00 * o->oMrBlizzardDizziness < 0.0f) {
src/game/behaviors/mr_blizzard.inc.c:                o->oMrBlizzardDizziness = o->oMrBlizzardChangeInDizziness = 0.0f;
src/game/behaviors/mr_blizzard.inc.c:        if (o->oMrBlizzardDizziness != 0.0f) {
src/game/behaviors/mr_blizzard.inc.c:            if (absi(o->oFaceAngleRoll) > 0x3000) {
src/game/behaviors/mr_blizzard.inc.c:                o->oAction = 6;
src/game/behaviors/mr_blizzard.inc.c:                o->prevObj = o->oMrBlizzardHeldObj = NULL;
src/game/behaviors/mr_blizzard.inc.c:        } else if (o->oDistanceToMario > 1500.0f) {
src/game/behaviors/mr_blizzard.inc.c:            o->oAction = 5;
src/game/behaviors/mr_blizzard.inc.c:            o->oMrBlizzardChangeInDizziness = 300.0f;
src/game/behaviors/mr_blizzard.inc.c:            o->prevObj = o->oMrBlizzardHeldObj = NULL;
src/game/behaviors/mr_blizzard.inc.c:        } else if (o->oTimer > 60 && abs_angle_diff(o->oAngleToMario, o->oMoveAngleYaw) < 0x800) {
src/game/behaviors/mr_blizzard.inc.c:            o->oAction = 4;
src/game/behaviors/mr_blizzard.inc.c:    if (clamp_f32(&o->oMrBlizzardDizziness, -0x4000, 0x4000)) {
src/game/behaviors/mr_blizzard.inc.c:        if (o->oMrBlizzardChangeInDizziness != 0.0f) {
src/game/behaviors/mr_blizzard.inc.c:            if (o->oAnimState) {
src/game/behaviors/mr_blizzard.inc.c:                        o->oFaceAngleYaw + (o->oFaceAngleRoll < 0 ? 0x4000 : -0x4000);
src/game/behaviors/mr_blizzard.inc.c:                o->oAnimState = 0;
src/game/behaviors/mr_blizzard.inc.c:            o->oMrBlizzardChangeInDizziness = 0.0f;
src/game/behaviors/mr_blizzard.inc.c:        if (o->oMrBlizzardDizziness < 0) {
src/game/behaviors/mr_blizzard.inc.c:            o->oMrBlizzardChangeInDizziness -= 40.0f;
src/game/behaviors/mr_blizzard.inc.c:            o->oMrBlizzardChangeInDizziness += 40.0f;
src/game/behaviors/mr_blizzard.inc.c:        o->oMrBlizzardDizziness += o->oMrBlizzardChangeInDizziness;
src/game/behaviors/mr_blizzard.inc.c:    if (o->oTimer >= 30) {
src/game/behaviors/mr_blizzard.inc.c:        if (o->oTimer == 30) {
src/game/behaviors/mr_blizzard.inc.c:        if (o->oMrBlizzardScale != 0.0f) {
src/game/behaviors/mr_blizzard.inc.c:            if ((o->oMrBlizzardScale -= 0.03f) <= 0.0f) {
src/game/behaviors/mr_blizzard.inc.c:                o->oMrBlizzardScale = 0.0f;
src/game/behaviors/mr_blizzard.inc.c:                if (!(o->oBehParams & 0x0000FF00)) {
src/game/behaviors/mr_blizzard.inc.c:                    obj_spawn_loot_yellow_coins(o, o->oNumLootCoins, 20.0f);
src/game/behaviors/mr_blizzard.inc.c:        } else if (o->oDistanceToMario > 1000.0f) {
src/game/behaviors/mr_blizzard.inc.c:            o->oAction = 0;
src/game/behaviors/mr_blizzard.inc.c:            o->oMrBlizzardScale = 1.0f;
src/game/behaviors/mr_blizzard.inc.c:            o->oMrBlizzardGraphYOffset = -200.0f;
src/game/behaviors/mr_blizzard.inc.c:            o->oFaceAngleRoll = 0;
src/game/behaviors/mr_blizzard.inc.c:            o->oMrBlizzardDizziness = o->oMrBlizzardChangeInDizziness = 0.0f;
src/game/behaviors/mr_blizzard.inc.c:        o->prevObj = o->oMrBlizzardHeldObj = NULL;
src/game/behaviors/mr_blizzard.inc.c:        o->oAction = 0;
src/game/behaviors/mr_blizzard.inc.c:    o->oMrBlizzardDizziness += o->oMrBlizzardChangeInDizziness;
src/game/behaviors/mr_blizzard.inc.c:    if (o->oMrBlizzardDizziness < 0.0f) {
src/game/behaviors/mr_blizzard.inc.c:        o->oMrBlizzardChangeInDizziness += 150.0f;
src/game/behaviors/mr_blizzard.inc.c:        o->oMrBlizzardChangeInDizziness -= 150.0f;
src/game/behaviors/mr_blizzard.inc.c:    if (approach_f32_ptr(&o->oMrBlizzardGraphYOffset, -200.0f, 4.0f)) {
src/game/behaviors/mr_blizzard.inc.c:        o->oAction = 0;
src/game/behaviors/mr_blizzard.inc.c:    if (o->oMrBlizzardTimer != 0) {
src/game/behaviors/mr_blizzard.inc.c:        cur_obj_rotate_yaw_toward(o->oMrBlizzardTargetMoveYaw, 3400);
src/game/behaviors/mr_blizzard.inc.c:        if (--o->oMrBlizzardTimer == 0) {
src/game/behaviors/mr_blizzard.inc.c:            if (o->oMrBlizzardDistFromHome > 700) {
src/game/behaviors/mr_blizzard.inc.c:                o->oMrBlizzardTargetMoveYaw += 0x8000;
src/game/behaviors/mr_blizzard.inc.c:                o->oVelY = 25.0f;
src/game/behaviors/mr_blizzard.inc.c:                o->oMrBlizzardTimer = 30;
src/game/behaviors/mr_blizzard.inc.c:                o->oMrBlizzardDistFromHome = 0;
src/game/behaviors/mr_blizzard.inc.c:                o->oForwardVel = 10.0f;
src/game/behaviors/mr_blizzard.inc.c:                o->oVelY = 50.0f;
src/game/behaviors/mr_blizzard.inc.c:                o->oMoveFlags = 0;
src/game/behaviors/mr_blizzard.inc.c:    } else if (o->oMoveFlags & 0x00000003) {
src/game/behaviors/mr_blizzard.inc.c:        if (o->oMrBlizzardDistFromHome != 0) {
src/game/behaviors/mr_blizzard.inc.c:            o->oMrBlizzardDistFromHome = (s32) cur_obj_lateral_dist_to_home();
src/game/behaviors/mr_blizzard.inc.c:            o->oMrBlizzardDistFromHome = 700;
src/game/behaviors/mr_blizzard.inc.c:        o->oForwardVel = 0.0f;
src/game/behaviors/mr_blizzard.inc.c:        o->oMrBlizzardTimer = 15;
src/game/behaviors/mr_blizzard.inc.c:    switch (o->oAction) {
src/game/behaviors/mr_blizzard.inc.c:    o->oFaceAngleRoll = o->oMrBlizzardDizziness;
src/game/behaviors/mr_blizzard.inc.c:    o->oGraphYOffset = o->oMrBlizzardGraphYOffset + absf(20.0f * sins(o->oFaceAngleRoll))
src/game/behaviors/mr_blizzard.inc.c:                       - 40.0f * (1.0f - o->oMrBlizzardScale);
src/game/behaviors/mr_blizzard.inc.c:    cur_obj_scale(o->oMrBlizzardScale);
src/game/behaviors/mr_blizzard.inc.c:    obj_check_attacks(&sMrBlizzardHitbox, o->oAction);
src/game/behaviors/mr_blizzard.inc.c:    if (o->parentObj->prevObj == o) {
src/game/behaviors/mr_blizzard.inc.c:        o->oAction = 1;
src/game/behaviors/mr_blizzard.inc.c:        o->oParentRelativePosX = 190.0f;
src/game/behaviors/mr_blizzard.inc.c:        o->oParentRelativePosY = o->oParentRelativePosZ = -38.0f;
src/game/behaviors/mr_blizzard.inc.c:    if (o->parentObj->prevObj == NULL) {
src/game/behaviors/mr_blizzard.inc.c:        if (o->parentObj->oAction == 4) {
src/game/behaviors/mr_blizzard.inc.c:            val04 = o->oDistanceToMario;
src/game/behaviors/mr_blizzard.inc.c:            o->oMoveAngleYaw = (s32)(o->parentObj->oMoveAngleYaw + 4000 - val04 * 4.0f);
src/game/behaviors/mr_blizzard.inc.c:            o->oForwardVel = 40.0f;
src/game/behaviors/mr_blizzard.inc.c:            o->oVelY = -20.0f + val04 * 0.075f;
src/game/behaviors/mr_blizzard.inc.c:        o->oAction = 2;
src/game/behaviors/mr_blizzard.inc.c:        o->oMoveFlags = 0;
src/game/behaviors/mr_blizzard.inc.c:    if (o->oAction == -1 || o->oMoveFlags & 0x0000000B) {
src/game/behaviors/mr_blizzard.inc.c:    switch (o->oAction) {
src/game/behaviors/mr_i.inc.c:    if (o->oTimer == 0) {
src/game/behaviors/mr_i.inc.c:        o->oVelY = 20.0f + 20.0f * random_float();
src/game/behaviors/mr_i.inc.c:        o->oForwardVel = 20.0f + 20.0f * random_float();
src/game/behaviors/mr_i.inc.c:        o->oMoveAngleYaw = random_u16();
src/game/behaviors/mr_i.inc.c:    o->oForwardVel = 20.0f;
src/game/behaviors/mr_i.inc.c:    if (0x8000 & o->oInteractStatus)
src/game/behaviors/mr_i.inc.c:        o->oAction = 1;
src/game/behaviors/mr_i.inc.c:    else if ((o->oTimer >= 101) || (0x200 & o->oMoveFlags) || o->activeFlags & ACTIVE_FLAG_IN_DIFFERENT_ROOM) {
src/game/behaviors/mr_i.inc.c:    f32 sp18 = o->header.gfx.scale[1];
src/game/behaviors/mr_i.inc.c:    particle->oPosX += sins(o->oMoveAngleYaw) * 90.0f * sp18;
src/game/behaviors/mr_i.inc.c:    particle->oPosZ += coss(o->oMoveAngleYaw) * 90.0f * sp18;
src/game/behaviors/mr_i.inc.c:    obj_copy_pos_and_angle(o, o->parentObj);
src/game/behaviors/mr_i.inc.c:    if (!(o->activeFlags & ACTIVE_FLAG_IN_DIFFERENT_ROOM)) {
src/game/behaviors/mr_i.inc.c:        obj_copy_scale(o, o->parentObj);
src/game/behaviors/mr_i.inc.c:        obj_set_parent_relative_pos(o, 0, 0, o->header.gfx.scale[1] * 100.0f);
src/game/behaviors/mr_i.inc.c:        o->oFaceAnglePitch = o->oMoveAnglePitch;
src/game/behaviors/mr_i.inc.c:        o->oGraphYOffset = o->header.gfx.scale[1] * 100.f;
src/game/behaviors/mr_i.inc.c:    if (o->parentObj->oMrIUnk110 != 1)
src/game/behaviors/mr_i.inc.c:        o->oAnimState = -1;
src/game/behaviors/mr_i.inc.c:        o->oAnimState++;
src/game/behaviors/mr_i.inc.c:        if (o->oAnimState == 15)
src/game/behaviors/mr_i.inc.c:            o->parentObj->oMrIUnk110 = 0;
src/game/behaviors/mr_i.inc.c:    if (o->parentObj->activeFlags == ACTIVE_FLAG_DEACTIVATED)
src/game/behaviors/mr_i.inc.c:    if (o->oBehParams2ndByte)
src/game/behaviors/mr_i.inc.c:    if (o->oMrIUnk100 < 0)
src/game/behaviors/mr_i.inc.c:    sp2C = (o->oTimer + 1) / 96.0f;
src/game/behaviors/mr_i.inc.c:    if (o->oTimer < 64) {
src/game/behaviors/mr_i.inc.c:        sp36 = o->oMoveAngleYaw;
src/game/behaviors/mr_i.inc.c:        o->oMoveAngleYaw += sp34 * coss(0x4000 * sp2C);
src/game/behaviors/mr_i.inc.c:        if (sp36 < 0 && o->oMoveAngleYaw >= 0)
src/game/behaviors/mr_i.inc.c:        o->oMoveAnglePitch = (1.0 - coss(0x4000 * sp2C)) * -0x4000;
src/game/behaviors/mr_i.inc.c:    } else if (o->oTimer < 96) {
src/game/behaviors/mr_i.inc.c:        if (o->oTimer == 64)
src/game/behaviors/mr_i.inc.c:        sp30 = (f32)(o->oTimer - 63) / 32;
src/game/behaviors/mr_i.inc.c:        o->oMoveAngleYaw += sp34 * coss(0x4000 * sp2C);
src/game/behaviors/mr_i.inc.c:        o->oMoveAnglePitch = (1.0 - coss(0x4000 * sp2C)) * -0x4000;
src/game/behaviors/mr_i.inc.c:    } else if (o->oTimer < 104) {
src/game/behaviors/mr_i.inc.c:    } else if (o->oTimer < 168) {
src/game/behaviors/mr_i.inc.c:        if (o->oTimer == 104) {
src/game/behaviors/mr_i.inc.c:            o->oMrISize = sp1C * 0.6;
src/game/behaviors/mr_i.inc.c:            if (o->oBehParams2ndByte) {
src/game/behaviors/mr_i.inc.c:                o->oPosY += 100.0f;
src/game/behaviors/mr_i.inc.c:        o->oMrISize -= 0.2 * sp1C;
src/game/behaviors/mr_i.inc.c:        if (o->oMrISize < 0)
src/game/behaviors/mr_i.inc.c:            o->oMrISize = 0;
src/game/behaviors/mr_i.inc.c:        cur_obj_scale(o->oMrISize);
src/game/behaviors/mr_i.inc.c:    sp1E = o->oMoveAngleYaw;
src/game/behaviors/mr_i.inc.c:    if (o->oTimer == 0) {
src/game/behaviors/mr_i.inc.c:        if (o->oBehParams2ndByte)
src/game/behaviors/mr_i.inc.c:            o->oMrIUnkF4 = 200;
src/game/behaviors/mr_i.inc.c:            o->oMrIUnkF4 = 120;
src/game/behaviors/mr_i.inc.c:        o->oMrIUnkFC = 0;
src/game/behaviors/mr_i.inc.c:        o->oMrIUnk100 = 0;
src/game/behaviors/mr_i.inc.c:        o->oMrIUnk104 = 0;
src/game/behaviors/mr_i.inc.c:    sp1C = sp1E - (s16)(o->oMoveAngleYaw);
src/game/behaviors/mr_i.inc.c:        o->oMrIUnkFC = 0;
src/game/behaviors/mr_i.inc.c:        o->oMrIUnk100 = 0;
src/game/behaviors/mr_i.inc.c:        if (o->oMrIUnk100 > 0)
src/game/behaviors/mr_i.inc.c:            o->oMrIUnkFC += sp1C;
src/game/behaviors/mr_i.inc.c:            o->oMrIUnkFC = 0;
src/game/behaviors/mr_i.inc.c:        o->oMrIUnk100 = 1;
src/game/behaviors/mr_i.inc.c:        if (o->oMrIUnk100 < 0)
src/game/behaviors/mr_i.inc.c:            o->oMrIUnkFC -= sp1C;
src/game/behaviors/mr_i.inc.c:            o->oMrIUnkFC = 0;
src/game/behaviors/mr_i.inc.c:        o->oMrIUnk100 = -1;
src/game/behaviors/mr_i.inc.c:    if (!o->oMrIUnkFC)
src/game/behaviors/mr_i.inc.c:        o->oMrIUnkF4 = 120;
src/game/behaviors/mr_i.inc.c:    if (o->oMrIUnkFC > 1 << 16)
src/game/behaviors/mr_i.inc.c:        o->oAction = 3;
src/game/behaviors/mr_i.inc.c:    o->oMrIUnkF4 -= 1;
src/game/behaviors/mr_i.inc.c:    if (!o->oMrIUnkF4) {
src/game/behaviors/mr_i.inc.c:        o->oMrIUnkF4 = 120;
src/game/behaviors/mr_i.inc.c:        o->oMrIUnkFC = 0;
src/game/behaviors/mr_i.inc.c:    if (o->oMrIUnkFC < 5000) {
src/game/behaviors/mr_i.inc.c:        if (o->oMrIUnk104 == o->oMrIUnk108)
src/game/behaviors/mr_i.inc.c:            o->oMrIUnk110 = 1;
src/game/behaviors/mr_i.inc.c:        if (o->oMrIUnk104 == o->oMrIUnk108 + 20) {
src/game/behaviors/mr_i.inc.c:            o->oMrIUnk104 = 0;
src/game/behaviors/mr_i.inc.c:            o->oMrIUnk108 = (s32)(random_float() * 50.0f + 50.0f);
src/game/behaviors/mr_i.inc.c:        o->oMrIUnk104++;
src/game/behaviors/mr_i.inc.c:        o->oMrIUnk104 = 0;
src/game/behaviors/mr_i.inc.c:        o->oMrIUnk108 = (s32)(random_float() * 50.0f + 50.0f);
src/game/behaviors/mr_i.inc.c:    if (o->oDistanceToMario > 800.0f)
src/game/behaviors/mr_i.inc.c:        o->oAction = 1;
src/game/behaviors/mr_i.inc.c:    sp1C = abs_angle_diff(o->oMoveAngleYaw, sp1E);
src/game/behaviors/mr_i.inc.c:    sp1A = abs_angle_diff(o->oMoveAngleYaw, gMarioObject->oFaceAngleYaw);
src/game/behaviors/mr_i.inc.c:    if (o->oTimer == 0) {
src/game/behaviors/mr_i.inc.c:        o->oMoveAnglePitch = 0;
src/game/behaviors/mr_i.inc.c:        o->oMrIUnk104 = 30;
src/game/behaviors/mr_i.inc.c:        o->oMrIUnk108 = random_float() * 20.0f;
src/game/behaviors/mr_i.inc.c:        if (o->oMrIUnk108 & 1)
src/game/behaviors/mr_i.inc.c:            o->oAngleVelYaw = -256;
src/game/behaviors/mr_i.inc.c:            o->oAngleVelYaw = 256;
src/game/behaviors/mr_i.inc.c:        if (o->oDistanceToMario < 700.0f)
src/game/behaviors/mr_i.inc.c:            o->oAction = 2;
src/game/behaviors/mr_i.inc.c:            o->oMrIUnk104++;
src/game/behaviors/mr_i.inc.c:        o->oMoveAngleYaw += o->oAngleVelYaw;
src/game/behaviors/mr_i.inc.c:        o->oMrIUnk104 = 30;
src/game/behaviors/mr_i.inc.c:    if (o->oMrIUnk104 == o->oMrIUnk108 + 60)
src/game/behaviors/mr_i.inc.c:        o->oMrIUnk110 = 1;
src/game/behaviors/mr_i.inc.c:    if (o->oMrIUnk108 + 80 < o->oMrIUnk104) {
src/game/behaviors/mr_i.inc.c:        o->oMrIUnk104 = 0;
src/game/behaviors/mr_i.inc.c:        o->oMrIUnk108 = random_float() * 80.0f;
src/game/behaviors/mr_i.inc.c:    o->oMoveAnglePitch = 0;
src/game/behaviors/mr_i.inc.c:    o->oMoveAngleYaw = 0;
src/game/behaviors/mr_i.inc.c:    o->oMoveAngleRoll = 0;
src/game/behaviors/mr_i.inc.c:    cur_obj_scale(o->oBehParams2ndByte + 1);
src/game/behaviors/mr_i.inc.c:    if (o->oTimer == 0)
src/game/behaviors/mr_i.inc.c:    if (o->oDistanceToMario < 1500.0f)
src/game/behaviors/mr_i.inc.c:        o->oAction = 1;
src/game/behaviors/mr_i.inc.c:    if (o->oAction != 3)
src/game/behaviors/mr_i.inc.c:        if (o->oDistanceToMario > 3000.0f || o->activeFlags & ACTIVE_FLAG_IN_DIFFERENT_ROOM)
src/game/behaviors/mr_i.inc.c:            o->oAction = 0;
src/game/behaviors/mr_i.inc.c:    o->oInteractStatus = 0;
src/game/behaviors/mushroom_1up.inc.c:        o->activeFlags = ACTIVE_FLAG_DEACTIVATED;
src/game/behaviors/mushroom_1up.inc.c:    o->oMoveAnglePitch = -0x4000;
src/game/behaviors/mushroom_1up.inc.c:    o->oGravity = 3.0f;
src/game/behaviors/mushroom_1up.inc.c:    o->oFriction = 1.0f;
src/game/behaviors/mushroom_1up.inc.c:    o->oBuoyancy = 1.0f;
src/game/behaviors/mushroom_1up.inc.c:    if (o->oBehParams2ndByte == 1) {
src/game/behaviors/mushroom_1up.inc.c:            o->activeFlags = ACTIVE_FLAG_DEACTIVATED;
src/game/behaviors/mushroom_1up.inc.c:    } else if (o->oBehParams2ndByte == 2) {
src/game/behaviors/mushroom_1up.inc.c:            o->activeFlags = ACTIVE_FLAG_DEACTIVATED;
src/game/behaviors/mushroom_1up.inc.c:    if (o->oTimer < 5) {
src/game/behaviors/mushroom_1up.inc.c:        o->oVelY = 40.0f;
src/game/behaviors/mushroom_1up.inc.c:        o->oAngleVelPitch = -0x1000;
src/game/behaviors/mushroom_1up.inc.c:        o->oMoveAnglePitch += o->oAngleVelPitch;
src/game/behaviors/mushroom_1up.inc.c:        o->oVelY = coss(o->oMoveAnglePitch) * 30.0f + 2.0f;
src/game/behaviors/mushroom_1up.inc.c:        o->oForwardVel = -sins(o->oMoveAnglePitch) * 30.0f;
src/game/behaviors/mushroom_1up.inc.c:    f32 sp34 = gMarioObject->header.gfx.pos[0] - o->oPosX;
src/game/behaviors/mushroom_1up.inc.c:    f32 sp30 = gMarioObject->header.gfx.pos[1] + 120.0f - o->oPosY;
src/game/behaviors/mushroom_1up.inc.c:    f32 sp2C = gMarioObject->header.gfx.pos[2] - o->oPosZ;
src/game/behaviors/mushroom_1up.inc.c:    o->oMoveAnglePitch = approach_s16_symmetric(o->oMoveAnglePitch, sp2A, 0x1000);
src/game/behaviors/mushroom_1up.inc.c:    o->oVelY = sins(o->oMoveAnglePitch) * 30.0f;
src/game/behaviors/mushroom_1up.inc.c:    o->oForwardVel = coss(o->oMoveAnglePitch) * 30.0f;
src/game/behaviors/mushroom_1up.inc.c:    o->oForwardVel = 8.0f;
src/game/behaviors/mushroom_1up.inc.c:    o->oMoveAngleYaw = o->oAngleToMario + 0x8000;
src/game/behaviors/mushroom_1up.inc.c:        o->oAction = 2;
src/game/behaviors/mushroom_1up.inc.c:    if (!is_point_within_radius_of_mario(o->oPosX, o->oPosY, o->oPosZ, 3000))
src/game/behaviors/mushroom_1up.inc.c:        o->oAction = 2;
src/game/behaviors/mushroom_1up.inc.c:    switch (o->oAction) {
src/game/behaviors/mushroom_1up.inc.c:            if (o->oTimer >= 18)
src/game/behaviors/mushroom_1up.inc.c:            if (o->oTimer == 0)
src/game/behaviors/mushroom_1up.inc.c:            if (o->oTimer == 37) {
src/game/behaviors/mushroom_1up.inc.c:                o->oAction = 1;
src/game/behaviors/mushroom_1up.inc.c:                o->oForwardVel = 2.0f;
src/game/behaviors/mushroom_1up.inc.c:            if (o->oTimer > 300)
src/game/behaviors/mushroom_1up.inc.c:                o->oAction = 2;
src/game/behaviors/mushroom_1up.inc.c:    switch (o->oAction) {
src/game/behaviors/mushroom_1up.inc.c:            if (o->oTimer >= 18)
src/game/behaviors/mushroom_1up.inc.c:            if (o->oTimer == 0)
src/game/behaviors/mushroom_1up.inc.c:            if (o->oTimer == 37) {
src/game/behaviors/mushroom_1up.inc.c:                o->oAction = 1;
src/game/behaviors/mushroom_1up.inc.c:                o->oForwardVel = 8.0f;
src/game/behaviors/mushroom_1up.inc.c:        o->oForwardVel += 25.0f;
src/game/behaviors/mushroom_1up.inc.c:        o->oVelY = 0;
src/game/behaviors/mushroom_1up.inc.c:        o->oForwardVel *= 0.98;
src/game/behaviors/mushroom_1up.inc.c:    if (o->oForwardVel > 40.0)
src/game/behaviors/mushroom_1up.inc.c:        o->oForwardVel = 40.0f;
src/game/behaviors/mushroom_1up.inc.c:    if (!is_point_within_radius_of_mario(o->oPosX, o->oPosY, o->oPosZ, 5000))
src/game/behaviors/mushroom_1up.inc.c:        o->oAction = 2;
src/game/behaviors/mushroom_1up.inc.c:    switch (o->oAction) {
src/game/behaviors/mushroom_1up.inc.c:            if (is_point_within_radius_of_mario(o->oPosX, o->oPosY, o->oPosZ, 1000))
src/game/behaviors/mushroom_1up.inc.c:                o->oAction = 1;
src/game/behaviors/mushroom_1up.inc.c:    switch (o->oAction) {
src/game/behaviors/mushroom_1up.inc.c:            if (is_point_within_radius_of_mario(o->oPosX, o->oPosY, o->oPosZ, 1000)) {
src/game/behaviors/mushroom_1up.inc.c:                o->oVelY = 40.0f;
src/game/behaviors/mushroom_1up.inc.c:                o->oAction = 1;
src/game/behaviors/mushroom_1up.inc.c:    switch (o->oAction) {
src/game/behaviors/mushroom_1up.inc.c:            o->header.gfx.node.flags |= GRAPH_RENDER_INVISIBLE;
src/game/behaviors/mushroom_1up.inc.c:            if (o->o1UpHiddenUnkF4 == o->oBehParams2ndByte) {
src/game/behaviors/mushroom_1up.inc.c:                o->oVelY = 40.0f;
src/game/behaviors/mushroom_1up.inc.c:                o->oAction = 3;
src/game/behaviors/mushroom_1up.inc.c:                o->header.gfx.node.flags &= ~GRAPH_RENDER_INVISIBLE;
src/game/behaviors/mushroom_1up.inc.c:            if (o->oTimer >= 18)
src/game/behaviors/mushroom_1up.inc.c:            if (o->oTimer == 37) {
src/game/behaviors/mushroom_1up.inc.c:                o->oAction = 1;
src/game/behaviors/mushroom_1up.inc.c:                o->oForwardVel = 8.0f;
src/game/behaviors/mushroom_1up.inc.c:        o->activeFlags = ACTIVE_FLAG_DEACTIVATED;
src/game/behaviors/mushroom_1up.inc.c:    switch (o->oAction) {
src/game/behaviors/mushroom_1up.inc.c:            o->header.gfx.node.flags |= GRAPH_RENDER_INVISIBLE;
src/game/behaviors/mushroom_1up.inc.c:            if (o->o1UpHiddenUnkF4 == o->oBehParams2ndByte) {
src/game/behaviors/mushroom_1up.inc.c:                o->oVelY = 40.0f;
src/game/behaviors/mushroom_1up.inc.c:                o->oAction = 3;
src/game/behaviors/mushroom_1up.inc.c:                o->header.gfx.node.flags &= ~GRAPH_RENDER_INVISIBLE;
src/game/behaviors/mushroom_1up.inc.c:            if (o->oTimer >= 18)
src/game/behaviors/mushroom_1up.inc.c:            if (o->oTimer == 37) {
src/game/behaviors/mushroom_1up.inc.c:                o->oAction = 1;
src/game/behaviors/mushroom_1up.inc.c:                o->oForwardVel = 10.0f;
src/game/behaviors/mushroom_1up.inc.c:        o->activeFlags = ACTIVE_FLAG_DEACTIVATED;
src/game/behaviors/mushroom_1up.inc.c:    if (is_point_within_radius_of_mario(o->oPosX, o->oPosY, o->oPosZ, 700)) {
src/game/behaviors/mushroom_1up.inc.c:        o->activeFlags = ACTIVE_FLAG_DEACTIVATED;
src/game/behaviors/mushroom_1up.inc.c:        u8 power = o->oBehParams2ndByte+1;
src/game/behaviors/mushroom_1up.inc.c:            o->header.gfx.node.flags &= ~GRAPH_RENDER_INVISIBLE;
src/game/behaviors/mushroom_1up.inc.c:            o->oFaceAngleYaw += 1000;
src/game/behaviors/mushroom_1up.inc.c:            o->oFaceAnglePitch = 0x1A00;
src/game/behaviors/mushroom_1up.inc.c:        o->header.gfx.node.flags |= GRAPH_RENDER_INVISIBLE;
src/game/behaviors/mushroom_1up.inc.c:        o->oFaceAngleYaw += 8000;
src/game/behaviors/mushroom_1up.inc.c:            if (o->oFaceAngleYaw > 0x10000) {
src/game/behaviors/mushroom_1up.inc.c:                o->oFaceAngleYaw = 0;
src/game/behaviors/mushroom_1up.inc.c:        if (o->oAction == 0) {
src/game/behaviors/mushroom_1up.inc.c:                    o->oAction = 1;
src/game/behaviors/mushroom_1up.inc.c:                    o->oTimer = 0;
src/game/behaviors/mushroom_1up.inc.c:                    o->oMoveAngleYaw += 0x8000;
src/game/behaviors/mushroom_1up.inc.c:            if (o->oTimer > 5) {
src/game/behaviors/mushroom_1up.inc.c:            o->oForwardVel --;
src/game/behaviors/mushroom_1up.inc.c:            if (o->oTimer > 40) {
src/game/behaviors/mushroom_1up.inc.c:                o->oAction = 1;
src/game/behaviors/mushroom_1up.inc.c:                o->oTimer = 0;
src/game/behaviors/mushroom_1up.inc.c:                o->oMoveAngleYaw += 0x8000;
src/game/behaviors/mushroom_1up.inc.c:            if (o->numCollidedObjs > 0) {
src/game/behaviors/mushroom_1up.inc.c:                o->oAction = 1;
src/game/behaviors/mushroom_1up.inc.c:                o->oTimer = 0;
src/game/behaviors/mushroom_1up.inc.c:                o->oMoveAngleYaw += 0x8000;
src/game/behaviors/mushroom_1up.inc.c:        if (o->oAction == 1) {
src/game/behaviors/mushroom_1up.inc.c:            f32 sp34 = gMarioObject->header.gfx.pos[0] - o->oPosX;
src/game/behaviors/mushroom_1up.inc.c:            f32 sp30 = gMarioObject->header.gfx.pos[1] + 120.0f - o->oPosY;
src/game/behaviors/mushroom_1up.inc.c:            f32 sp2C = gMarioObject->header.gfx.pos[2] - o->oPosZ;
src/game/behaviors/mushroom_1up.inc.c:            o->oMoveAnglePitch = approach_s16_symmetric(o->oMoveAnglePitch, sp2A, 0x1000);
src/game/behaviors/mushroom_1up.inc.c:            o->oVelY = sins(o->oMoveAnglePitch) * 80.0f;
src/game/behaviors/mushroom_1up.inc.c:            o->oForwardVel = coss(o->oMoveAnglePitch) * 80.0f;
src/game/behaviors/mushroom_1up.inc.c:            if (o->oDistanceToMario < 200.0f || o->oTimer > 120) {
src/game/behaviors/mushroom_1up.inc.c:    if (o->oAction == 0) {
src/game/behaviors/mushroom_1up.inc.c:        if ((o->oDistanceToMario < 200.0f)&&(gMarioState->powerup == 1)) {
src/game/behaviors/mushroom_1up.inc.c:            gMarioState->faceAngle[0] = o->oFaceAngleYaw;
src/game/behaviors/mushroom_1up.inc.c:            gMarioObject->header.gfx.angle[1] = o->oFaceAngleYaw;
src/game/behaviors/mushroom_1up.inc.c:            o->oAction = 1;
src/game/behaviors/mushroom_1up.inc.c:            o->oForwardVel = 20;
src/game/behaviors/mushroom_1up.inc.c:            o->oHomeY = gMarioState->forwardVel;
src/game/behaviors/mushroom_1up.inc.c:    if (o->oAction == 1) {
src/game/behaviors/mushroom_1up.inc.c:            o->oForwardVel += o->oHomeY;
src/game/behaviors/mushroom_1up.inc.c:            if (o->oHomeY < 40.0f) {
src/game/behaviors/mushroom_1up.inc.c:                o->oHomeY += 1.0f;
src/game/behaviors/mushroom_1up.inc.c:            gMarioState->pos[0] = o->oPosX + o->oForwardVel * sins(o->oFaceAngleYaw);
src/game/behaviors/mushroom_1up.inc.c:            gMarioState->pos[1] = o->oPosY + o->oForwardVel * -sins(o->oFaceAnglePitch);
src/game/behaviors/mushroom_1up.inc.c:            gMarioState->pos[2] = o->oPosZ + o->oForwardVel * coss(o->oFaceAngleYaw);
src/game/behaviors/mushroom_1up.inc.c:            gMarioState->faceAngle[0] = o->oFaceAngleYaw;
src/game/behaviors/mushroom_1up.inc.c:            gMarioObject->header.gfx.angle[1] = o->oFaceAngleYaw;
src/game/behaviors/mushroom_1up.inc.c:            if (o->oForwardVel > o->oBehParams2ndByte*100.0f) {
src/game/behaviors/mushroom_1up.inc.c:                o->oAction = 0;
src/game/behaviors/mushroom_1up.inc.c:                gMarioState->forwardVel = o->oHomeY;
src/game/behaviors/mushroom_1up.inc.c:    switch (o->oAction) {
src/game/behaviors/mushroom_1up.inc.c:            o->header.gfx.node.flags |= GRAPH_RENDER_INVISIBLE;
src/game/behaviors/mushroom_1up.inc.c:            if (o->oDistanceToMario < 3000) {
src/game/behaviors/mushroom_1up.inc.c:                o->header.gfx.node.flags &= ~GRAPH_RENDER_INVISIBLE;
src/game/behaviors/mushroom_1up.inc.c:                o->oAction = 1;
src/game/behaviors/mushroom_1up.inc.c:                switch(o->oBehParams2ndByte) {
src/game/behaviors/mushroom_1up.inc.c:                    o->prevObj = spawn_object(o, MODEL_YELLOW_COIN, bhvMovingYellowCoin);
src/game/behaviors/mushroom_1up.inc.c:                    o->prevObj = spawn_object(o, MODEL_1UP, bhv1upSliding);
src/game/behaviors/mushroom_1up.inc.c:                    o->prevObj = spawn_object(o, 0xEF, bhvMovingGreenCoin);
src/game/behaviors/mushroom_1up.inc.c:                    o->prevObj = spawn_object(o, MODEL_GOOMBA, bhvGoomba);
src/game/behaviors/mushroom_1up.inc.c:                    o->prevObj = spawn_object(o, MODEL_THWOMP, bhvThwomp);
src/game/behaviors/mushroom_1up.inc.c:            o->prevObj->oTimer = 0;
src/game/behaviors/mushroom_1up.inc.c:            o->prevObj->oVelY = 0;
src/game/behaviors/mushroom_1up.inc.c:            o->prevObj->oPosX = o->oPosX;
src/game/behaviors/mushroom_1up.inc.c:            o->prevObj->oPosZ = o->oPosZ;
src/game/behaviors/mushroom_1up.inc.c:            o->prevObj->oAction = 0;
src/game/behaviors/mushroom_1up.inc.c:            o->header.gfx.node.flags |= GRAPH_RENDER_INVISIBLE;
src/game/behaviors/mushroom_1up.inc.c:            o->prevObj->header.gfx.node.flags |= GRAPH_RENDER_INVISIBLE;
src/game/behaviors/mushroom_1up.inc.c:            if (o->oDistanceToMario < 3000) {
src/game/behaviors/mushroom_1up.inc.c:                o->prevObj->header.gfx.node.flags &= ~GRAPH_RENDER_INVISIBLE;
src/game/behaviors/mushroom_1up.inc.c:                o->header.gfx.node.flags &= ~GRAPH_RENDER_INVISIBLE;
src/game/behaviors/mushroom_1up.inc.c:                if (o->oBehParams2ndByte > 2) {
src/game/behaviors/mushroom_1up.inc.c:                    o->prevObj->oFaceAngleRoll = 0x7FFF;
src/game/behaviors/mushroom_1up.inc.c:                    o->prevObj->oPosY = o->oPosY+140;
src/game/behaviors/mushroom_1up.inc.c:                    o->prevObj->oPosY = o->oPosY+70;
src/game/behaviors/mushroom_1up.inc.c:                o->oPosY = o->oHomeY + (55.0f * sins(o->oTimer*500));
src/game/behaviors/mushroom_1up.inc.c:                if (o->oBehParams2ndByte > 2) {
src/game/behaviors/mushroom_1up.inc.c:                        o->oAngleToMario = cur_obj_angle_to_home();
src/game/behaviors/mushroom_1up.inc.c:                        o->oForwardVel = 5.0f;
src/game/behaviors/mushroom_1up.inc.c:                        o->oAngleToMario = obj_angle_to_object(o, gMarioObject);
src/game/behaviors/mushroom_1up.inc.c:                        o->oForwardVel = 20.0f;
src/game/behaviors/mushroom_1up.inc.c:                    cur_obj_rotate_yaw_toward(o->oAngleToMario, 0x400);
src/game/behaviors/mushroom_1up.inc.c:            if ((o->oDistanceToMario < 200)||(BubDist < 200)) {
src/game/behaviors/mushroom_1up.inc.c:                o->prevObj->oFaceAngleRoll = 0;
src/game/behaviors/mushroom_1up.inc.c:                o->header.gfx.node.flags |= GRAPH_RENDER_INVISIBLE;
src/game/behaviors/mushroom_1up.inc.c:                o->oAction = 5;
src/game/behaviors/mushroom_1up.inc.c:                o->oTimer = 0;
src/game/behaviors/mushroom_1up.inc.c:            if (o->oTimer > 30) {
src/game/behaviors/mushroom_1up.inc.c:                o->activeFlags = ACTIVE_FLAG_DEACTIVATED;
src/game/behaviors/mushroom_1up.inc.c:        o->oAnimState = shitcum_animstate_table[o->oTimer];
src/game/behaviors/mushroom_1up.inc.c:        if (o->oTimer == 19) {
src/game/behaviors/mushroom_1up.inc.c:            o->oTimer = 0;
src/game/behaviors/mushroom_1up.inc.c:        if (o->oDistanceToMario < 100.0f) {
src/game/behaviors/mushroom_1up.inc.c:        o->oAnimState = 4;
src/game/behaviors/mushroom_1up.inc.c:        o->oTimer = 0;
src/game/behaviors/music_touch.inc.c:    if (o->oAction == 0) {
src/game/behaviors/music_touch.inc.c:        if (o->oDistanceToMario < 200.0f) {
src/game/behaviors/music_touch.inc.c:            o->oAction++;
src/game/behaviors/orange_number.inc.c:    o->oAnimState = o->oBehParams2ndByte;
src/game/behaviors/orange_number.inc.c:    o->oVelY = 26.0f;
src/game/behaviors/orange_number.inc.c:    o->oPosY += o->oVelY;
src/game/behaviors/orange_number.inc.c:    o->oVelY -= 2.0f;
src/game/behaviors/orange_number.inc.c:    if (o->oVelY < -21.0f)
src/game/behaviors/orange_number.inc.c:        o->oVelY = 14.0;
src/game/behaviors/orange_number.inc.c:    if (o->oTimer == 35) {
src/game/behaviors/orange_number.inc.c:        o->activeFlags = ACTIVE_FLAG_DEACTIVATED;
src/game/behaviors/piranha_bubbles.inc.c:    if (o->oTimer == 0) {
src/game/behaviors/piranha_bubbles.inc.c:        o->oVelY = random_float() * 10.0f + 5.0f;
src/game/behaviors/piranha_bubbles.inc.c:        o->oForwardVel = random_float() * 10.0f + 5.0f;
src/game/behaviors/piranha_bubbles.inc.c:        o->oMoveAngleYaw = random_u16();
src/game/behaviors/piranha_bubbles.inc.c:    struct Object *parent = o->parentObj; // the Piranha Plant
src/game/behaviors/piranha_bubbles.inc.c:    switch (o->oAction) {
src/game/behaviors/piranha_bubbles.inc.c:                o->oAction++; // move to PIRANHA_PLANT_BUBBLE_ACT_GROW_SHRINK_LOOP
src/game/behaviors/piranha_bubbles.inc.c:                    o->oAction++; // move to PIRANHA_PLANT_BUBBLE_ACT_BURST
src/game/behaviors/piranha_bubbles.inc.c:            o->oAction = PIRANHA_PLANT_BUBBLE_ACT_IDLE;
src/game/behaviors/piranha_plant.inc.c:    if (o->oDistanceToMario < 1200.0f) {
src/game/behaviors/piranha_plant.inc.c:        o->oAction = PIRANHA_PLANT_ACT_SLEEPING;
src/game/behaviors/piranha_plant.inc.c:    if (o->oInteractStatus & INT_STATUS_INTERACTED) {
src/game/behaviors/piranha_plant.inc.c:        if (o->oInteractStatus & INT_STATUS_WAS_ATTACKED) {
src/game/behaviors/piranha_plant.inc.c:            o->oAction = PIRANHA_PLANT_ACT_ATTACKED;
src/game/behaviors/piranha_plant.inc.c:            o->oAction = PIRANHA_PLANT_ACT_WOKEN_UP;
src/game/behaviors/piranha_plant.inc.c:        o->oInteractStatus = 0;
src/game/behaviors/piranha_plant.inc.c:    o->oInteractType = INTERACT_BOUNCE_TOP;
src/game/behaviors/piranha_plant.inc.c:    o->oDamageOrCoinValue = 0;
src/game/behaviors/piranha_plant.inc.c:    o->oDamageOrCoinValue = 3;
src/game/behaviors/piranha_plant.inc.c:    if (o->oDistanceToMario < 400.0f) {
src/game/behaviors/piranha_plant.inc.c:            o->oAction = PIRANHA_PLANT_ACT_WOKEN_UP;
src/game/behaviors/piranha_plant.inc.c:    } else if (o->oDistanceToMario < 1000.0f) {
src/game/behaviors/piranha_plant.inc.c:        o->oPiranhaPlantSleepMusicState = PIRANHA_PLANT_SLEEP_MUSIC_PLAYING;
src/game/behaviors/piranha_plant.inc.c:    } else if (o->oPiranhaPlantSleepMusicState == PIRANHA_PLANT_SLEEP_MUSIC_PLAYING) {
src/game/behaviors/piranha_plant.inc.c:        o->oPiranhaPlantSleepMusicState++;
src/game/behaviors/piranha_plant.inc.c:    o->oDamageOrCoinValue = 3;
src/game/behaviors/piranha_plant.inc.c:    if (o->oTimer == 0)
src/game/behaviors/piranha_plant.inc.c:        if (o->oTimer > 10)
src/game/behaviors/piranha_plant.inc.c:            o->oAction = PIRANHA_PLANT_ACT_BITING;
src/game/behaviors/piranha_plant.inc.c:    if (o->activeFlags & ACTIVE_FLAG_FAR_AWAY) {
src/game/behaviors/piranha_plant.inc.c:        o->oAction = PIRANHA_PLANT_ACT_IDLE;
src/game/behaviors/piranha_plant.inc.c:    o->oInteractStatus = 0;
src/game/behaviors/piranha_plant.inc.c:        o->oAction = PIRANHA_PLANT_ACT_SHRINK_AND_DIE;
src/game/behaviors/piranha_plant.inc.c:    if (o->oTimer == 0) {
src/game/behaviors/piranha_plant.inc.c:        o->oPiranhaPlantScale = 1.0f;
src/game/behaviors/piranha_plant.inc.c:    if (o->oPiranhaPlantScale > 0.0f) {
src/game/behaviors/piranha_plant.inc.c:        o->oPiranhaPlantScale = o->oPiranhaPlantScale - 0.04;
src/game/behaviors/piranha_plant.inc.c:        o->oPiranhaPlantScale = 0.0f;
src/game/behaviors/piranha_plant.inc.c:        o->oAction = PIRANHA_PLANT_ACT_WAIT_TO_RESPAWN;
src/game/behaviors/piranha_plant.inc.c:    cur_obj_scale(o->oPiranhaPlantScale);
src/game/behaviors/piranha_plant.inc.c:    if (o->oDistanceToMario > 1200.0f) {
src/game/behaviors/piranha_plant.inc.c:        o->oAction = PIRANHA_PLANT_ACT_RESPAWN;
src/game/behaviors/piranha_plant.inc.c:    if (o->oTimer == 0) {
src/game/behaviors/piranha_plant.inc.c:        o->oPiranhaPlantScale = 0.3f;
src/game/behaviors/piranha_plant.inc.c:    if (o->oPiranhaPlantScale < 1.0) {
src/game/behaviors/piranha_plant.inc.c:        o->oPiranhaPlantScale += 0.02;
src/game/behaviors/piranha_plant.inc.c:        o->oPiranhaPlantScale = 1.0f;
src/game/behaviors/piranha_plant.inc.c:        o->oAction = PIRANHA_PLANT_ACT_IDLE;
src/game/behaviors/piranha_plant.inc.c:    cur_obj_scale(o->oPiranhaPlantScale);
src/game/behaviors/piranha_plant.inc.c:    s32 frame = o->header.gfx.unk38.animFrame;
src/game/behaviors/piranha_plant.inc.c:    o->oInteractType = INTERACT_DAMAGE;
src/game/behaviors/piranha_plant.inc.c:    o->oMoveAngleYaw = approach_s16_symmetric(o->oMoveAngleYaw, o->oAngleToMario, 0x400);
src/game/behaviors/piranha_plant.inc.c:    if (o->oDistanceToMario > 500.0f)
src/game/behaviors/piranha_plant.inc.c:            o->oAction = PIRANHA_PLANT_ACT_STOPPED_BITING;
src/game/behaviors/piranha_plant.inc.c:    if (o->oInteractStatus & INT_STATUS_INTERACTED)
src/game/behaviors/piranha_plant.inc.c:            o->oAction = PIRANHA_PLANT_ACT_ATTACKED;
src/game/behaviors/piranha_plant.inc.c:        o->oAction = PIRANHA_PLANT_ACT_SLEEPING;
src/game/behaviors/piranha_plant.inc.c:    if (o->oDistanceToMario < 400.0f)
src/game/behaviors/piranha_plant.inc.c:            o->oAction = PIRANHA_PLANT_ACT_BITING;
src/game/behaviors/piranha_plant.inc.c:    o->oInteractStatus = 0;
src/game/behaviors/platform_on_track.inc.c:    o->oAction = PLATFORM_ON_TRACK_ACT_INIT;
src/game/behaviors/platform_on_track.inc.c:    o->oPlatformOnTrackBaseBallIndex += 99;
src/game/behaviors/platform_on_track.inc.c:    if (!((u16)(o->oBehParams >> 16) & PLATFORM_ON_TRACK_BP_DONT_DISAPPEAR)) {
src/game/behaviors/platform_on_track.inc.c:            o->header.gfx.node.flags &= ~GRAPH_RENDER_INVISIBLE;
src/game/behaviors/platform_on_track.inc.c:    if (!(o->activeFlags & ACTIVE_FLAG_IN_DIFFERENT_ROOM)) {
src/game/behaviors/platform_on_track.inc.c:        s16 pathIndex = (u16)(o->oBehParams >> 16) & PLATFORM_ON_TRACK_BP_MASK_PATH;
src/game/behaviors/platform_on_track.inc.c:        o->oPlatformOnTrackType = ((u16)(o->oBehParams >> 16) & PLATFORM_ON_TRACK_BP_MASK_TYPE) >> 4;
src/game/behaviors/platform_on_track.inc.c:        o->oPlatformOnTrackIsNotSkiLift = o->oPlatformOnTrackType - PLATFORM_ON_TRACK_TYPE_SKI_LIFT;
src/game/behaviors/platform_on_track.inc.c:        o->collisionData =
src/game/behaviors/platform_on_track.inc.c:            segmented_to_virtual(sPlatformOnTrackCollisionModels[o->oPlatformOnTrackType]);
src/game/behaviors/platform_on_track.inc.c:        o->oPlatformOnTrackStartWaypoint = segmented_to_virtual(sPlatformOnTrackPaths[pathIndex]);
src/game/behaviors/platform_on_track.inc.c:        o->oPlatformOnTrackIsNotHMC = pathIndex - 4;
src/game/behaviors/platform_on_track.inc.c:        o->oBehParams2ndByte = o->oMoveAngleYaw; // TODO: Weird?
src/game/behaviors/platform_on_track.inc.c:        if (o->oPlatformOnTrackType == PLATFORM_ON_TRACK_TYPE_CHECKERED) {
src/game/behaviors/platform_on_track.inc.c:            o->header.gfx.scale[1] = 2.0f;
src/game/behaviors/platform_on_track.inc.c:    o->oPlatformOnTrackPrevWaypoint = o->oPlatformOnTrackStartWaypoint;
src/game/behaviors/platform_on_track.inc.c:    o->oPlatformOnTrackPrevWaypointFlags = 0;
src/game/behaviors/platform_on_track.inc.c:    o->oPlatformOnTrackBaseBallIndex = 0;
src/game/behaviors/platform_on_track.inc.c:    o->oPosX = o->oHomeX = o->oPlatformOnTrackStartWaypoint->pos[0];
src/game/behaviors/platform_on_track.inc.c:    o->oPosY = o->oHomeY = o->oPlatformOnTrackStartWaypoint->pos[1];
src/game/behaviors/platform_on_track.inc.c:    o->oPosZ = o->oHomeZ = o->oPlatformOnTrackStartWaypoint->pos[2];
src/game/behaviors/platform_on_track.inc.c:    o->oFaceAngleYaw = o->oBehParams2ndByte;
src/game/behaviors/platform_on_track.inc.c:    o->oForwardVel = o->oVelX = o->oVelY = o->oVelZ = o->oPlatformOnTrackDistMovedSinceLastBall = 0.0f;
src/game/behaviors/platform_on_track.inc.c:    o->oPlatformOnTrackWasStoodOn = FALSE;
src/game/behaviors/platform_on_track.inc.c:    if (o->oPlatformOnTrackIsNotSkiLift) {
src/game/behaviors/platform_on_track.inc.c:        o->oFaceAngleRoll = 0;
src/game/behaviors/platform_on_track.inc.c:        platform_on_track_update_pos_or_spawn_ball(i, o->oHomeX, o->oHomeY, o->oHomeZ);
src/game/behaviors/platform_on_track.inc.c:    o->oAction = PLATFORM_ON_TRACK_ACT_WAIT_FOR_MARIO;
src/game/behaviors/platform_on_track.inc.c:        if (o->oTimer > 20) {
src/game/behaviors/platform_on_track.inc.c:            o->oAction = PLATFORM_ON_TRACK_ACT_MOVE_ALONG_TRACK;
src/game/behaviors/platform_on_track.inc.c:        if (o->activeFlags & ACTIVE_FLAG_IN_DIFFERENT_ROOM) {
src/game/behaviors/platform_on_track.inc.c:        o->oTimer = 0;
src/game/behaviors/platform_on_track.inc.c:    if (!o->oPlatformOnTrackIsNotSkiLift) {
src/game/behaviors/platform_on_track.inc.c:    } else if (!o->oPlatformOnTrackIsNotHMC) {
src/game/behaviors/platform_on_track.inc.c:    if (o->oPlatformOnTrackPrevWaypointFlags == WAYPOINT_FLAGS_END
src/game/behaviors/platform_on_track.inc.c:        && !((u16)(o->oBehParams >> 16) & PLATFORM_ON_TRACK_BP_RETURN_TO_START)) {
src/game/behaviors/platform_on_track.inc.c:        o->oAction = PLATFORM_ON_TRACK_ACT_FALL;
src/game/behaviors/platform_on_track.inc.c:        if (o->oPlatformOnTrackPrevWaypointFlags != 0 && !o->oPlatformOnTrackIsNotSkiLift) {
src/game/behaviors/platform_on_track.inc.c:            if (o->oPlatformOnTrackPrevWaypointFlags == WAYPOINT_FLAGS_END
src/game/behaviors/platform_on_track.inc.c:                || o->oPlatformOnTrackPrevWaypointFlags == WAYPOINT_FLAGS_PLATFORM_ON_TRACK_PAUSE) {
src/game/behaviors/platform_on_track.inc.c:                o->oForwardVel = 0.0f;
src/game/behaviors/platform_on_track.inc.c:                if (o->oPlatformOnTrackPrevWaypointFlags == WAYPOINT_FLAGS_END) {
src/game/behaviors/platform_on_track.inc.c:                    o->oAction = PLATFORM_ON_TRACK_ACT_INIT;
src/game/behaviors/platform_on_track.inc.c:                    o->oAction = PLATFORM_ON_TRACK_ACT_PAUSE_BRIEFLY;
src/game/behaviors/platform_on_track.inc.c:            if (!o->oPlatformOnTrackIsNotSkiLift) {
src/game/behaviors/platform_on_track.inc.c:                o->oForwardVel = 10.0f;
src/game/behaviors/platform_on_track.inc.c:            if (approach_f32_ptr(&o->oPlatformOnTrackDistMovedSinceLastBall, 300.0f, o->oForwardVel)) {
src/game/behaviors/platform_on_track.inc.c:                o->oPlatformOnTrackDistMovedSinceLastBall -= 300.0f;
src/game/behaviors/platform_on_track.inc.c:                o->oHomeX = o->oPosX;
src/game/behaviors/platform_on_track.inc.c:                o->oHomeY = o->oPosY;
src/game/behaviors/platform_on_track.inc.c:                o->oHomeZ = o->oPosZ;
src/game/behaviors/platform_on_track.inc.c:                o->oPlatformOnTrackBaseBallIndex = (u16)(o->oPlatformOnTrackBaseBallIndex + 1);
src/game/behaviors/platform_on_track.inc.c:                platform_on_track_update_pos_or_spawn_ball(5, o->oHomeX, o->oHomeY, o->oHomeZ);
src/game/behaviors/platform_on_track.inc.c:        platform_on_track_update_pos_or_spawn_ball(0, o->oPosX, o->oPosY, o->oPosZ);
src/game/behaviors/platform_on_track.inc.c:        o->oMoveAnglePitch = o->oPlatformOnTrackPitch;
src/game/behaviors/platform_on_track.inc.c:        o->oMoveAngleYaw = o->oPlatformOnTrackYaw;
src/game/behaviors/platform_on_track.inc.c:        if (!((u16)(o->oBehParams >> 16) & PLATFORM_ON_TRACK_BP_DONT_TURN_YAW)) {
src/game/behaviors/platform_on_track.inc.c:            s16 targetFaceYaw = o->oMoveAngleYaw + 0x4000;
src/game/behaviors/platform_on_track.inc.c:            s16 yawSpeed = abs_angle_diff(targetFaceYaw, o->oFaceAngleYaw) / 20;
src/game/behaviors/platform_on_track.inc.c:            initialAngle = o->oFaceAngleYaw;
src/game/behaviors/platform_on_track.inc.c:            o->oAngleVelYaw = (s16) o->oFaceAngleYaw - initialAngle;
src/game/behaviors/platform_on_track.inc.c:        if (((u16)(o->oBehParams >> 16) & PLATFORM_ON_TRACK_BP_DONT_TURN_ROLL)) {
src/game/behaviors/platform_on_track.inc.c:            s16 rollSpeed = abs_angle_diff(o->oMoveAnglePitch, o->oFaceAngleRoll) / 20;
src/game/behaviors/platform_on_track.inc.c:            initialAngle = o->oFaceAngleRoll;
src/game/behaviors/platform_on_track.inc.c:            obj_face_roll_approach(o->oMoveAnglePitch, rollSpeed);
src/game/behaviors/platform_on_track.inc.c:            o->oAngleVelRoll = (s16) o->oFaceAngleRoll - initialAngle;
src/game/behaviors/platform_on_track.inc.c:        o->oTimer = 0;
src/game/behaviors/platform_on_track.inc.c:        o->header.gfx.node.flags &= ~GRAPH_RENDER_INVISIBLE;
src/game/behaviors/platform_on_track.inc.c:    if (o->oTimer > 20) {
src/game/behaviors/platform_on_track.inc.c:        o->oAction = PLATFORM_ON_TRACK_ACT_MOVE_ALONG_TRACK;
src/game/behaviors/platform_on_track.inc.c:        o->oTimer = 0;
src/game/behaviors/platform_on_track.inc.c:    UNUSED s32 initialRoll = o->oFaceAngleRoll;
src/game/behaviors/platform_on_track.inc.c:    o->oFaceAngleRoll += (s32) o->oPlatformOnTrackSkiLiftRollVel;
src/game/behaviors/platform_on_track.inc.c:        targetRoll = o->oForwardVel * sins(o->oMoveAngleYaw) * -50.0f
src/game/behaviors/platform_on_track.inc.c:                     + (s32)(o->oDistanceToMario * sins(o->oAngleToMario - o->oFaceAngleYaw) * -4.0f);
src/game/behaviors/platform_on_track.inc.c:        /* value          */ &o->oFaceAngleRoll,
src/game/behaviors/platform_on_track.inc.c:        /* vel            */ &o->oPlatformOnTrackSkiLiftRollVel,
src/game/behaviors/platform_on_track.inc.c:    clamp_f32(&o->oPlatformOnTrackSkiLiftRollVel, -100.0f, 100.0f);
src/game/behaviors/platform_on_track.inc.c:    switch (o->oAction) {
src/game/behaviors/platform_on_track.inc.c:    if (!o->oPlatformOnTrackIsNotSkiLift) {
src/game/behaviors/platform_on_track.inc.c:    } else if (o->oPlatformOnTrackType == PLATFORM_ON_TRACK_TYPE_CARPET) {
src/game/behaviors/platform_on_track.inc.c:        if (!o->oPlatformOnTrackWasStoodOn && gMarioObject->platform == o) {
src/game/behaviors/platform_on_track.inc.c:            o->oPlatformOnTrackOffsetY = -8.0f;
src/game/behaviors/platform_on_track.inc.c:            o->oPlatformOnTrackWasStoodOn = TRUE;
src/game/behaviors/platform_on_track.inc.c:        approach_f32_ptr(&o->oPlatformOnTrackOffsetY, 0.0f, 0.5f);
src/game/behaviors/platform_on_track.inc.c:        o->oPosY += o->oPlatformOnTrackOffsetY;
src/game/behaviors/platform_on_track.inc.c:        (s16) o->oBehParams2ndByte - (s16) o->parentObj->oPlatformOnTrackBaseBallIndex - 1;
src/game/behaviors/pokey.inc.c:        if (o->parentObj->oAction == POKEY_ACT_UNLOAD_PARTS) {
src/game/behaviors/pokey.inc.c:            obj_update_blinking(&o->oPokeyBodyPartBlinkTimer, 30, 60, 4);
src/game/behaviors/pokey.inc.c:            if (o->oBehParams2ndByte > 1
src/game/behaviors/pokey.inc.c:                && !(o->parentObj->oPokeyAliveBodyPartFlags & (1 << (o->oBehParams2ndByte - 1)))) {
src/game/behaviors/pokey.inc.c:                o->parentObj->oPokeyAliveBodyPartFlags =
src/game/behaviors/pokey.inc.c:                    o->parentObj->oPokeyAliveBodyPartFlags | 1 << (o->oBehParams2ndByte - 1);
src/game/behaviors/pokey.inc.c:                o->parentObj->oPokeyAliveBodyPartFlags =
src/game/behaviors/pokey.inc.c:                    o->parentObj->oPokeyAliveBodyPartFlags & ((1 << o->oBehParams2ndByte) ^ ~0);
src/game/behaviors/pokey.inc.c:                o->oBehParams2ndByte -= 1;
src/game/behaviors/pokey.inc.c:            else if (o->parentObj->oPokeyBottomBodyPartSize < 1.0f
src/game/behaviors/pokey.inc.c:                     && o->oBehParams2ndByte + 1 == o->parentObj->oPokeyNumAliveBodyParts) {
src/game/behaviors/pokey.inc.c:                approach_f32_ptr(&o->parentObj->oPokeyBottomBodyPartSize, 1.0f, 0.1f);
src/game/behaviors/pokey.inc.c:                cur_obj_scale(o->parentObj->oPokeyBottomBodyPartSize * 3.0f);
src/game/behaviors/pokey.inc.c:            offsetAngle = o->oBehParams2ndByte * 0x4000 + gGlobalTimer * 0x800;
src/game/behaviors/pokey.inc.c:            o->oPosX = o->parentObj->oPosX + coss(offsetAngle) * 12.0f;
src/game/behaviors/pokey.inc.c:            o->oPosZ = o->parentObj->oPosZ + sins(offsetAngle) * 12.0f;
src/game/behaviors/pokey.inc.c:            baseHeight = o->parentObj->oPosY
src/game/behaviors/pokey.inc.c:                         + (120 * (o->parentObj->oPokeyNumAliveBodyParts - o->oBehParams2ndByte) - 240)
src/game/behaviors/pokey.inc.c:                         + 120.0f * o->parentObj->oPokeyBottomBodyPartSize;
src/game/behaviors/pokey.inc.c:            if (o->oPosY < baseHeight) {
src/game/behaviors/pokey.inc.c:                o->oPosY = baseHeight;
src/game/behaviors/pokey.inc.c:                o->oVelY = 0.0f;
src/game/behaviors/pokey.inc.c:            if (o->oBehParams2ndByte == 0) {
src/game/behaviors/pokey.inc.c:                o->oNumLootCoins = 0;
src/game/behaviors/pokey.inc.c:                o->oNumLootCoins = 0;
src/game/behaviors/pokey.inc.c:            if (o->oBehParams2ndByte != choice) {
src/game/behaviors/pokey.inc.c:                o->oTimer = 0;
src/game/behaviors/pokey.inc.c:            if ((o->oBehParams2ndByte == choice)&&(o->oTimer > 90)&&(o->parentObj->oPokeyHeadWasKilled == FALSE)) {
src/game/behaviors/pokey.inc.c:                o->parentObj->oPokeyAliveBodyPartFlags = o->parentObj->oPokeyAliveBodyPartFlags & ((1 << o->oBehParams2ndByte) ^ ~0);
src/game/behaviors/pokey.inc.c:                o->parentObj->oPokeyNumAliveBodyParts -= 1;
src/game/behaviors/pokey.inc.c:                hammer->oMoveAngleYaw = o->oAngleToMario;
src/game/behaviors/pokey.inc.c:            attack = obj_handle_attacks(&sPokeyBodyPartHitbox, o->oAction, sPokeyBodyPartAttackHandlers);
src/game/behaviors/pokey.inc.c:                o->parentObj->oPokeyNumAliveBodyParts -= 1;
src/game/behaviors/pokey.inc.c:                if (o->oBehParams2ndByte == 0) {
src/game/behaviors/pokey.inc.c:                    o->parentObj->oPokeyHeadWasKilled = TRUE;
src/game/behaviors/pokey.inc.c:                    //o->oNumLootCoins = -1;
src/game/behaviors/pokey.inc.c:                    o->oNumLootCoins = 12;
src/game/behaviors/pokey.inc.c:                o->parentObj->oPokeyAliveBodyPartFlags = o->parentObj->oPokeyAliveBodyPartFlags & ((1 << o->oBehParams2ndByte) ^ ~0);
src/game/behaviors/pokey.inc.c:            } else if (o->parentObj->oPokeyHeadWasKilled) {
src/game/behaviors/pokey.inc.c:                if (--o->oPokeyBodyPartDeathDelayAfterHeadKilled < 0) {
src/game/behaviors/pokey.inc.c:                    o->parentObj->oPokeyNumAliveBodyParts -= 1;
src/game/behaviors/pokey.inc.c:                o->oPokeyBodyPartDeathDelayAfterHeadKilled = (o->oBehParams2ndByte << 2) + 20;
src/game/behaviors/pokey.inc.c:        o->oAnimState = 1;
src/game/behaviors/pokey.inc.c:    o->oGraphYOffset = o->header.gfx.scale[1] * 22.0f;
src/game/behaviors/pokey.inc.c:    if (o->oDistanceToMario < 3000.0f) {
src/game/behaviors/pokey.inc.c:        o->oPokeyAliveBodyPartFlags = 0xFF;
src/game/behaviors/pokey.inc.c:        o->oPokeyNumAliveBodyParts = 8;
src/game/behaviors/pokey.inc.c:        o->oPokeyBottomBodyPartSize = 1.0f;
src/game/behaviors/pokey.inc.c:        o->oAction = POKEY_ACT_WANDER;
src/game/behaviors/pokey.inc.c:    if (o->oPokeyNumAliveBodyParts == 0) {
src/game/behaviors/pokey.inc.c:    } else if (o->oDistanceToMario > 3500.0f) {
src/game/behaviors/pokey.inc.c:        o->oAction = POKEY_ACT_UNLOAD_PARTS;
src/game/behaviors/pokey.inc.c:        o->oForwardVel = 0.0f;
src/game/behaviors/pokey.inc.c:        if (o->oPokeyHeadWasKilled) {
src/game/behaviors/pokey.inc.c:            o->oForwardVel = 0.0f;
src/game/behaviors/pokey.inc.c:            o->oForwardVel = 5.0f;
src/game/behaviors/pokey.inc.c:            if (o->oPokeyNumAliveBodyParts < 8) {
src/game/behaviors/pokey.inc.c:                if (o->oTimer > 30) {
src/game/behaviors/pokey.inc.c:                    bodyPart = spawn_object_relative(o->oPokeyNumAliveBodyParts, 0, 0, 0, o,
src/game/behaviors/pokey.inc.c:                        o->oPokeyAliveBodyPartFlags =
src/game/behaviors/pokey.inc.c:                            o->oPokeyAliveBodyPartFlags | (1 << o->oPokeyNumAliveBodyParts);
src/game/behaviors/pokey.inc.c:                        o->oPokeyNumAliveBodyParts += 1;
src/game/behaviors/pokey.inc.c:                        o->oPokeyBottomBodyPartSize = 0.0f;
src/game/behaviors/pokey.inc.c:                    o->oTimer = 0;
src/game/behaviors/pokey.inc.c:                o->oTimer = 0;
src/game/behaviors/pokey.inc.c:            if (o->oPokeyTurningAwayFromWall) {
src/game/behaviors/pokey.inc.c:                o->oPokeyTurningAwayFromWall =
src/game/behaviors/pokey.inc.c:                    obj_resolve_collisions_and_turn(o->oPokeyTargetYaw, 0x200);
src/game/behaviors/pokey.inc.c:                if (o->oDistanceToMario >= 25000.0f) {
src/game/behaviors/pokey.inc.c:                    o->oPokeyTargetYaw = o->oAngleToMario;
src/game/behaviors/pokey.inc.c:                if (!(o->oPokeyTurningAwayFromWall =
src/game/behaviors/pokey.inc.c:                          obj_bounce_off_walls_edges_objects(&o->oPokeyTargetYaw))) {
src/game/behaviors/pokey.inc.c:                    if (o->oPokeyChangeTargetTimer != 0) {
src/game/behaviors/pokey.inc.c:                        o->oPokeyChangeTargetTimer -= 1;
src/game/behaviors/pokey.inc.c:                    } else if (o->oDistanceToMario > 2000.0f) {
src/game/behaviors/pokey.inc.c:                        o->oPokeyTargetYaw = obj_random_fixed_turn(0x2000);
src/game/behaviors/pokey.inc.c:                        o->oPokeyChangeTargetTimer = random_linear_offset(30, 50);
src/game/behaviors/pokey.inc.c:                        targetAngleOffset = (s32)(0x4000 - (o->oDistanceToMario - 200.0f) * 10.0f);
src/game/behaviors/pokey.inc.c:                        if ((s16)(o->oAngleToMario - o->oMoveAngleYaw) > 0) {
src/game/behaviors/pokey.inc.c:                        o->oPokeyTargetYaw = o->oAngleToMario + targetAngleOffset;
src/game/behaviors/pokey.inc.c:                cur_obj_rotate_yaw_toward(o->oPokeyTargetYaw, 0x200);
src/game/behaviors/pokey.inc.c:    o->oAction = POKEY_ACT_UNINITIALIZED;
src/game/behaviors/pokey.inc.c:    o->oDeathSound = SOUND_OBJ_POKEY_DEATH;
src/game/behaviors/pokey.inc.c:    switch (o->oAction) {
src/game/behaviors/pole.inc.c:     * This is equivalent to using `o->oBehParams2ndByte` according to
src/game/behaviors/pole.inc.c:    s32 tenthHitboxHeight = o->oBehParams >> 0x10 & 0xFF;
src/game/behaviors/pole.inc.c:    o->hitboxHeight = tenthHitboxHeight * 10;
src/game/behaviors/pole.inc.c:    if (o->oTimer == 0) {
src/game/behaviors/pole.inc.c:        topBall->oPosY += o->hitboxHeight + 50.0f;
src/game/behaviors/pole_base.inc.c:    if (o->oPosY - 10.0f < gMarioObject->oPosY
src/game/behaviors/pole_base.inc.c:        && gMarioObject->oPosY < o->oPosY + o->hitboxHeight + 30.0f)
src/game/behaviors/pole_base.inc.c:        if (o->oTimer > 10)
src/game/behaviors/pole_base.inc.c:    if (o->oAction == 0) {
src/game/behaviors/pole_base.inc.c:        o->oVelX = o->oBehParams2ndByte-128;
src/game/behaviors/pole_base.inc.c:        o->oVelZ = o->oBehParams2ndByte-128;
src/game/behaviors/pole_base.inc.c:        o->oAction = 1;
src/game/behaviors/pole_base.inc.c:    if (o->oAction == 1) {
src/game/behaviors/pole_base.inc.c:            o->oPosX += o->oVelX;
src/game/behaviors/pole_base.inc.c:            if (o->oPosX > o->oHomeX) {
src/game/behaviors/pole_base.inc.c:                o->oVelX --;
src/game/behaviors/pole_base.inc.c:                o->oVelX ++;
src/game/behaviors/pole_base.inc.c:            o->oPosZ += o->oVelZ;
src/game/behaviors/pole_base.inc.c:            if (o->oPosZ > o->oHomeZ) {
src/game/behaviors/pole_base.inc.c:                o->oVelZ --;
src/game/behaviors/pole_base.inc.c:                o->oVelZ ++;
src/game/behaviors/purple_switch.inc.c:        gMarioState->StarRadarLocation[0] = (s16)o->oPosX;
src/game/behaviors/purple_switch.inc.c:        gMarioState->StarRadarLocation[1] = (s16)o->oPosY;
src/game/behaviors/purple_switch.inc.c:        gMarioState->StarRadarLocation[2] = (s16)o->oPosZ;
src/game/behaviors/purple_switch.inc.c:    switch (o->oAction) {
src/game/behaviors/purple_switch.inc.c:                    o->oAction = PURPLE_SWITCH_PRESSED;
src/game/behaviors/purple_switch.inc.c:                o->oAction = PURPLE_SWITCH_PRESSED;
src/game/behaviors/purple_switch.inc.c:            if (o->oTimer == 3) {
src/game/behaviors/purple_switch.inc.c:                    o->oAction = PURPLE_SWITCH_WAIT_FOR_MARIO_TO_GET_OFF;
src/game/behaviors/purple_switch.inc.c:                    gMarioState->NewTimer = o->oBehParams2ndByte;
src/game/behaviors/purple_switch.inc.c:                    o->oAction = PURPLE_SWITCH_TICKING;
src/game/behaviors/purple_switch.inc.c:                o->oAction = PURPLE_SWITCH_WAIT_FOR_MARIO_TO_GET_OFF;
src/game/behaviors/purple_switch.inc.c:                    spawn_default_star(o->oPosX, o->oPosY+ 200.0f, o->oPosZ);
src/game/behaviors/purple_switch.inc.c:                    o->oAction = 15;
src/game/behaviors/purple_switch.inc.c:            if (o->oTimer == 3) {
src/game/behaviors/purple_switch.inc.c:                o->oAction = PURPLE_SWITCH_IDLE;
src/game/behaviors/purple_switch.inc.c:                o->oAction = PURPLE_SWITCH_UNPRESSED;
src/game/behaviors/purple_switch.inc.c:    if (o->oAction == 0) {
src/game/behaviors/purple_switch.inc.c:        o->oMoveAngleYaw = o->oFaceAngleYaw;
src/game/behaviors/purple_switch.inc.c:        o->header.gfx.node.flags |= GRAPH_RENDER_INVISIBLE;
src/game/behaviors/purple_switch.inc.c:            o->oAction = 1;
src/game/behaviors/purple_switch.inc.c:    if (o->oAction == 1) {
src/game/behaviors/purple_switch.inc.c:        o->header.gfx.node.flags &= ~GRAPH_RENDER_INVISIBLE;
src/game/behaviors/purple_switch.inc.c:        if (o->oDistanceToMario < 225.0f*scale) {
src/game/behaviors/purple_switch.inc.c:            o->oAction = 2;
src/game/behaviors/purple_switch.inc.c:    if (o->oAction == 2) {
src/game/behaviors/purple_switch.inc.c:        o->oFaceAngleYaw += 0x1000;
src/game/behaviors/purple_switch.inc.c:    if (o->oAction > 0) {
src/game/behaviors/purple_switch.inc.c:            o->oFaceAngleYaw = o->oMoveAngleYaw;
src/game/behaviors/purple_switch.inc.c:            o->oAction = 0;
src/game/behaviors/pyramid_elevator.inc.c:    switch (o->oAction) {
src/game/behaviors/pyramid_elevator.inc.c:                o->oAction = PYRAMID_ELEVATOR_START_MOVING;
src/game/behaviors/pyramid_elevator.inc.c:            o->oPosY = o->oHomeY - sins(o->oTimer * 0x1000) * 10.0f;
src/game/behaviors/pyramid_elevator.inc.c:            if (o->oTimer == 8)
src/game/behaviors/pyramid_elevator.inc.c:                o->oAction = PYRAMID_ELEVATOR_CONSTANT_VELOCITY;
src/game/behaviors/pyramid_elevator.inc.c:            o->oVelY = -10.0f;
src/game/behaviors/pyramid_elevator.inc.c:            o->oPosY += o->oVelY;
src/game/behaviors/pyramid_elevator.inc.c:            if (o->oPosY < 128.0f) {
src/game/behaviors/pyramid_elevator.inc.c:                o->oPosY = 128.0f;
src/game/behaviors/pyramid_elevator.inc.c:                o->oAction = PYRAMID_ELEVATOR_AT_BOTTOM;
src/game/behaviors/pyramid_elevator.inc.c:            o->oPosY = sins(o->oTimer * 0x1000) * 10.0f + 128.0f;
src/game/behaviors/pyramid_elevator.inc.c:            if (o->oTimer >= 8) {
src/game/behaviors/pyramid_elevator.inc.c:                o->oVelY = 0;
src/game/behaviors/pyramid_elevator.inc.c:                o->oPosY = 128.0f;
src/game/behaviors/pyramid_elevator.inc.c:            o->activeFlags = ACTIVE_FLAG_DEACTIVATED;
src/game/behaviors/pyramid_top.inc.c:    o->oPosX = o->oHomeX + sins(o->oTimer * 0x4000) * 40.0f;
src/game/behaviors/pyramid_top.inc.c:    if (o->oTimer < 60) {
src/game/behaviors/pyramid_top.inc.c:        o->oPosY = o->oHomeY + absf_2(sins(o->oTimer * 0x2000) * 10.0f);
src/game/behaviors/pyramid_top.inc.c:        o->oAngleVelYaw += 0x100;
src/game/behaviors/pyramid_top.inc.c:        if (o->oAngleVelYaw > 0x1800) {
src/game/behaviors/pyramid_top.inc.c:            o->oAngleVelYaw = 0x1800;
src/game/behaviors/pyramid_top.inc.c:            o->oVelY = 5.0f;
src/game/behaviors/pyramid_top.inc.c:        o->oFaceAngleYaw += o->oAngleVelYaw;
src/game/behaviors/pyramid_top.inc.c:        o->oPosY += o->oVelY;
src/game/behaviors/pyramid_top.inc.c:    if (o->oTimer < 90) {
src/game/behaviors/pyramid_top.inc.c:    if (o->oTimer == 150) {
src/game/behaviors/pyramid_top.inc.c:        o->oAction = PYRAMID_TOP_ACT_EXPLODE;
src/game/behaviors/pyramid_top.inc.c:    o->activeFlags = ACTIVE_FLAG_DEACTIVATED;
src/game/behaviors/pyramid_top.inc.c:    switch (o->oAction) {
src/game/behaviors/pyramid_top.inc.c:            if (o->oPyramidTopPillarsTouched == 4) {
src/game/behaviors/pyramid_top.inc.c:                o->oAction = PYRAMID_TOP_ACT_SPINNING;
src/game/behaviors/pyramid_top.inc.c:            if (o->oTimer == 0) {
src/game/behaviors/pyramid_top.inc.c:            if (o->oTimer == 0) {
src/game/behaviors/pyramid_top.inc.c:    o->oFriction = 0.999f;
src/game/behaviors/pyramid_top.inc.c:    o->oBuoyancy = 2.0f;
src/game/behaviors/pyramid_top.inc.c:    o->oAnimState = 3;
src/game/behaviors/pyramid_top.inc.c:    cur_obj_scale(o->oPyramidTopFragmentsScale);
src/game/behaviors/pyramid_top.inc.c:    o->oFaceAngleYaw += 0x1000;
src/game/behaviors/pyramid_top.inc.c:    o->oFaceAnglePitch += 0x1000;
src/game/behaviors/pyramid_top.inc.c:    if (o->oTimer == 60) {
src/game/behaviors/pyramid_top.inc.c:        o->activeFlags = ACTIVE_FLAG_DEACTIVATED;
src/game/behaviors/pyramid_top.inc.c:        o->parentObj->oPyramidTopPillarsTouched++;
src/game/behaviors/pyramid_top.inc.c:        o->activeFlags = ACTIVE_FLAG_DEACTIVATED;
src/game/behaviors/pyramid_wall.inc.c:    switch (o->oBehParams2ndByte) {
src/game/behaviors/pyramid_wall.inc.c:            o->oPosY -= 256.0f;
src/game/behaviors/pyramid_wall.inc.c:            o->oTimer += 50;
src/game/behaviors/pyramid_wall.inc.c:            o->oPosY -= 512.0f;
src/game/behaviors/pyramid_wall.inc.c:            o->oAction = PYRAMID_WALL_ACT_MOVING_UP;
src/game/behaviors/pyramid_wall.inc.c:    switch (o->oAction) {
src/game/behaviors/pyramid_wall.inc.c:            o->oVelY = -5.12f;
src/game/behaviors/pyramid_wall.inc.c:            if (o->oTimer == 100)
src/game/behaviors/pyramid_wall.inc.c:                o->oAction = PYRAMID_WALL_ACT_MOVING_UP;
src/game/behaviors/pyramid_wall.inc.c:            o->oVelY = 5.12f;
src/game/behaviors/pyramid_wall.inc.c:            if (o->oTimer == 100)
src/game/behaviors/pyramid_wall.inc.c:                o->oAction = PYRAMID_WALL_ACT_MOVING_DOWN;
src/game/behaviors/pyramid_wall.inc.c:    o->oPosY += o->oVelY;
src/game/behaviors/racing_penguin.inc.c:        o->header.gfx.scale[1] = 5.0f;
src/game/behaviors/racing_penguin.inc.c:        o->oBehParams2ndByte = 1;
src/game/behaviors/racing_penguin.inc.c:    if (o->oTimer > o->oRacingPenguinInitTextCooldown && o->oPosY - gMarioObject->oPosY <= 0.0f
src/game/behaviors/racing_penguin.inc.c:        o->oAction = RACING_PENGUIN_ACT_SHOW_INIT_TEXT;
src/game/behaviors/racing_penguin.inc.c:    response = obj_update_race_proposition_dialog(sRacingPenguinData[o->oBehParams2ndByte].text);
src/game/behaviors/racing_penguin.inc.c:        o->oPathedStartWaypoint = o->oPathedPrevWaypoint =
src/game/behaviors/racing_penguin.inc.c:        o->oPathedPrevWaypointFlags = 0;
src/game/behaviors/racing_penguin.inc.c:        o->oAction = RACING_PENGUIN_ACT_PREPARE_FOR_RACE;
src/game/behaviors/racing_penguin.inc.c:        o->oVelY = 60.0f;
src/game/behaviors/racing_penguin.inc.c:        o->oAction = RACING_PENGUIN_ACT_WAIT_FOR_MARIO;
src/game/behaviors/racing_penguin.inc.c:        o->oRacingPenguinInitTextCooldown = 60;
src/game/behaviors/racing_penguin.inc.c:        o->oAction = RACING_PENGUIN_ACT_RACE;
src/game/behaviors/racing_penguin.inc.c:        o->oForwardVel = 20.0f;
src/game/behaviors/racing_penguin.inc.c:        o->oRacingPenguinReachedBottom = TRUE;
src/game/behaviors/racing_penguin.inc.c:        o->oAction = RACING_PENGUIN_ACT_FINISH_RACE;
src/game/behaviors/racing_penguin.inc.c:        targetSpeed = o->oPosY - gMarioObject->oPosY; //set targetspeed to be a constant value. the lower mario is on the slide the faster the penguin goes
src/game/behaviors/racing_penguin.inc.c:        if (targetSpeed < 100.0f || (o->oPathedPrevWaypointFlags & WAYPOINT_MASK_00FF) >= 35) {
src/game/behaviors/racing_penguin.inc.c:            if ((o->oPathedPrevWaypointFlags & WAYPOINT_MASK_00FF) >= 35) {
src/game/behaviors/racing_penguin.inc.c:            approach_f32_ptr(&o->oRacingPenguinWeightedNewTargetSpeed, -500.0f, 100.0f);
src/game/behaviors/racing_penguin.inc.c:            approach_f32_ptr(&o->oRacingPenguinWeightedNewTargetSpeed, 1000.0f, 30.0f);
src/game/behaviors/racing_penguin.inc.c:        targetSpeed = 0.1f * (o->oRacingPenguinWeightedNewTargetSpeed + targetSpeed);
src/game/behaviors/racing_penguin.inc.c:        cur_obj_rotate_yaw_toward(o->oPathedTargetYaw, (s32)(15.0f * o->oForwardVel));
src/game/behaviors/racing_penguin.inc.c:        if (cur_obj_check_if_at_animation_end() && (o->oMoveFlags & 0x00000003)) {
src/game/behaviors/racing_penguin.inc.c:        if (o->oTimer > 60) {
src/game/behaviors/racing_penguin.inc.c:            o->oRacingPenguinMarioCheated = TRUE;
src/game/behaviors/racing_penguin.inc.c:        o->oTimer = 0;
src/game/behaviors/racing_penguin.inc.c:    if (o->oForwardVel != 0.0f) {
src/game/behaviors/racing_penguin.inc.c:        if (o->oTimer > 5 && (o->oMoveFlags & 0x00000200)) {
src/game/behaviors/racing_penguin.inc.c:            set_camera_shake_from_point(SHAKE_POS_SMALL, o->oPosX, o->oPosY, o->oPosZ);
src/game/behaviors/racing_penguin.inc.c:            o->oForwardVel = 0.0f;
src/game/behaviors/racing_penguin.inc.c:        o->oAction = RACING_PENGUIN_ACT_SHOW_FINAL_TEXT;
src/game/behaviors/racing_penguin.inc.c:    if (o->oRacingPenguinFinalTextbox == 0) {
src/game/behaviors/racing_penguin.inc.c:            o->oForwardVel = 0.0f;
src/game/behaviors/racing_penguin.inc.c:                if (o->oRacingPenguinMarioWon) {
src/game/behaviors/racing_penguin.inc.c:                    if (o->oRacingPenguinMarioCheated) {
src/game/behaviors/racing_penguin.inc.c:                        o->oRacingPenguinFinalTextbox = DIALOG_132;
src/game/behaviors/racing_penguin.inc.c:                        o->oRacingPenguinMarioWon = FALSE;
src/game/behaviors/racing_penguin.inc.c:                        o->oRacingPenguinFinalTextbox = DIALOG_056;
src/game/behaviors/racing_penguin.inc.c:                    o->oRacingPenguinFinalTextbox = DIALOG_037;
src/game/behaviors/racing_penguin.inc.c:            o->oForwardVel = 4.0f;
src/game/behaviors/racing_penguin.inc.c:    } else if (o->oRacingPenguinFinalTextbox > 0) {
src/game/behaviors/racing_penguin.inc.c:        if ((textResult = cur_obj_update_dialog_with_cutscene(2, 1, CUTSCENE_DIALOG, o->oRacingPenguinFinalTextbox)) != 0) {
src/game/behaviors/racing_penguin.inc.c:            o->oRacingPenguinFinalTextbox = -1;
src/game/behaviors/racing_penguin.inc.c:            o->oTimer = 0;
src/game/behaviors/racing_penguin.inc.c:    } else if (o->oRacingPenguinMarioWon) {
src/game/behaviors/racing_penguin.inc.c:        o->oRacingPenguinMarioWon = FALSE;
src/game/behaviors/racing_penguin.inc.c:    switch (o->oAction) {
src/game/behaviors/racing_penguin.inc.c:    cur_obj_push_mario_away_from_cylinder(sRacingPenguinData[o->oBehParams2ndByte].radius,
src/game/behaviors/racing_penguin.inc.c:                                      sRacingPenguinData[o->oBehParams2ndByte].height);
src/game/behaviors/racing_penguin.inc.c:    if (o->parentObj->oRacingPenguinReachedBottom
src/game/behaviors/racing_penguin.inc.c:        || (o->oDistanceToMario < 1000.0f && gMarioObject->oPosZ - o->oPosZ < 0.0f)) {
src/game/behaviors/racing_penguin.inc.c:        if (!o->parentObj->oRacingPenguinReachedBottom) {
src/game/behaviors/racing_penguin.inc.c:            o->parentObj->oRacingPenguinMarioWon = TRUE;
src/game/behaviors/racing_penguin.inc.c:    if (o->oDistanceToMario < 500.0f) {
src/game/behaviors/racing_penguin.inc.c:        o->parentObj->oRacingPenguinMarioCheated = TRUE;
src/game/behaviors/recovery_heart.inc.c:        if (o->oSpinningHeartPlayedSound == 0) {
src/game/behaviors/recovery_heart.inc.c:            o->oSpinningHeartPlayedSound += 1;
src/game/behaviors/recovery_heart.inc.c:        o->oAngleVelYaw = (s32)(200.0f * gMarioStates[0].forwardVel) + 1000;
src/game/behaviors/recovery_heart.inc.c:        o->oSpinningHeartPlayedSound = 0;
src/game/behaviors/recovery_heart.inc.c:        if ((o->oAngleVelYaw -= 50) < 400) {
src/game/behaviors/recovery_heart.inc.c:            o->oAngleVelYaw = 400;
src/game/behaviors/recovery_heart.inc.c:            o->oSpinningHeartTotalSpin = 0;
src/game/behaviors/recovery_heart.inc.c:    if ((o->oSpinningHeartTotalSpin += o->oAngleVelYaw) >= 0x10000) {
src/game/behaviors/recovery_heart.inc.c:        o->oSpinningHeartTotalSpin -= 0x10000;
src/game/behaviors/recovery_heart.inc.c:    o->oFaceAngleYaw += o->oAngleVelYaw;
src/game/behaviors/reds_star_marker.inc.c:    o->header.gfx.scale[2] = 0.75f;
src/game/behaviors/red_coin.inc.c:    UNUSED f32 floorHeight = find_floor(o->oPosX, o->oPosY, o->oPosZ, &dummyFloor);
src/game/behaviors/red_coin.inc.c:        o->parentObj = hiddenRedCoinStar;
src/game/behaviors/red_coin.inc.c:            o->parentObj = hiddenRedCoinStar;
src/game/behaviors/red_coin.inc.c:            o->parentObj = NULL;
src/game/behaviors/red_coin.inc.c:    if (o->oInteractStatus & INT_STATUS_INTERACTED) {
src/game/behaviors/red_coin.inc.c:        if (o->parentObj != NULL) {
src/game/behaviors/red_coin.inc.c:            o->parentObj->oHiddenStarTriggerCounter++;
src/game/behaviors/red_coin.inc.c:            if (o->parentObj->oHiddenStarTriggerCounter != 8) {
src/game/behaviors/red_coin.inc.c:                spawn_orange_number(o->parentObj->oHiddenStarTriggerCounter, 0, 0, 0);
src/game/behaviors/red_coin.inc.c:                           + (((u8) o->parentObj->oHiddenStarTriggerCounter - 1) << 16),
src/game/behaviors/red_coin.inc.c:        if (o->prevObj != NULL) {
src/game/behaviors/red_coin.inc.c:            o->prevObj->prevObj = NULL;
src/game/behaviors/red_coin.inc.c:        o->oInteractStatus = 0;
src/game/behaviors/rolling_log.inc.c:    o->oPitouneUnkF8 = 3970.0f;
src/game/behaviors/rolling_log.inc.c:    o->oPitouneUnkFC = 3654.0f;
src/game/behaviors/rolling_log.inc.c:    o->oPitouneUnkF4 = 271037.0f;
src/game/behaviors/rolling_log.inc.c:    o->oMoveAngleYaw = 8810;
src/game/behaviors/rolling_log.inc.c:    o->oForwardVel = 0;
src/game/behaviors/rolling_log.inc.c:    o->oVelX = 0;
src/game/behaviors/rolling_log.inc.c:    o->oVelZ = 0;
src/game/behaviors/rolling_log.inc.c:    o->oFaceAnglePitch = 0;
src/game/behaviors/rolling_log.inc.c:    o->oAngleVelPitch = 0;
src/game/behaviors/rolling_log.inc.c:        sp24 = (gMarioObject->header.gfx.pos[2] - o->oPosZ) * coss(-1*o->oMoveAngleYaw)
src/game/behaviors/rolling_log.inc.c:               - (gMarioObject->header.gfx.pos[0] - o->oPosX) * sins(-1*o->oMoveAngleYaw);
src/game/behaviors/rolling_log.inc.c:            o->oAngleVelPitch += 0x10;
src/game/behaviors/rolling_log.inc.c:            o->oAngleVelPitch -= 0x10;
src/game/behaviors/rolling_log.inc.c:        if (o->oAngleVelPitch > 0x200)
src/game/behaviors/rolling_log.inc.c:            o->oAngleVelPitch = 0x200;
src/game/behaviors/rolling_log.inc.c:        if (o->oAngleVelPitch < -0x200)
src/game/behaviors/rolling_log.inc.c:            o->oAngleVelPitch = -0x200;
src/game/behaviors/rolling_log.inc.c:        if (is_point_close_to_object(o, o->oHomeX, o->oHomeY, o->oHomeZ, 100)) {
src/game/behaviors/rolling_log.inc.c:            if (o->oAngleVelPitch != 0) {
src/game/behaviors/rolling_log.inc.c:                if (o->oAngleVelPitch > 0)
src/game/behaviors/rolling_log.inc.c:                    o->oAngleVelPitch -= 0x10;
src/game/behaviors/rolling_log.inc.c:                    o->oAngleVelPitch += 0x10;
src/game/behaviors/rolling_log.inc.c:                if (o->oAngleVelPitch < 0x10 && o->oAngleVelPitch > -0x10)
src/game/behaviors/rolling_log.inc.c:                    o->oAngleVelPitch = 0;
src/game/behaviors/rolling_log.inc.c:            if (o->oAngleVelPitch != 0x100) {
src/game/behaviors/rolling_log.inc.c:                if (o->oAngleVelPitch > 0x100)
src/game/behaviors/rolling_log.inc.c:                    o->oAngleVelPitch -= 0x10;
src/game/behaviors/rolling_log.inc.c:                    o->oAngleVelPitch += 0x10;
src/game/behaviors/rolling_log.inc.c:                if (o->oAngleVelPitch < 0x110 && o->oAngleVelPitch > 0xF0)
src/game/behaviors/rolling_log.inc.c:                    o->oAngleVelPitch = 0x100;
src/game/behaviors/rolling_log.inc.c:    f32 prevX = o->oPosX;
src/game/behaviors/rolling_log.inc.c:    f32 prevZ = o->oPosZ;
src/game/behaviors/rolling_log.inc.c:    o->oForwardVel = o->oAngleVelPitch / 0x40;
src/game/behaviors/rolling_log.inc.c:    o->oVelX = o->oForwardVel * sins(o->oMoveAngleYaw);
src/game/behaviors/rolling_log.inc.c:    o->oVelZ = o->oForwardVel * coss(o->oMoveAngleYaw);
src/game/behaviors/rolling_log.inc.c:    o->oPosX += o->oVelX;
src/game/behaviors/rolling_log.inc.c:    o->oPosZ += o->oVelZ;
src/game/behaviors/rolling_log.inc.c:    if (o->oPitouneUnkF4 < sqr(o->oPosX - o->oPitouneUnkF8) + sqr(o->oPosZ - o->oPitouneUnkFC)) {
src/game/behaviors/rolling_log.inc.c:        o->oForwardVel = 0;
src/game/behaviors/rolling_log.inc.c:        o->oPosX = prevX;
src/game/behaviors/rolling_log.inc.c:        o->oPosZ = prevZ;
src/game/behaviors/rolling_log.inc.c:        o->oVelX = 0;
src/game/behaviors/rolling_log.inc.c:        o->oVelZ = 0;
src/game/behaviors/rolling_log.inc.c:    o->oFaceAnglePitch += o->oAngleVelPitch;
src/game/behaviors/rolling_log.inc.c:    if (absf_2(o->oFaceAnglePitch & 0x1FFF) < 528.0f && o->oAngleVelPitch != 0) {
src/game/behaviors/rolling_log.inc.c:    o->oRollingLogUnkF4 += 4.0f;
src/game/behaviors/rolling_log.inc.c:    o->oAngleVelPitch += o->oRollingLogUnkF4;
src/game/behaviors/rolling_log.inc.c:    o->oFaceAnglePitch -= o->oAngleVelPitch;
src/game/behaviors/rolling_log.inc.c:    if (o->oFaceAnglePitch < -0x4000) {
src/game/behaviors/rolling_log.inc.c:        o->oFaceAnglePitch = -0x4000;
src/game/behaviors/rolling_log.inc.c:        o->oAngleVelPitch = 0;
src/game/behaviors/rolling_log.inc.c:        o->oRollingLogUnkF4 = 0;
src/game/behaviors/rolling_log.inc.c:        o->oAction = 2;
src/game/behaviors/rolling_log.inc.c:        set_camera_shake_from_point(SHAKE_POS_LARGE, o->oPosX, o->oPosY, o->oPosZ);
src/game/behaviors/rolling_log.inc.c:    o->oAngleVelPitch = 0x90;
src/game/behaviors/rolling_log.inc.c:    o->oFaceAnglePitch += o->oAngleVelPitch;
src/game/behaviors/rolling_log.inc.c:    if (o->oFaceAnglePitch > 0)
src/game/behaviors/rolling_log.inc.c:        o->oFaceAnglePitch = 0;
src/game/behaviors/rolling_log.inc.c:    if (o->oTimer == 200)
src/game/behaviors/rolling_log.inc.c:        o->oAction = 0;
src/game/behaviors/rolling_log.inc.c:    switch (o->oAction) {
src/game/behaviors/rolling_log.inc.c:            if (is_point_within_radius_of_mario(o->oPosX, o->oPosY, o->oPosZ, 1000)) {
src/game/behaviors/rolling_log.inc.c:                o->oAction = 1;
src/game/behaviors/rolling_log.inc.c:            if (o->oTimer < 8) {
src/game/behaviors/rolling_log.inc.c:                o->oPosY = o->oHomeY + sins(o->oTimer * 0x1000) * 10.0f;
src/game/behaviors/rolling_log.inc.c:            if (o->oTimer == 50) {
src/game/behaviors/rolling_log.inc.c:                o->oAction = 3;
src/game/behaviors/rolling_log.inc.c:    o->oPitouneUnkF8 = 5120.0f;
src/game/behaviors/rolling_log.inc.c:    o->oPitouneUnkFC = 6016.0f;
src/game/behaviors/rolling_log.inc.c:    o->oPitouneUnkF4 = 1048576.0f;
src/game/behaviors/rolling_log.inc.c:    o->oMoveAngleYaw = 0x3FFF;
src/game/behaviors/rolling_log.inc.c:    o->oForwardVel = 0;
src/game/behaviors/rolling_log.inc.c:    o->oVelX = 0;
src/game/behaviors/rolling_log.inc.c:    o->oVelZ = 0;
src/game/behaviors/rolling_log.inc.c:    o->oFaceAnglePitch = 0;
src/game/behaviors/rolling_log.inc.c:    o->oAngleVelPitch = 0;
src/game/behaviors/rotating_octagonal_plat.inc.c:    o->collisionData = segmented_to_virtual(D_80331A44[(u8)(o->oBehParams >> 16)]);
src/game/behaviors/rotating_octagonal_plat.inc.c:    o->oAngleVelYaw = D_80331A4C[(u8)(o->oBehParams >> 24)];
src/game/behaviors/rotating_octagonal_plat.inc.c:    o->oFaceAngleYaw += o->oAngleVelYaw;
src/game/behaviors/rotating_platform.inc.c:    if (o->oAction == 0) {
src/game/behaviors/rotating_platform.inc.c:        o->oAngleVelYaw = 0;
src/game/behaviors/rotating_platform.inc.c:        if (o->oTimer > 60) {
src/game/behaviors/rotating_platform.inc.c:            o->oAction++;
src/game/behaviors/rotating_platform.inc.c:        o->oAngleVelYaw = 0x100;
src/game/behaviors/rotating_platform.inc.c:        if (o->oTimer > 126)
src/game/behaviors/rotating_platform.inc.c:            o->oAction = 0;
src/game/behaviors/rotating_platform.inc.c:    if (o->oBehParams2ndByte < 10) {
src/game/behaviors/rotating_platform.inc.c:        o->oAngleVelYaw = o->oBehParams2ndByte * 0x100;
src/game/behaviors/rotating_platform.inc.c:        o->oAngleVelYaw = (o->oBehParams2ndByte-10) * -0x100;
src/game/behaviors/rotating_platform.inc.c:    o->oFaceAngleYaw += o->oAngleVelYaw;
src/game/behaviors/rotating_platform.inc.c:    if (o->oAction == 0) {
src/game/behaviors/rotating_platform.inc.c:        o->oAction = 1;
src/game/behaviors/rotating_platform.inc.c:        o->oVelY = 6.0f;
src/game/behaviors/rotating_platform.inc.c:        o->oHomeY = o->oPosY;
src/game/behaviors/rotating_platform.inc.c:    o->oPosY += o->oVelY;
src/game/behaviors/rotating_platform.inc.c:    if (o->oPosY > o->oHomeY) {
src/game/behaviors/rotating_platform.inc.c:        o->oVelY -= .5f;
src/game/behaviors/rotating_platform.inc.c:        o->oVelY += .5f;
src/game/behaviors/scuttlebug.inc.c:    if (o->oMoveFlags & OBJ_MOVE_HIT_WALL) {
src/game/behaviors/scuttlebug.inc.c:        *angle = o->oWallAngle;
src/game/behaviors/scuttlebug.inc.c:    } else if (o->oMoveFlags & OBJ_MOVE_HIT_EDGE) {
src/game/behaviors/scuttlebug.inc.c:        *angle = o->oMoveAngleYaw + 0x8000;
src/game/behaviors/scuttlebug.inc.c:        o->oHomeX = gMarioState->pos[0];
src/game/behaviors/scuttlebug.inc.c:        o->oHomeY = gMarioState->pos[1];
src/game/behaviors/scuttlebug.inc.c:        o->oHomeZ = gMarioState->pos[2];
src/game/behaviors/scuttlebug.inc.c:        if (o->oDistanceToMario > 800.0f) {
src/game/behaviors/scuttlebug.inc.c:            o->oFaceAngleYaw = o->oAngleToMario;
src/game/behaviors/scuttlebug.inc.c:            o->oMoveAngleYaw = o->oAngleToMario;
src/game/behaviors/scuttlebug.inc.c:            o->oForwardVel = 15.0f;
src/game/behaviors/scuttlebug.inc.c:            o->oDrawingDistance = 9000.0f;
src/game/behaviors/scuttlebug.inc.c:    if (o->oSubAction != 0
src/game/behaviors/scuttlebug.inc.c:                                              o->oScuttlebugUnkF4))
src/game/behaviors/scuttlebug.inc.c:        o->oSubAction = 3;
src/game/behaviors/scuttlebug.inc.c:    if (o->oSubAction != 1)
src/game/behaviors/scuttlebug.inc.c:        o->oScuttlebugUnkF8 = 0;
src/game/behaviors/scuttlebug.inc.c:        if ((o->oDistanceToMario < 200.0f)&&(o->oPosY-30.0f>gMarioState->pos[1])) {
src/game/behaviors/scuttlebug.inc.c:            o->oSubAction = 6;
src/game/behaviors/scuttlebug.inc.c:    vec3f_set(o->header.gfx.scale,1.0f,1.0f,1.0f);
src/game/behaviors/scuttlebug.inc.c:    switch (o->oSubAction) {
src/game/behaviors/scuttlebug.inc.c:            mtxf_copy(o->transform,gMarioState->HeadMatrix);
src/game/behaviors/scuttlebug.inc.c:            o->header.gfx.throwMatrix = &o->transform;
src/game/behaviors/scuttlebug.inc.c:            linear_mtxf_mul_vec3f(o->transform, crabNewDisplacement, crabDisplacement); // rotate it with mario's head
src/game/behaviors/scuttlebug.inc.c:            vec3f_add(o->transform[3], crabNewDisplacement); // add position
src/game/behaviors/scuttlebug.inc.c:            vec3f_copy(&o->oPosX,o->transform[3]); // copy crab position to object
src/game/behaviors/scuttlebug.inc.c:            vec3f_set(o->header.gfx.scale,3.5f,3.5f,3.5f);
src/game/behaviors/scuttlebug.inc.c:            o->oVelY = 0.0f;
src/game/behaviors/scuttlebug.inc.c:            //o->oMoveAngleYaw = gMarioState->faceAngle[1];
src/game/behaviors/scuttlebug.inc.c:            if (o->oTimer > 15) {
src/game/behaviors/scuttlebug.inc.c:                o->oTimer = 0;
src/game/behaviors/scuttlebug.inc.c:            if (o->oMoveFlags & 1)
src/game/behaviors/scuttlebug.inc.c:            if (o->oMoveFlags & 3) {
src/game/behaviors/scuttlebug.inc.c:                o->oHomeX = o->oPosX;
src/game/behaviors/scuttlebug.inc.c:                o->oHomeY = o->oPosY;
src/game/behaviors/scuttlebug.inc.c:                o->oHomeZ = o->oPosZ;
src/game/behaviors/scuttlebug.inc.c:                o->oSubAction++;
src/game/behaviors/scuttlebug.inc.c:            o->oForwardVel = 5.0f;
src/game/behaviors/scuttlebug.inc.c:                o->oAngleToMario = cur_obj_angle_to_home();
src/game/behaviors/scuttlebug.inc.c:                if (o->oScuttlebugUnkF8 == 0) {
src/game/behaviors/scuttlebug.inc.c:                    o->oScuttlebugUnkFC = 0;
src/game/behaviors/scuttlebug.inc.c:                    o->oAngleToMario = obj_angle_to_object(o, gMarioObject);
src/game/behaviors/scuttlebug.inc.c:                    if (abs_angle_diff(o->oAngleToMario, o->oMoveAngleYaw) < 0x800) {
src/game/behaviors/scuttlebug.inc.c:                        o->oScuttlebugUnkF8 = 1;
src/game/behaviors/scuttlebug.inc.c:                        o->oVelY = 50.0f;
src/game/behaviors/scuttlebug.inc.c:                } else if (o->oScuttlebugUnkF8 == 1) {
src/game/behaviors/scuttlebug.inc.c:                    o->oForwardVel = 30.0f;
src/game/behaviors/scuttlebug.inc.c:                    o->oScuttlebugUnkFC++;
src/game/behaviors/scuttlebug.inc.c:                    if (o->oScuttlebugUnkFC > 50)
src/game/behaviors/scuttlebug.inc.c:                        o->oScuttlebugUnkF8 = 0;
src/game/behaviors/scuttlebug.inc.c:            if (update_angle_from_move_flags(&o->oAngleToMario))
src/game/behaviors/scuttlebug.inc.c:                o->oSubAction = 2;
src/game/behaviors/scuttlebug.inc.c:            cur_obj_rotate_yaw_toward(o->oAngleToMario, 0x200);
src/game/behaviors/scuttlebug.inc.c:            o->oForwardVel = 5.0f;
src/game/behaviors/scuttlebug.inc.c:            if ((s16) o->oMoveAngleYaw == (s16) o->oAngleToMario)
src/game/behaviors/scuttlebug.inc.c:                o->oSubAction = 1;
src/game/behaviors/scuttlebug.inc.c:            //if (o->oPosY - o->oHomeY < -200.0f)
src/game/behaviors/scuttlebug.inc.c:            cur_obj_rotate_yaw_toward(o->oAngleToMario, 0x400);
src/game/behaviors/scuttlebug.inc.c:            o->oFlags &= ~8;
src/game/behaviors/scuttlebug.inc.c:            o->oForwardVel = -10.0f;
src/game/behaviors/scuttlebug.inc.c:            o->oVelY = 30.0f;
src/game/behaviors/scuttlebug.inc.c:            o->oSubAction++;
src/game/behaviors/scuttlebug.inc.c:            o->oForwardVel = -10.0f;
src/game/behaviors/scuttlebug.inc.c:            if (o->oMoveFlags & 1) {
src/game/behaviors/scuttlebug.inc.c:                o->oSubAction++;
src/game/behaviors/scuttlebug.inc.c:                o->oVelY = 0.0f;
src/game/behaviors/scuttlebug.inc.c:                o->oScuttlebugUnkFC = 0;
src/game/behaviors/scuttlebug.inc.c:                o->oFlags |= 8;
src/game/behaviors/scuttlebug.inc.c:                o->oInteractStatus = 0;
src/game/behaviors/scuttlebug.inc.c:            o->oForwardVel = 2.0f;
src/game/behaviors/scuttlebug.inc.c:            o->oScuttlebugUnkFC++;
src/game/behaviors/scuttlebug.inc.c:            if (o->oScuttlebugUnkFC > 30)
src/game/behaviors/scuttlebug.inc.c:                o->oSubAction = 0;
src/game/behaviors/scuttlebug.inc.c:    if (o->oForwardVel < 10.0f)
src/game/behaviors/scuttlebug.inc.c:    if (o->oMoveFlags & 3)
src/game/behaviors/scuttlebug.inc.c:    if (o->parentObj != o) {
src/game/behaviors/scuttlebug.inc.c:        if (o->activeFlags == ACTIVE_FLAG_DEACTIVATED)
src/game/behaviors/scuttlebug.inc.c:            o->parentObj->oScuttlebugSpawnerUnk88 = 1;
src/game/behaviors/scuttlebug.inc.c:    if (o->oAction == 0) {
src/game/behaviors/scuttlebug.inc.c:        if (o->oTimer > 30 && 500.0f < o->oDistanceToMario && o->oDistanceToMario < 1500.0f) {
src/game/behaviors/scuttlebug.inc.c:            scuttlebug->oScuttlebugUnkF4 = o->oScuttlebugSpawnerUnkF4;
src/game/behaviors/scuttlebug.inc.c:            o->oAction++;
src/game/behaviors/scuttlebug.inc.c:            o->oScuttlebugUnkF4 = 1;
src/game/behaviors/scuttlebug.inc.c:    } else if (o->oScuttlebugSpawnerUnk88 != 0) {
src/game/behaviors/scuttlebug.inc.c:        o->oScuttlebugSpawnerUnk88 = 0;
src/game/behaviors/scuttlebug.inc.c:        o->oAction = 0;
src/game/behaviors/scuttlebug.inc.c:    hammer->oMoveAngleYaw = o->oFaceAngleYaw;
src/game/behaviors/scuttlebug.inc.c:        o->oHomeX = gMarioState->pos[0];
src/game/behaviors/scuttlebug.inc.c:        o->oHomeY = gMarioState->pos[1];
src/game/behaviors/scuttlebug.inc.c:        o->oHomeZ = gMarioState->pos[2];
src/game/behaviors/scuttlebug.inc.c:        if (o->oDistanceToMario > 800.0f) {
src/game/behaviors/scuttlebug.inc.c:            o->oFaceAngleYaw = o->oAngleToMario;
src/game/behaviors/scuttlebug.inc.c:            o->oMoveAngleYaw = o->oAngleToMario;
src/game/behaviors/scuttlebug.inc.c:            o->oForwardVel = 15.0f;
src/game/behaviors/scuttlebug.inc.c:            o->oDrawingDistance = 9000.0f;
src/game/behaviors/scuttlebug.inc.c:    o->oFaceAngleYaw = o->oAngleToMario;
src/game/behaviors/scuttlebug.inc.c:    if (o->oDistanceToMario < 3000.0f) {
src/game/behaviors/scuttlebug.inc.c:        if (o->oAction == 0) {
src/game/behaviors/scuttlebug.inc.c:            o->oAction = 1;
src/game/behaviors/scuttlebug.inc.c:            o->oHomeX = o->oPosX;
src/game/behaviors/scuttlebug.inc.c:            o->oHomeY = o->oPosY;
src/game/behaviors/scuttlebug.inc.c:            o->oHomeZ = o->oPosZ;
src/game/behaviors/scuttlebug.inc.c:            o->oScuttlebugUnkF4 = 0;
src/game/behaviors/scuttlebug.inc.c:        if (o->oAction == 1) {
src/game/behaviors/scuttlebug.inc.c:            if (o->oTimer > 40) {
src/game/behaviors/scuttlebug.inc.c:                o->oAction = 2;
src/game/behaviors/scuttlebug.inc.c:                o->oExtraVariable1 = RandomMinMaxU16(1,6);
src/game/behaviors/scuttlebug.inc.c:                o->oTimer = 0;
src/game/behaviors/scuttlebug.inc.c:        if (o->oAction == 2) {
src/game/behaviors/scuttlebug.inc.c:            if (o->oTimer > 15) {
src/game/behaviors/scuttlebug.inc.c:                o->oTimer = 0;
src/game/behaviors/scuttlebug.inc.c:                o->oExtraVariable1 --;
src/game/behaviors/scuttlebug.inc.c:                if (o->oExtraVariable1 < 1) {
src/game/behaviors/scuttlebug.inc.c:                        o->oAction = 3;
src/game/behaviors/scuttlebug.inc.c:                        o->oVelY = 60;
src/game/behaviors/scuttlebug.inc.c:                        o->oMoveAngleYaw += 0x8000;
src/game/behaviors/scuttlebug.inc.c:                        o->oAction = 2;
src/game/behaviors/scuttlebug.inc.c:        if (o->oAction == 3) {
src/game/behaviors/scuttlebug.inc.c:            o->oForwardVel = 35.0f;
src/game/behaviors/scuttlebug.inc.c:            if (o->oTimer > 5) {
src/game/behaviors/scuttlebug.inc.c:                if (o->oMoveFlags & 3) {
src/game/behaviors/scuttlebug.inc.c:                    o->oAction = 1;
src/game/behaviors/scuttlebug.inc.c:                    o->oTimer = RandomMinMaxU16(0,30);
src/game/behaviors/scuttlebug.inc.c:                    o->oForwardVel = 0.0f;
src/game/behaviors/scuttlebug.inc.c:                    if (o->oScuttlebugUnkF4 > 0) {
src/game/behaviors/scuttlebug.inc.c:                            o->oPosX = o->oHomeX;
src/game/behaviors/scuttlebug.inc.c:                            o->oPosY = o->oHomeY;
src/game/behaviors/scuttlebug.inc.c:                            o->oPosZ = o->oHomeZ;
src/game/behaviors/scuttlebug.inc.c:                        o->oScuttlebugUnkF4 = 0;
src/game/behaviors/scuttlebug.inc.c:                        o->oScuttlebugUnkF4 ++;
src/game/behaviors/scuttlebug.inc.c:        o->oTimer --;
src/game/behaviors/scuttlebug.inc.c:    //o->oDontInertia = hit ground yet
src/game/behaviors/scuttlebug.inc.c:    switch(o->oAction) {
src/game/behaviors/scuttlebug.inc.c:        o->oForwardVel = 0;
src/game/behaviors/scuttlebug.inc.c:        o->oParentRelativePosY = 0;
src/game/behaviors/scuttlebug.inc.c:        o->oDontInertia = FALSE;
src/game/behaviors/scuttlebug.inc.c:        if (o->oDistanceToMario < 1200.0f) {
src/game/behaviors/scuttlebug.inc.c:            o->oAction = 1;
src/game/behaviors/scuttlebug.inc.c:        if (!o->oDontInertia) {
src/game/behaviors/scuttlebug.inc.c:            o->oMoveAngleYaw = approach_s16_asymptotic(o->oMoveAngleYaw,o->oAngleToMario,4);
src/game/behaviors/scuttlebug.inc.c:        if ((o->oMoveFlags & 1)&&(o->oDontInertia)) {
src/game/behaviors/scuttlebug.inc.c:            o->oForwardVel = 0;
src/game/behaviors/scuttlebug.inc.c:            o->oParentRelativePosY = -0.5f;
src/game/behaviors/scuttlebug.inc.c:            o->oDontInertia = FALSE;
src/game/behaviors/scuttlebug.inc.c:        if (o->oTimer%40==0) {
src/game/behaviors/scuttlebug.inc.c:            o->oForwardVel = 20.0f;
src/game/behaviors/scuttlebug.inc.c:            o->oVelY = 35.0f;
src/game/behaviors/scuttlebug.inc.c:            o->oParentRelativePosY = 2.0f;
src/game/behaviors/scuttlebug.inc.c:            o->oDontInertia = TRUE;
src/game/behaviors/scuttlebug.inc.c:        if (o->oDistanceToMario > 1300.0f) {
src/game/behaviors/scuttlebug.inc.c:            o->oAction = 0;
src/game/behaviors/scuttlebug.inc.c:    o->oParentRelativePosY /= 1.25;
src/game/behaviors/scuttlebug.inc.c:    vec3f_set(o->header.gfx.scale,1.0f,1.0f+o->oParentRelativePosY,1.0f);
src/game/behaviors/scuttlebug.inc.c:    o->oFaceAnglePitch += 0x2000;
src/game/behaviors/scuttlebug.inc.c:    if (o->oAction == 0) {
src/game/behaviors/scuttlebug.inc.c:        o->oAction = 1;
src/game/behaviors/scuttlebug.inc.c:    if ((o->oMoveFlags & 3)||(o->oTimer > 300)||(o->oMoveFlags & 0x200)) {
src/game/behaviors/scuttlebug.inc.c:    o->activeFlags &= ~ACTIVE_FLAG_FAR_AWAY;
src/game/behaviors/scuttlebug.inc.c:    if (o->oAction == 0) {
src/game/behaviors/scuttlebug.inc.c:        o->oAction = 1;
src/game/behaviors/scuttlebug.inc.c:    if (o->oTimer > 300) {
src/game/behaviors/scuttlebug.inc.c:    o->activeFlags &= ~ACTIVE_FLAG_FAR_AWAY;
src/game/behaviors/scuttlebug.inc.c:    o->oMoveAngleYaw = approach_s16_asymptotic(o->oMoveAngleYaw,o->oAngleToMario,4);
src/game/behaviors/scuttlebug.inc.c:    o->oAnimState = 2;
src/game/behaviors/scuttlebug.inc.c:    if (o->oDmgFade < 1) {
src/game/behaviors/scuttlebug.inc.c:    gMarioState->BossHealth = o->oHealth;
src/game/behaviors/scuttlebug.inc.c:    if (o->oAction == 0) {
src/game/behaviors/scuttlebug.inc.c:        o->oAction = 1;
src/game/behaviors/scuttlebug.inc.c:    if (o->oAction == 1) {
src/game/behaviors/scuttlebug.inc.c:        if (o->oInteractStatus & INT_STATUS_ATTACKED_MARIO) {
src/game/behaviors/scuttlebug.inc.c:            o->oAction = 2;
src/game/behaviors/scuttlebug.inc.c:    switch(o->oAction) {
src/game/behaviors/scuttlebug.inc.c:            o->oAction = 3;
src/game/behaviors/scuttlebug.inc.c:            o->oHealth = 3;
src/game/behaviors/scuttlebug.inc.c:            o->oNumLootCoins = 6;
src/game/behaviors/scuttlebug.inc.c:            o->oFlags |= OBJ_FLAG_30;
src/game/behaviors/scuttlebug.inc.c:        o->oMoveAngleYaw = approach_s16_asymptotic(o->oMoveAngleYaw,o->oAngleToMario,4);
src/game/behaviors/scuttlebug.inc.c:        if (o->oTimer == 40) {
src/game/behaviors/scuttlebug.inc.c:        if (o->oTimer > 50) {
src/game/behaviors/scuttlebug.inc.c:            o->oAction = 2;
src/game/behaviors/scuttlebug.inc.c:        if (o->oDistanceToMario > 900.0f) {
src/game/behaviors/scuttlebug.inc.c:            o->oAction = 3;
src/game/behaviors/scuttlebug.inc.c:        o->oInteractType = INTERACT_DAMAGE;
src/game/behaviors/scuttlebug.inc.c:        o->hurtboxRadius = 80;
src/game/behaviors/scuttlebug.inc.c:        o->hurtboxHeight = 400;
src/game/behaviors/scuttlebug.inc.c:        o->hitboxRadius = 80;
src/game/behaviors/scuttlebug.inc.c:        o->hitboxHeight = 400;
src/game/behaviors/scuttlebug.inc.c:        o->oDamageOrCoinValue = 3;
src/game/behaviors/scuttlebug.inc.c:            o->oMoveAngleYaw = o->oAngleToMario;
src/game/behaviors/scuttlebug.inc.c:            o->oInteractType = INTERACT_BOUNCE_TOP;
src/game/behaviors/scuttlebug.inc.c:            o->hurtboxRadius = 450;
src/game/behaviors/scuttlebug.inc.c:            o->hurtboxHeight = 90;
src/game/behaviors/scuttlebug.inc.c:            o->hitboxRadius = 400;
src/game/behaviors/scuttlebug.inc.c:            o->hitboxHeight = 100;
src/game/behaviors/scuttlebug.inc.c:            o->oDamageOrCoinValue = 6;
src/game/behaviors/scuttlebug.inc.c:            if (o->oTimer > 20) {
src/game/behaviors/scuttlebug.inc.c:                o->oAction = 1;
src/game/behaviors/scuttlebug.inc.c:            o->oForwardVel = 0;
src/game/behaviors/scuttlebug.inc.c:            o->oParentRelativePosY = 0;
src/game/behaviors/scuttlebug.inc.c:            o->oDontInertia = FALSE;
src/game/behaviors/scuttlebug.inc.c:            if (o->oDistanceToMario < 800.0f) {
src/game/behaviors/scuttlebug.inc.c:                o->oAction = 1;
src/game/behaviors/scuttlebug.inc.c:                o->oTimer = 20;
src/game/behaviors/scuttlebug.inc.c:    switch(o->oAction) {
src/game/behaviors/scuttlebug.inc.c:            if (o->oBehParams2ndByte == 1) {
src/game/behaviors/scuttlebug.inc.c:                o->oAction = 1;
src/game/behaviors/scuttlebug.inc.c:                o->oAction = 3;
src/game/behaviors/scuttlebug.inc.c:                o->oPosY -= 300.0f;
src/game/behaviors/scuttlebug.inc.c:            if (o->oTimer > 70) {
src/game/behaviors/scuttlebug.inc.c:                o->oAction =2;
src/game/behaviors/scuttlebug.inc.c:            o->oPosY-=20.0f;
src/game/behaviors/scuttlebug.inc.c:            if (o->oPosY < o->oHomeY-300.0f) {
src/game/behaviors/scuttlebug.inc.c:                o->oPosY = o->oHomeY-300.0f;
src/game/behaviors/scuttlebug.inc.c:                o->oAction = 3;
src/game/behaviors/scuttlebug.inc.c:            if ((o->oTimer > 60)&& (!((gMarioState->pos[0] > o->oPosX-60.0f)&&((gMarioState->pos[0] < o->oPosX+60.0f))))) {//dont go up if mario is above
src/game/behaviors/scuttlebug.inc.c:                o->oAction =4;
src/game/behaviors/scuttlebug.inc.c:            o->oPosY+=20.0f;
src/game/behaviors/scuttlebug.inc.c:            if (o->oPosY > o->oHomeY) {
src/game/behaviors/scuttlebug.inc.c:                o->oPosY = o->oHomeY;
src/game/behaviors/scuttlebug.inc.c:                o->oAction = 1;
src/game/behaviors/scuttlebug.inc.c:    switch(o->oAction) {
src/game/behaviors/scuttlebug.inc.c:            o->oPosY += 30.0f;
src/game/behaviors/scuttlebug.inc.c:            o->oGraphYOffset = -30.0f;
src/game/behaviors/scuttlebug.inc.c:            if (o->oBehParams2ndByte == 0) {
src/game/behaviors/scuttlebug.inc.c:                o->oMoveAngleYaw = -0x4000;
src/game/behaviors/scuttlebug.inc.c:                o->oFaceAngleYaw = 0;
src/game/behaviors/scuttlebug.inc.c:                o->oMoveAngleYaw = 0x4000;
src/game/behaviors/scuttlebug.inc.c:                o->oFaceAngleYaw = 0x8000;
src/game/behaviors/scuttlebug.inc.c:            o->oAction = 1;
src/game/behaviors/scuttlebug.inc.c:            o->oForwardVel = 16.0f;
src/game/behaviors/scuttlebug.inc.c:            o->activeFlags &= ~ACTIVE_FLAG_FAR_AWAY;
src/game/behaviors/scuttlebug.inc.c:            if (o->oTimer > 60) {
src/game/behaviors/scuttlebug.inc.c:                if ((o->oMoveFlags & OBJ_MOVE_HIT_WALL)||(o->oMoveFlags & OBJ_MOVE_HIT_EDGE)) {
src/game/behaviors/scuttlebug.inc.c:    o->oFaceAngleYaw = 0;
src/game/behaviors/scuttlebug.inc.c:    o->oFaceAnglePitch = 0;
src/game/behaviors/scuttlebug.inc.c:    o->oFaceAngleRoll = 0;
src/game/behaviors/scuttlebug.inc.c:    switch(o->oAction) {
src/game/behaviors/scuttlebug.inc.c:            dist = pythag(gMarioState->pos[0] - o->oPosX, gMarioState->pos[1] - o->oPosY);
src/game/behaviors/scuttlebug.inc.c:                o->oPosY += 2000.0f;
src/game/behaviors/scuttlebug.inc.c:                o->oPosX += 500.0f;
src/game/behaviors/scuttlebug.inc.c:                o->header.gfx.sharedChild = gLoadedGraphNodes[MODEL_MASK2];
src/game/behaviors/scuttlebug.inc.c:                o->oAction = 1;
src/game/behaviors/scuttlebug.inc.c:            o->oMoveAngleRoll = atan2s(o->oHomeY - o->oPosY,o->oHomeX - o->oPosX);
src/game/behaviors/scuttlebug.inc.c:            dist = pythag(o->oHomeX - o->oPosX, o->oHomeY - o->oPosY);
src/game/behaviors/scuttlebug.inc.c:                o->oHomeX = gMarioState->pos[0];
src/game/behaviors/scuttlebug.inc.c:                o->oHomeY = gMarioState->pos[1];
src/game/behaviors/scuttlebug.inc.c:            o->oVelX += sins(o->oMoveAngleRoll)*((dist*.025f)+0.05f);
src/game/behaviors/scuttlebug.inc.c:            o->oVelY += coss(o->oMoveAngleRoll)*((dist*.025f)+0.05f);
src/game/behaviors/scuttlebug.inc.c:                o->oVelX = floatclamp(o->oVelX, -22.0f,25.0f);
src/game/behaviors/scuttlebug.inc.c:                o->oVelY = floatclamp(o->oVelY, -22.0f,25.0f);
src/game/behaviors/scuttlebug.inc.c:                o->oVelX = floatclamp(o->oVelX, -70.0f,70.0f);
src/game/behaviors/scuttlebug.inc.c:                o->oVelY = floatclamp(o->oVelY, -70.0f,70.0f);         
src/game/behaviors/scuttlebug.inc.c:            o->oPosX += o->oVelX;
src/game/behaviors/scuttlebug.inc.c:            o->oPosY += o->oVelY;
src/game/behaviors/scuttlebug.inc.c:            o->oInteractStatus = 0;
src/game/behaviors/scuttlebug.inc.c:    switch(o->oAction) {
src/game/behaviors/scuttlebug.inc.c:            o->oAction = 1;
src/game/behaviors/scuttlebug.inc.c:            o->oPosY += o->oBehParams2ndByte*150.0f;
src/game/behaviors/scuttlebug.inc.c:            o->oPosY -= 20.0f;
src/game/behaviors/scuttlebug.inc.c:            if (o->oPosY < o->oHomeY-1050.0f) {
src/game/behaviors/scuttlebug.inc.c:                o->oAction = 2;
src/game/behaviors/scuttlebug.inc.c:                o->oFaceAngleRoll = 0x7FFF;
src/game/behaviors/scuttlebug.inc.c:            o->oPosY += 10.0f;
src/game/behaviors/scuttlebug.inc.c:            if (o->oPosY > o->oHomeY) {
src/game/behaviors/scuttlebug.inc.c:                o->oAction = 1;
src/game/behaviors/scuttlebug.inc.c:                o->oFaceAngleRoll = 0;
src/game/behaviors/scuttlebug.inc.c:#define floored (!(o->oMoveFlags & OBJ_MOVE_IN_AIR))
src/game/behaviors/scuttlebug.inc.c:    if (o->oAction != 6) {
src/game/behaviors/scuttlebug.inc.c:    o->oFaceAngleYaw = 0;
src/game/behaviors/scuttlebug.inc.c:    if (gMarioState->pos[0] > o->oPosX) {
src/game/behaviors/scuttlebug.inc.c:        o->oFaceAngleYaw = 0x7FFF;
src/game/behaviors/scuttlebug.inc.c:    switch(o->oAction) {
src/game/behaviors/scuttlebug.inc.c:            o->oMoveAngleYaw = 0x4000;
src/game/behaviors/scuttlebug.inc.c:                o->oAction = 1;
src/game/behaviors/scuttlebug.inc.c:            o->oAnimState = 0;
src/game/behaviors/scuttlebug.inc.c:            if (o->oMoveFlags & OBJ_MOVE_IN_AIR) {
src/game/behaviors/scuttlebug.inc.c:                o->oAnimState = 1;
src/game/behaviors/scuttlebug.inc.c:                o->oForwardVel = 0.0f;
src/game/behaviors/scuttlebug.inc.c:            if ((o->oTimer%20==0)&&floored) {
src/game/behaviors/scuttlebug.inc.c:                o->oVelY = 15.0f + (random_float()*50.0f);
src/game/behaviors/scuttlebug.inc.c:                o->oForwardVel = (random_float()*70.0f) - 35.0f;
src/game/behaviors/scuttlebug.inc.c:            if (floored&&(o->oTimer > 150)) {
src/game/behaviors/scuttlebug.inc.c:                o->oAnimState = 1;
src/game/behaviors/scuttlebug.inc.c:                o->oAction = 5;
src/game/behaviors/scuttlebug.inc.c:            y = find_floor(o->oPosX, o->oPosY, o->oPosZ, &f);
src/game/behaviors/scuttlebug.inc.c:                if ((y + 1.f > o->oPosY) && (f->type == SURFACE_BURNING)) {
src/game/behaviors/scuttlebug.inc.c:                    o->oAction = 6;
src/game/behaviors/scuttlebug.inc.c:                    o->oAnimState = 2;
src/game/behaviors/scuttlebug.inc.c:            o->oVelY = 35.0f;
src/game/behaviors/scuttlebug.inc.c:            o->oVelX = 0.0f;
src/game/behaviors/scuttlebug.inc.c:            if (o->oPosX > o->oHomeX+30.0f) {
src/game/behaviors/scuttlebug.inc.c:                o->oPosX -= 30.0f;
src/game/behaviors/scuttlebug.inc.c:            if (o->oPosX < o->oHomeX-30.0f) {
src/game/behaviors/scuttlebug.inc.c:                o->oPosX += 30.0f;
src/game/behaviors/scuttlebug.inc.c:            if (o->oPosY > gMarioState->pos[1]+1000.0f) {
src/game/behaviors/scuttlebug.inc.c:                o->oAction = 3;
src/game/behaviors/scuttlebug.inc.c:            o->oVelY = 0.0f;
src/game/behaviors/scuttlebug.inc.c:            if (o->oTimer > 20) {
src/game/behaviors/scuttlebug.inc.c:                o->oAction = 4;
src/game/behaviors/scuttlebug.inc.c:            o->oVelY = -50.0f;
src/game/behaviors/scuttlebug.inc.c:                        if (pythag(brick->oPosX - o->oPosX,brick->oPosY - o->oPosY) < 180.0f) {
src/game/behaviors/scuttlebug.inc.c:                o->oAction = 1;
src/game/behaviors/scuttlebug.inc.c:            if (o->oTimer > 30) {
src/game/behaviors/scuttlebug.inc.c:                o->oAction = 2;
src/game/behaviors/scuttlebug.inc.c:                o->oAnimState = 3;
src/game/behaviors/scuttlebug.inc.c:                o->oHomeX = gMarioState->pos[0];
src/game/behaviors/scuttlebug.inc.c:            o->oPosY -= 2.0f;
src/game/behaviors/scuttlebug.inc.c:            if (o->oTimer == 50) {
src/game/behaviors/scuttlebug.inc.c:            if (o->oTimer > 60) {
src/game/behaviors/scuttlebug.inc.c:    switch(o->oAction) {
src/game/behaviors/scuttlebug.inc.c:            o->oAction = 1;
src/game/behaviors/scuttlebug.inc.c:            o->oTimer = random_u16();
src/game/behaviors/scuttlebug.inc.c:            o->oMoveAngleYaw = o->oAngleToMario;
src/game/behaviors/scuttlebug.inc.c:            o->oForwardVel *= .9f;
src/game/behaviors/scuttlebug.inc.c:            if (o->oDistanceToMario < 900.0f) {//back away
src/game/behaviors/scuttlebug.inc.c:                if (o->oForwardVel > -22.0f) {
src/game/behaviors/scuttlebug.inc.c:                    o->oForwardVel -= 2.0f;
src/game/behaviors/scuttlebug.inc.c:            if ((o->oDistanceToMario > 1200.0f)&&(!(cur_obj_lateral_dist_from_mario_to_home() > 1200.0f))) {//get closer
src/game/behaviors/scuttlebug.inc.c:                if (o->oForwardVel < 22.0f) {
src/game/behaviors/scuttlebug.inc.c:                    o->oForwardVel += 2.0f;
src/game/behaviors/scuttlebug.inc.c:            if (o->oTimer % 30 == 0) {
src/game/behaviors/scuttlebug.inc.c:                shoot = (o->oDistanceToMario < 1000.0f);
src/game/behaviors/seaweed.inc.c:    o->header.gfx.unk38.animFrame = random_float() * 80.0f;
src/game/behaviors/seesaw_platform.inc.c:    o->collisionData = segmented_to_virtual(sSeesawPlatformCollisionModels[o->oBehParams2ndByte]);
src/game/behaviors/seesaw_platform.inc.c:    if (o->oBehParams2ndByte == 2) {
src/game/behaviors/seesaw_platform.inc.c:        o->oCollisionDistance = 2000.0f;
src/game/behaviors/seesaw_platform.inc.c:    UNUSED s32 startPitch = o->oFaceAnglePitch;
src/game/behaviors/seesaw_platform.inc.c:    o->oFaceAnglePitch += (s32) o->oSeesawPlatformPitchVel;
src/game/behaviors/seesaw_platform.inc.c:    if (absf(o->oSeesawPlatformPitchVel) > 10.0f) {
src/game/behaviors/seesaw_platform.inc.c:        f32 rotation = o->oDistanceToMario * coss(o->oAngleToMario - o->oMoveAngleYaw);
src/game/behaviors/seesaw_platform.inc.c:        if (o->oSeesawPlatformPitchVel * rotation < 0) {
src/game/behaviors/seesaw_platform.inc.c:        o->oSeesawPlatformPitchVel += rotation;
src/game/behaviors/seesaw_platform.inc.c:        clamp_f32(&o->oSeesawPlatformPitchVel, -50.0f, 50.0f);
src/game/behaviors/seesaw_platform.inc.c:            /* value          */ &o->oFaceAnglePitch,
src/game/behaviors/seesaw_platform.inc.c:            /* vel            */ &o->oSeesawPlatformPitchVel,
src/game/behaviors/shock_wave.inc.c:    o->oBowserShockWaveUnkF4 = o->oTimer * 10;
src/game/behaviors/shock_wave.inc.c:    cur_obj_scale(o->oBowserShockWaveUnkF4);
src/game/behaviors/shock_wave.inc.c:        o->oOpacity -= 1;
src/game/behaviors/shock_wave.inc.c:    if (o->oTimer > sp1E)
src/game/behaviors/shock_wave.inc.c:        o->oOpacity -= 5;
src/game/behaviors/shock_wave.inc.c:    if (o->oOpacity <= 0)
src/game/behaviors/shock_wave.inc.c:    if (o->oTimer < sp1E && mario_is_in_air_action() == 0) {
src/game/behaviors/shock_wave.inc.c:        sp24 = o->oBowserShockWaveUnkF4 * D_8032F420[2];
src/game/behaviors/shock_wave.inc.c:        sp20 = o->oBowserShockWaveUnkF4 * D_8032F420[3];
src/game/behaviors/shock_wave.inc.c:        sp24 = o->oBowserShockWaveUnkF4 * D_8032F420[2];
src/game/behaviors/shock_wave.inc.c:        sp20 = o->oBowserShockWaveUnkF4 * D_8032F420[3];
src/game/behaviors/shock_wave.inc.c:        if ((sp2C < o->oDistanceToMario && o->oDistanceToMario < sp28)
src/game/behaviors/shock_wave.inc.c:            || (sp24 < o->oDistanceToMario && o->oDistanceToMario < sp20))
src/game/behaviors/skeeter.inc.c:    if (o->oMoveFlags & 0x00000003) {
src/game/behaviors/skeeter.inc.c:        o->oForwardVel = 0.0f;
src/game/behaviors/skeeter.inc.c:        if (o->oTimer > o->oSkeeterWaitTime && cur_obj_check_if_near_animation_end()) {
src/game/behaviors/skeeter.inc.c:            o->oAction = SKEETER_ACT_WALK;
src/game/behaviors/skeeter.inc.c:        if (o->oMoveFlags & 0x00000010) {
src/game/behaviors/skeeter.inc.c:            if (o->oTimer > 60
src/game/behaviors/skeeter.inc.c:                && obj_smooth_turn(&o->oSkeeterUnk1AC, &o->oMoveAngleYaw, o->oSkeeterTargetAngle, 0.02f,
src/game/behaviors/skeeter.inc.c:                if (o->oSkeeterWaitTime != 0) {
src/game/behaviors/skeeter.inc.c:                    o->oSkeeterWaitTime -= 1;
src/game/behaviors/skeeter.inc.c:                    o->oAction = SKEETER_ACT_LUNGE;
src/game/behaviors/skeeter.inc.c:                    o->oForwardVel = 80.0f;
src/game/behaviors/skeeter.inc.c:                    o->oSkeeterUnk1AC = 0;
src/game/behaviors/skeeter.inc.c:    if (!(o->oMoveFlags & 0x00000010)) {
src/game/behaviors/skeeter.inc.c:        o->oAction = SKEETER_ACT_IDLE;
src/game/behaviors/skeeter.inc.c:        if (o->oMoveFlags & 0x00000200) {
src/game/behaviors/skeeter.inc.c:            o->oMoveAngleYaw = cur_obj_reflect_move_angle_off_wall();
src/game/behaviors/skeeter.inc.c:            o->oForwardVel *= 0.3f;
src/game/behaviors/skeeter.inc.c:            o->oFlags &= ~0x00000008;
src/game/behaviors/skeeter.inc.c:            o->oMoveAngleYaw = o->oFaceAngleYaw;
src/game/behaviors/skeeter.inc.c:            if (o->oDistanceToMario >= 25000.0f) {
src/game/behaviors/skeeter.inc.c:                o->oSkeeterTargetAngle = o->oAngleToMario;
src/game/behaviors/skeeter.inc.c:                o->oSkeeterTargetAngle = obj_random_fixed_turn(random_u16() % 0x2000);
src/game/behaviors/skeeter.inc.c:            o->oAction = SKEETER_ACT_IDLE;
src/game/behaviors/skeeter.inc.c:            o->oSkeeterWaitTime = random_linear_offset(0, 30);
src/game/behaviors/skeeter.inc.c:            o->oFlags |= 0x00000008;
src/game/behaviors/skeeter.inc.c:    if (!(o->oMoveFlags & 0x00000003)) {
src/game/behaviors/skeeter.inc.c:        o->oAction = SKEETER_ACT_IDLE;
src/game/behaviors/skeeter.inc.c:        obj_forward_vel_approach(o->oSkeeterUnkFC, 0.4f);
src/game/behaviors/skeeter.inc.c:        sp24 = 0.12f * o->oForwardVel;
src/game/behaviors/skeeter.inc.c:        if (o->oSkeeterUnkF8 != 0) {
src/game/behaviors/skeeter.inc.c:            o->oSkeeterUnkF8 = obj_resolve_collisions_and_turn(o->oSkeeterTargetAngle, 0x400);
src/game/behaviors/skeeter.inc.c:            if (o->oDistanceToMario >= 25000.0f) {
src/game/behaviors/skeeter.inc.c:                o->oSkeeterTargetAngle = o->oAngleToMario;
src/game/behaviors/skeeter.inc.c:                o->oSkeeterWaitTime = random_linear_offset(20, 30);
src/game/behaviors/skeeter.inc.c:            if ((o->oSkeeterUnkF8 = obj_bounce_off_walls_edges_objects(&o->oSkeeterTargetAngle)) == 0) {
src/game/behaviors/skeeter.inc.c:                if (o->oDistanceToMario < 500.0f) {
src/game/behaviors/skeeter.inc.c:                    o->oSkeeterTargetAngle = o->oAngleToMario;
src/game/behaviors/skeeter.inc.c:                    o->oSkeeterUnkFC = 20.0f;
src/game/behaviors/skeeter.inc.c:                    o->oSkeeterUnkFC = 10.0f;
src/game/behaviors/skeeter.inc.c:                    if (o->oSkeeterWaitTime != 0) {
src/game/behaviors/skeeter.inc.c:                        o->oSkeeterWaitTime -= 1;
src/game/behaviors/skeeter.inc.c:                            o->oSkeeterTargetAngle = obj_random_fixed_turn(0x2000);
src/game/behaviors/skeeter.inc.c:                            o->oSkeeterWaitTime = random_linear_offset(100, 100);
src/game/behaviors/skeeter.inc.c:                            o->oAction = SKEETER_ACT_IDLE;
src/game/behaviors/skeeter.inc.c:                            o->oSkeeterWaitTime = random_linear_offset(100, 100);
src/game/behaviors/skeeter.inc.c:        cur_obj_rotate_yaw_toward(o->oSkeeterTargetAngle, 0x400);
src/game/behaviors/skeeter.inc.c:    o->oDeathSound = SOUND_OBJ_SNUFIT_SKEETER_DEATH;
src/game/behaviors/skeeter.inc.c:    switch (o->oAction) {
src/game/behaviors/skeeter.inc.c:    obj_check_attacks(&sSkeeterHitbox, o->oAction);
src/game/behaviors/skeeter.inc.c:    if (approach_f32_ptr(&o->header.gfx.scale[0], 0.0f, 0.3f)) {
src/game/behaviors/skeeter.inc.c:    cur_obj_scale(o->header.gfx.scale[0]);
src/game/behaviors/skeeter.inc.c:    o->oAnimState = gGlobalTimer / 6;
src/game/behaviors/sliding_platform.inc.c:    o->oFaceAngleYaw -= 0x4000;
src/game/behaviors/sliding_platform.inc.c:    o->oPosX += 2.0f;
src/game/behaviors/sliding_platform.inc.c:    o->oHomeX = o->oPosX;
src/game/behaviors/sliding_platform.inc.c:    switch (o->oBehParams2ndByte) {
src/game/behaviors/sliding_platform.inc.c:            o->oWFSlidBrickPtfmMovVel = 10.0f;
src/game/behaviors/sliding_platform.inc.c:            o->oWFSlidBrickPtfmMovVel = 15.0f;
src/game/behaviors/sliding_platform.inc.c:            o->oWFSlidBrickPtfmMovVel = 20.0f;
src/game/behaviors/sliding_platform.inc.c:    o->oTimer = random_float() * 100.0f;
src/game/behaviors/sliding_platform.inc.c:    switch (o->oAction) {
src/game/behaviors/sliding_platform.inc.c:            if (o->oTimer >= 101) {
src/game/behaviors/sliding_platform.inc.c:                o->oAction = WF_SLID_BRICK_PTFM_ACT_EXTEND;
src/game/behaviors/sliding_platform.inc.c:                o->oForwardVel = o->oWFSlidBrickPtfmMovVel;
src/game/behaviors/sliding_platform.inc.c:            if (o->oTimer >= 500.0f / o->oWFSlidBrickPtfmMovVel) {
src/game/behaviors/sliding_platform.inc.c:                o->oForwardVel = 0;
src/game/behaviors/sliding_platform.inc.c:                o->oPosX = o->oHomeX + 510.0f;
src/game/behaviors/sliding_platform.inc.c:            if (o->oTimer == 60) {
src/game/behaviors/sliding_platform.inc.c:                o->oAction = WF_SLID_BRICK_PTFM_ACT_RETRACT;
src/game/behaviors/sliding_platform.inc.c:                o->oForwardVel = o->oWFSlidBrickPtfmMovVel;
src/game/behaviors/sliding_platform.inc.c:                o->oMoveAngleYaw -= 0x8000;
src/game/behaviors/sliding_platform.inc.c:            if (o->oTimer >= 500.0f / o->oWFSlidBrickPtfmMovVel) {
src/game/behaviors/sliding_platform.inc.c:                o->oForwardVel = 0;
src/game/behaviors/sliding_platform.inc.c:                o->oPosX = o->oHomeX;
src/game/behaviors/sliding_platform.inc.c:            if (o->oTimer == 90) {
src/game/behaviors/sliding_platform.inc.c:                o->oAction = WF_SLID_BRICK_PTFM_ACT_EXTEND;
src/game/behaviors/sliding_platform.inc.c:                o->oForwardVel = o->oWFSlidBrickPtfmMovVel;
src/game/behaviors/sliding_platform.inc.c:                o->oMoveAngleYaw -= 0x8000;
src/game/behaviors/sliding_platform_2.inc.c:    val04 = ((u16)(o->oBehParams >> 16) & 0x0380) >> 7;
src/game/behaviors/sliding_platform_2.inc.c:    o->collisionData = segmented_to_virtual(D_80331A24[val04]);
src/game/behaviors/sliding_platform_2.inc.c:    o->oBackAndForthPlatformUnkF8 = 50.0f * ((u16)(o->oBehParams >> 16) & 0x003F);
src/game/behaviors/sliding_platform_2.inc.c:        o->oBackAndForthPlatformUnk100 = 15.0f;
src/game/behaviors/sliding_platform_2.inc.c:        if ((u16)(o->oBehParams >> 16) & 0x0040) {
src/game/behaviors/sliding_platform_2.inc.c:            o->oMoveAngleYaw += 0x8000;
src/game/behaviors/sliding_platform_2.inc.c:        o->oBackAndForthPlatformUnk100 = 10.0f;
src/game/behaviors/sliding_platform_2.inc.c:        if ((u16)(o->oBehParams >> 16) & 0x0040) {
src/game/behaviors/sliding_platform_2.inc.c:            o->oBackAndForthPlatformUnkF4 = -1.0f;
src/game/behaviors/sliding_platform_2.inc.c:            o->oBackAndForthPlatformUnkF4 = 1.0f;
src/game/behaviors/sliding_platform_2.inc.c:    if (o->oTimer > 10) {
src/game/behaviors/sliding_platform_2.inc.c:        o->oBackAndForthPlatformUnkFC += o->oBackAndForthPlatformUnk100;
src/game/behaviors/sliding_platform_2.inc.c:        if (clamp_f32(&o->oBackAndForthPlatformUnkFC, -o->oBackAndForthPlatformUnkF8, 0.0f)) {
src/game/behaviors/sliding_platform_2.inc.c:            o->oBackAndForthPlatformUnk100 = -o->oBackAndForthPlatformUnk100;
src/game/behaviors/sliding_platform_2.inc.c:            o->oTimer = 0;
src/game/behaviors/sliding_platform_2.inc.c:    if (o->oBackAndForthPlatformUnkF4 != 0.0f) {
src/game/behaviors/sliding_platform_2.inc.c:        o->oPosY = o->oHomeY + o->oBackAndForthPlatformUnkFC * o->oBackAndForthPlatformUnkF4;
src/game/behaviors/sliding_platform_2.inc.c:        obj_set_dist_from_home(o->oBackAndForthPlatformUnkFC);
src/game/behaviors/sl_snowman_wind.inc.c:    if (o->oTimer == 0)
src/game/behaviors/sl_snowman_wind.inc.c:        o->oSLSnowmanWindOriginalYaw = o->oMoveAngleYaw;
src/game/behaviors/sl_snowman_wind.inc.c:    if (o->oSubAction == SL_SNOWMAN_WIND_ACT_IDLE) {
src/game/behaviors/sl_snowman_wind.inc.c:        o->oDistanceToMario = 0;
src/game/behaviors/sl_snowman_wind.inc.c:        vec3f_copy_2(tempPos, &o->oPosX);
src/game/behaviors/sl_snowman_wind.inc.c:            o->oSubAction++;
src/game/behaviors/sl_snowman_wind.inc.c:        vec3f_copy_2(&o->oPosX, tempPos);
src/game/behaviors/sl_snowman_wind.inc.c:    } else if (o->oSubAction == SL_SNOWMAN_WIND_ACT_TALKING) {
src/game/behaviors/sl_snowman_wind.inc.c:            o->oSubAction++;
src/game/behaviors/sl_snowman_wind.inc.c:    } else if (o->oDistanceToMario < 1500.0f && absf(gMarioObject->oPosY - o->oHomeY) < 500.0f) {
src/game/behaviors/sl_snowman_wind.inc.c:        if ((marioAngleFromWindSource = o->oAngleToMario - o->oSLSnowmanWindOriginalYaw) > 0) {
src/game/behaviors/sl_snowman_wind.inc.c:                o->oMoveAngleYaw = o->oAngleToMario;
src/game/behaviors/sl_snowman_wind.inc.c:                o->oMoveAngleYaw = o->oSLSnowmanWindOriginalYaw + 0x1500;
src/game/behaviors/sl_snowman_wind.inc.c:                o->oMoveAngleYaw = o->oAngleToMario;
src/game/behaviors/sl_snowman_wind.inc.c:                o->oMoveAngleYaw = o->oSLSnowmanWindOriginalYaw - 0x1500;
src/game/behaviors/sl_walking_penguin.inc.c:    o->oForwardVel = 0.0f;
src/game/behaviors/sl_walking_penguin.inc.c:    o->oAngleVelYaw = 0x400;
src/game/behaviors/sl_walking_penguin.inc.c:    o->oMoveAngleYaw += o->oAngleVelYaw;
src/game/behaviors/sl_walking_penguin.inc.c:    if (o->oTimer == 31)
src/game/behaviors/sl_walking_penguin.inc.c:    o->oAngleVelYaw = 0;
src/game/behaviors/sl_walking_penguin.inc.c:    switch (o->oAction) {
src/game/behaviors/sl_walking_penguin.inc.c:            if (o->oTimer == 0) {
src/game/behaviors/sl_walking_penguin.inc.c:                o->oSLWalkingPenguinCurStep = 0;
src/game/behaviors/sl_walking_penguin.inc.c:                o->oSLWalkingPenguinCurStepTimer = 0;
src/game/behaviors/sl_walking_penguin.inc.c:            if (o->oSLWalkingPenguinCurStepTimer < sSLWalkingPenguinErraticSteps[o->oSLWalkingPenguinCurStep].stepLength)
src/game/behaviors/sl_walking_penguin.inc.c:                o->oSLWalkingPenguinCurStepTimer++;
src/game/behaviors/sl_walking_penguin.inc.c:                o->oSLWalkingPenguinCurStepTimer = 0;
src/game/behaviors/sl_walking_penguin.inc.c:                o->oSLWalkingPenguinCurStep++;
src/game/behaviors/sl_walking_penguin.inc.c:                if (sSLWalkingPenguinErraticSteps[o->oSLWalkingPenguinCurStep].stepLength < 0)
src/game/behaviors/sl_walking_penguin.inc.c:                    o->oSLWalkingPenguinCurStep = 0;
src/game/behaviors/sl_walking_penguin.inc.c:            if (o->oPosX < 300.0f)
src/game/behaviors/sl_walking_penguin.inc.c:                o->oAction++; // If reached the end of the bridge, turn around and head back.
src/game/behaviors/sl_walking_penguin.inc.c:                o->oForwardVel = sSLWalkingPenguinErraticSteps[o->oSLWalkingPenguinCurStep].speed;
src/game/behaviors/sl_walking_penguin.inc.c:                    sSLWalkingPenguinErraticSteps[o->oSLWalkingPenguinCurStep].anim,
src/game/behaviors/sl_walking_penguin.inc.c:                    sSLWalkingPenguinErraticSteps[o->oSLWalkingPenguinCurStep].animSpeed
src/game/behaviors/sl_walking_penguin.inc.c:                o->oAction++; // Finished turning
src/game/behaviors/sl_walking_penguin.inc.c:            o->oForwardVel = 12.0f;
src/game/behaviors/sl_walking_penguin.inc.c:            if (o->oPosX > 1700.0f)
src/game/behaviors/sl_walking_penguin.inc.c:                o->oAction++; // If reached the start of the bridge, turn around.
src/game/behaviors/sl_walking_penguin.inc.c:                o->oAction = SL_WALKING_PENGUIN_ACT_MOVING_FORWARDS; // Finished turning
src/game/behaviors/sl_walking_penguin.inc.c:    adjustedXPos = o->oPosX + sins(0xDBB0) * 60.0f; // 0xDBB0 = -51 degrees, the angle the penguin is facing
src/game/behaviors/sl_walking_penguin.inc.c:    adjustedZPos = o->oPosZ + coss(0xDBB0) * 60.0f;
src/game/behaviors/sl_walking_penguin.inc.c:    o->oSLWalkingPenguinWindCollisionXPos = adjustedXPos;
src/game/behaviors/sl_walking_penguin.inc.c:    o->oSLWalkingPenguinWindCollisionZPos = adjustedZPos;
src/game/behaviors/sl_walking_penguin.inc.c:    print_debug_bottom_up("x %d", o->oPosX);
src/game/behaviors/sl_walking_penguin.inc.c:    print_debug_bottom_up("z %d", o->oPosZ);
src/game/behaviors/snowman.inc.c:    o->oHomeX = o->oPosX;
src/game/behaviors/snowman.inc.c:    o->oHomeY = o->oPosY;
src/game/behaviors/snowman.inc.c:    o->oHomeZ = o->oPosZ;
src/game/behaviors/snowman.inc.c:    o->oGravity = 10.0f;
src/game/behaviors/snowman.inc.c:    o->oFriction = 0.999f;
src/game/behaviors/snowman.inc.c:    o->oBuoyancy = 2.0f;
src/game/behaviors/snowman.inc.c:    o->oVelY = 0;
src/game/behaviors/snowman.inc.c:    o->oForwardVel = 0;
src/game/behaviors/snowman.inc.c:    o->oSnowmansBottomUnkF4 = 0.4f;
src/game/behaviors/snowman.inc.c:        o->parentObj = sp34;
src/game/behaviors/snowman.inc.c:    if ((o->oInteractStatus & INT_STATUS_INTERACTED) != 0) {
src/game/behaviors/snowman.inc.c:        o->oInteractStatus = 0;
src/game/behaviors/snowman.inc.c:    o->oFaceAnglePitch += (s16)(o->oForwardVel * (100.0f / f12));
src/game/behaviors/snowman.inc.c:    o->oSnowmansBottomUnkF4 += o->oForwardVel * 1e-4;
src/game/behaviors/snowman.inc.c:    if (o->oSnowmansBottomUnkF4 > 1.0)
src/game/behaviors/snowman.inc.c:        o->oSnowmansBottomUnkF4 = 1.0f;
src/game/behaviors/snowman.inc.c:    o->oPathedStartWaypoint = segmented_to_virtual(&ccm_seg7_trajectory_snowman);
src/game/behaviors/snowman.inc.c:    o->oSnowmansBottomUnkF8 = o->oPathedTargetYaw;
src/game/behaviors/snowman.inc.c:    o->oMoveAngleYaw = approach_s16_symmetric(o->oMoveAngleYaw, o->oSnowmansBottomUnkF8, 0x400);
src/game/behaviors/snowman.inc.c:    if (o->oForwardVel > 70.0)
src/game/behaviors/snowman.inc.c:        o->oForwardVel = 70.0f;
src/game/behaviors/snowman.inc.c:        sp1E = (u16) o->oAngleToMario - (u16) o->oMoveAngleYaw;
src/game/behaviors/snowman.inc.c:        if (obj_check_if_facing_toward_angle(o->oMoveAngleYaw, o->oAngleToMario, 0x2000) == 1 && o->oSnowmansBottomUnk1AC == 1) {
src/game/behaviors/snowman.inc.c:            o->oSnowmansBottomUnkF8 = o->oAngleToMario;
src/game/behaviors/snowman.inc.c:            o->oSnowmansBottomUnkF8 = o->oMoveAngleYaw;
src/game/behaviors/snowman.inc.c:        o->oAction = 2;
src/game/behaviors/snowman.inc.c:    if (o->oForwardVel > 70.0)
src/game/behaviors/snowman.inc.c:        o->oForwardVel = 70.0f;
src/game/behaviors/snowman.inc.c:    o->oMoveAngleYaw = approach_s16_symmetric(o->oMoveAngleYaw, o->oSnowmansBottomUnkF8, 0x400);
src/game/behaviors/snowman.inc.c:        o->oMoveAngleYaw = atan2s(1813.0f - o->oPosZ, -4230.0f - o->oPosX);
src/game/behaviors/snowman.inc.c:        o->oVelY = 80.0f;
src/game/behaviors/snowman.inc.c:        o->oForwardVel = 15.0f;
src/game/behaviors/snowman.inc.c:        o->oAction = 3;
src/game/behaviors/snowman.inc.c:        o->parentObj->oAction = 2;
src/game/behaviors/snowman.inc.c:        o->parentObj->oVelY = 100.0f;
src/game/behaviors/snowman.inc.c:    if (o->oTimer == 200) {
src/game/behaviors/snowman.inc.c:        o->activeFlags = ACTIVE_FLAG_DEACTIVATED;
src/game/behaviors/snowman.inc.c:        o->oAction = 4;
src/game/behaviors/snowman.inc.c:        o->oPosX = -4230.0f;
src/game/behaviors/snowman.inc.c:        o->oPosZ = 1813.0f;
src/game/behaviors/snowman.inc.c:        o->oForwardVel = 0.0f;
src/game/behaviors/snowman.inc.c:    switch (o->oAction) {
src/game/behaviors/snowman.inc.c:            if (is_point_within_radius_of_mario(o->oPosX, o->oPosY, o->oPosZ, 400) == 1
src/game/behaviors/snowman.inc.c:                    o->oForwardVel = 10.0f;
src/game/behaviors/snowman.inc.c:                    o->oAction = 1;
src/game/behaviors/snowman.inc.c:            adjust_rolling_face_pitch(o->oSnowmansBottomUnkF4);
src/game/behaviors/snowman.inc.c:            adjust_rolling_face_pitch(o->oSnowmansBottomUnkF4);
src/game/behaviors/snowman.inc.c:    cur_obj_scale(o->oSnowmansBottomUnkF4);
src/game/behaviors/snowman.inc.c:    o->oGraphYOffset = o->oSnowmansBottomUnkF4 * 180.0f;
src/game/behaviors/snowman.inc.c:    sp36 = (o->oBehParams >> 24) & 0xFF;
src/game/behaviors/snowman.inc.c:    o->oGravity = 5.0f;
src/game/behaviors/snowman.inc.c:    o->oFriction = 0.999f;
src/game/behaviors/snowman.inc.c:    o->oBuoyancy = 2.0f;
src/game/behaviors/snowman.inc.c:        o->oPosX = -4230.0f;
src/game/behaviors/snowman.inc.c:        o->oPosY = -994.0f;
src/game/behaviors/snowman.inc.c:        o->oPosZ = 1813.0f;
src/game/behaviors/snowman.inc.c:        o->oAction = 1;
src/game/behaviors/snowman.inc.c:    switch (o->oAction) {
src/game/behaviors/snowman.inc.c:            if (trigger_obj_dialog_when_facing(&o->oSnowmansHeadUnkF4, DIALOG_109, 400.0f, 1))
src/game/behaviors/snowman.inc.c:                o->oAction = 1;
src/game/behaviors/snowman.inc.c:                o->oAction = 3;
src/game/behaviors/snowman.inc.c:            if (o->oPosY < -994.0f) {
src/game/behaviors/snowman.inc.c:                o->oPosY = -994.0f;
src/game/behaviors/snowman.inc.c:                o->oAction = 4;
src/game/behaviors/snowman.inc.c:            if (trigger_obj_dialog_when_facing(&o->oSnowmansHeadUnkF4, DIALOG_111, 700.0f, 2)) {
src/game/behaviors/snowman.inc.c:                o->oAction = 1;
src/game/behaviors/snowman.inc.c:    if (is_point_within_radius_of_mario(o->oPosX, o->oPosY, o->oPosZ, 800)) {
src/game/behaviors/snowman.inc.c:        o->parentObj->oSnowmansBottomUnk1AC++;
src/game/behaviors/snowman.inc.c:        o->activeFlags = ACTIVE_FLAG_DEACTIVATED;
src/game/behaviors/snowman.inc.c:    if (o->parentObj->activeFlags == ACTIVE_FLAG_DEACTIVATED)
src/game/behaviors/snowman.inc.c:        o->activeFlags = ACTIVE_FLAG_DEACTIVATED;
src/game/behaviors/snow_mound.inc.c:    switch (o->oAction) {
src/game/behaviors/snow_mound.inc.c:            o->oVelX = -40.0f;
src/game/behaviors/snow_mound.inc.c:            o->oPosX += o->oVelX;
src/game/behaviors/snow_mound.inc.c:            if (o->oTimer >= 118)
src/game/behaviors/snow_mound.inc.c:                o->oAction = 1;
src/game/behaviors/snow_mound.inc.c:            o->oVelX = -5.0f;
src/game/behaviors/snow_mound.inc.c:            o->oPosX += o->oVelX;
src/game/behaviors/snow_mound.inc.c:            o->oVelY = -10.0f;
src/game/behaviors/snow_mound.inc.c:            o->oPosY += o->oVelY;
src/game/behaviors/snow_mound.inc.c:            o->oPosZ = o->oHomeZ - 2.0f;
src/game/behaviors/snow_mound.inc.c:            if (o->oTimer > 50)
src/game/behaviors/snow_mound.inc.c:                o->activeFlags = ACTIVE_FLAG_DEACTIVATED;
src/game/behaviors/snow_mound.inc.c:    if (!is_point_within_radius_of_mario(o->oPosX, o->oPosY, o->oPosZ, 6000)
src/game/behaviors/snow_mound.inc.c:        || o->oPosY + 1000.0f < gMarioObject->header.gfx.pos[1])
src/game/behaviors/snow_mound.inc.c:    if (o->oTimer == 64 || o->oTimer == 128 || o->oTimer == 192 || o->oTimer == 224 || o->oTimer == 256)
src/game/behaviors/snow_mound.inc.c:    if (o->oTimer == 256) {
src/game/behaviors/snow_mound.inc.c:    if (o->oTimer >= 256)
src/game/behaviors/snow_mound.inc.c:        o->oTimer = 0;
src/game/behaviors/snufit.inc.c:    marioDist = (s32)(o->oDistanceToMario / 10.0f);
src/game/behaviors/snufit.inc.c:    if (o->oTimer > marioDist && o->oDistanceToMario < 800.0f) {
src/game/behaviors/snufit.inc.c:        o->oSnufitBodyScalePeriod
src/game/behaviors/snufit.inc.c:            = approach_s16_symmetric(o->oSnufitBodyScalePeriod, 0, 1500);
src/game/behaviors/snufit.inc.c:        o->oSnufitBodyBaseScale
src/game/behaviors/snufit.inc.c:            = approach_s16_symmetric(o->oSnufitBodyBaseScale, 600, 15);
src/game/behaviors/snufit.inc.c:        if ((s16) o->oSnufitBodyScalePeriod == 0 && o->oSnufitBodyBaseScale == 600) {
src/game/behaviors/snufit.inc.c:            o->oAction = SNUFIT_ACT_SHOOT;
src/game/behaviors/snufit.inc.c:            o->oSnufitBullets = 0;
src/game/behaviors/snufit.inc.c:        o->oSnufitCircularPeriod += 400;
src/game/behaviors/snufit.inc.c:    o->oSnufitBodyScalePeriod
src/game/behaviors/snufit.inc.c:        = approach_s16_symmetric(o->oSnufitBodyScalePeriod, -0x8000, 3000);
src/game/behaviors/snufit.inc.c:    o->oSnufitBodyBaseScale
src/game/behaviors/snufit.inc.c:        = approach_s16_symmetric(o->oSnufitBodyBaseScale, 167, 20);
src/game/behaviors/snufit.inc.c:    if ((u16) o->oSnufitBodyScalePeriod == 0x8000 && o->oSnufitBodyBaseScale == 167) {
src/game/behaviors/snufit.inc.c:        o->oAction = SNUFIT_ACT_IDLE;
src/game/behaviors/snufit.inc.c:    } else if (o->oSnufitBullets < 3 && o->oTimer >= 3) {
src/game/behaviors/snufit.inc.c:        o->oSnufitBullets += 1;
src/game/behaviors/snufit.inc.c:        o->oSnufitRecoil = -30;
src/game/behaviors/snufit.inc.c:        o->oTimer = 0;
src/game/behaviors/snufit.inc.c:    if (!(o->activeFlags & ACTIVE_FLAG_IN_DIFFERENT_ROOM)) {
src/game/behaviors/snufit.inc.c:        o->oDeathSound = SOUND_OBJ_SNUFIT_SKEETER_DEATH;
src/game/behaviors/snufit.inc.c:        if (o->oDistanceToMario < 800.0f) {
src/game/behaviors/snufit.inc.c:            if ((s16) o->oMoveAnglePitch > 0x2000) {
src/game/behaviors/snufit.inc.c:                o->oMoveAnglePitch = 0x2000;
src/game/behaviors/snufit.inc.c:            } else if ((s16) o->oMoveAnglePitch < -0x2000) {
src/game/behaviors/snufit.inc.c:                o->oMoveAnglePitch = -0x2000;
src/game/behaviors/snufit.inc.c:            cur_obj_rotate_yaw_toward(o->oAngleToMario, 2000);
src/game/behaviors/snufit.inc.c:            o->oMoveAngleYaw += 200;
src/game/behaviors/snufit.inc.c:        o->oFaceAnglePitch = o->oMoveAnglePitch;
src/game/behaviors/snufit.inc.c:        switch (o->oAction) {
src/game/behaviors/snufit.inc.c:        o->oPosX = o->oHomeX + 100.0f * coss(o->oSnufitCircularPeriod);
src/game/behaviors/snufit.inc.c:        o->oPosY = o->oHomeY + 8.0f * coss(4000 * gGlobalTimer);
src/game/behaviors/snufit.inc.c:        o->oPosZ = o->oHomeZ + 100.0f * sins(o->oSnufitCircularPeriod);
src/game/behaviors/snufit.inc.c:        o->oSnufitYOffset = -0x20;
src/game/behaviors/snufit.inc.c:        o->oSnufitZOffset = o->oSnufitRecoil + 180;
src/game/behaviors/snufit.inc.c:        o->oSnufitBodyScale
src/game/behaviors/snufit.inc.c:            = (s16)(o->oSnufitBodyBaseScale + 666
src/game/behaviors/snufit.inc.c:            + o->oSnufitBodyBaseScale * coss(o->oSnufitBodyScalePeriod));
src/game/behaviors/snufit.inc.c:        if (o->oSnufitBodyScale > 1000) {
src/game/behaviors/snufit.inc.c:            o->oSnufitScale = (o->oSnufitBodyScale - 1000) / 1000.0f + 1.0f;
src/game/behaviors/snufit.inc.c:            o->oSnufitBodyScale = 1000;
src/game/behaviors/snufit.inc.c:            o->oSnufitScale = 1.0f;
src/game/behaviors/snufit.inc.c:        cur_obj_scale(o->oSnufitScale);
src/game/behaviors/snufit.inc.c:        obj_check_attacks(&sSnufitHitbox, o->oAction);
src/game/behaviors/snufit.inc.c:    if ((o->activeFlags & ACTIVE_FLAG_IN_DIFFERENT_ROOM)
src/game/behaviors/snufit.inc.c:        || (o->oTimer != 0 && o->oDistanceToMario > 3000.0f)) {
src/game/behaviors/snufit.inc.c:    if (o->oGravity == 0.0f) {
src/game/behaviors/snufit.inc.c:            o->oMoveAngleYaw += 0x8000;
src/game/behaviors/snufit.inc.c:            o->oForwardVel *= 0.05f;
src/game/behaviors/snufit.inc.c:            o->oVelY = 30.0f;
src/game/behaviors/snufit.inc.c:            o->oGravity = -4.0f;
src/game/behaviors/snufit.inc.c:        } else if (o->oAction == 1 
src/game/behaviors/snufit.inc.c:               || (o->oMoveFlags & (OBJ_MOVE_MASK_ON_GROUND | OBJ_MOVE_HIT_WALL))) {
src/game/behaviors/snufit.inc.c:            o->oDeathSound = -1;
src/game/behaviors/sound_birds.inc.c:    switch (o->oBehParams2ndByte) {
src/game/behaviors/sound_spawner.inc.c:    s32 sp1C = o->oSoundEffectUnkF4;
src/game/behaviors/sound_spawner.inc.c:    play_sound(sp1C, o->header.gfx.cameraToObject);
src/game/behaviors/sparkle_spawn.inc.c:    if (o->oTimer > 1) {
src/game/behaviors/sparkle_spawn_star.inc.c:    if (!(o->oInteractionSubtype & INT_SUBTYPE_NO_EXIT))
src/game/behaviors/sparkle_spawn_star.inc.c:        o->oBehParams = o->parentObj->oBehParams;
src/game/behaviors/sparkle_spawn_star.inc.c:    sp24 = (o->oBehParams >> 24) & 0xFF;
src/game/behaviors/sparkle_spawn_star.inc.c:    if (o->oInteractStatus & INT_STATUS_INTERACTED) {
src/game/behaviors/sparkle_spawn_star.inc.c:        o->oInteractStatus = 0;
src/game/behaviors/sparkle_spawn_star.inc.c:    o->oHomeX = gMarioObject->oPosX;
src/game/behaviors/sparkle_spawn_star.inc.c:    o->oHomeZ = gMarioObject->oPosZ;
src/game/behaviors/sparkle_spawn_star.inc.c:    o->oHomeY = gMarioObject->oPosY;
src/game/behaviors/sparkle_spawn_star.inc.c:    o->oHomeY += 250.0f;
src/game/behaviors/sparkle_spawn_star.inc.c:    o->oPosY = o->oHomeY;
src/game/behaviors/sparkle_spawn_star.inc.c:    sp1C = o->oHomeX - o->oPosX;
src/game/behaviors/sparkle_spawn_star.inc.c:    sp18 = o->oHomeZ - o->oPosZ;
src/game/behaviors/sparkle_spawn_star.inc.c:    o->oForwardVel = sqrtf(sp1C * sp1C + sp18 * sp18) / 23.0f;
src/game/behaviors/sparkle_spawn_star.inc.c:    o->oForwardVel = 0;
src/game/behaviors/sparkle_spawn_star.inc.c:    o->oHomeY = o->oPosY;
src/game/behaviors/sparkle_spawn_star.inc.c:    if (o->oAngleVelYaw > 0x400)
src/game/behaviors/sparkle_spawn_star.inc.c:        o->oAngleVelYaw -= 0x40;
src/game/behaviors/sparkle_spawn_star.inc.c:    if (o->oAction == 0) {
src/game/behaviors/sparkle_spawn_star.inc.c:        if (o->oTimer == 0) {
src/game/behaviors/sparkle_spawn_star.inc.c:            o->activeFlags |= ACTIVE_FLAG_INITIATED_TIME_STOP;
src/game/behaviors/sparkle_spawn_star.inc.c:            o->oAngleVelYaw = 0x800;
src/game/behaviors/sparkle_spawn_star.inc.c:            if (o->oBehParams2ndByte == 0)
src/game/behaviors/sparkle_spawn_star.inc.c:            o->oMoveAngleYaw = cur_obj_angle_to_home();
src/game/behaviors/sparkle_spawn_star.inc.c:            o->oVelY = 50.0f;
src/game/behaviors/sparkle_spawn_star.inc.c:            o->oGravity = -4.0f;
src/game/behaviors/sparkle_spawn_star.inc.c:        if (o->oVelY < 0 && o->oPosY < o->oHomeY) {
src/game/behaviors/sparkle_spawn_star.inc.c:            o->oAction++;
src/game/behaviors/sparkle_spawn_star.inc.c:            o->oForwardVel = 0;
src/game/behaviors/sparkle_spawn_star.inc.c:            o->oVelY = 20.0f;
src/game/behaviors/sparkle_spawn_star.inc.c:            o->oGravity = -1.0f;
src/game/behaviors/sparkle_spawn_star.inc.c:            if (o->oInteractionSubtype & INT_SUBTYPE_NO_EXIT)
src/game/behaviors/sparkle_spawn_star.inc.c:    } else if (o->oAction == 1) {
src/game/behaviors/sparkle_spawn_star.inc.c:        if (o->oVelY < -4.0f)
src/game/behaviors/sparkle_spawn_star.inc.c:            o->oVelY = -4.0f;
src/game/behaviors/sparkle_spawn_star.inc.c:        if (o->oVelY < 0 && o->oPosY < o->oHomeY) {
src/game/behaviors/sparkle_spawn_star.inc.c:            o->oVelY = 0;
src/game/behaviors/sparkle_spawn_star.inc.c:            o->oGravity = 0;
src/game/behaviors/sparkle_spawn_star.inc.c:            o->oAction++;
src/game/behaviors/sparkle_spawn_star.inc.c:    } else if (o->oAction == 2) {
src/game/behaviors/sparkle_spawn_star.inc.c:            o->activeFlags &= ~ACTIVE_FLAG_INITIATED_TIME_STOP;
src/game/behaviors/sparkle_spawn_star.inc.c:            o->oAction++;
src/game/behaviors/sparkle_spawn_star.inc.c:    o->oFaceAngleYaw += o->oAngleVelYaw;
src/game/behaviors/sparkle_spawn_star.inc.c:    o->oInteractStatus = 0;
src/game/behaviors/spawn_star.inc.c:    starId = (o->oBehParams >> 24) & 0xFF;
src/game/behaviors/spawn_star.inc.c:    if (o->oBehParams >> 24 < 6) {
src/game/behaviors/spawn_star.inc.c:            o->header.gfx.sharedChild = gLoadedGraphNodes[MODEL_TRANSPARENT_STAR];
src/game/behaviors/spawn_star.inc.c:            o->header.gfx.sharedChild = gLoadedGraphNodes[MODEL_STAR];
src/game/behaviors/spawn_star.inc.c:        o->header.gfx.sharedChild = gLoadedGraphNodes[0xED];
src/game/behaviors/spawn_star.inc.c:    if (o->oBehParams2ndByte == 2) {
src/game/behaviors/spawn_star.inc.c:        o->header.gfx.sharedChild = gLoadedGraphNodes[MODEL_STAR];
src/game/behaviors/spawn_star.inc.c:    starId = (o->oBehParams >> 24) & 0xFF;
src/game/behaviors/spawn_star.inc.c:    o->oFaceAngleYaw += 0x800;
src/game/behaviors/spawn_star.inc.c:    if ((gDialogCourseActNum-1 == starId)&&(o->oBehParams2ndByte == 0)) {
src/game/behaviors/spawn_star.inc.c:        gMarioState->StarRadarLocation[0] = (s16)o->oPosX;
src/game/behaviors/spawn_star.inc.c:        gMarioState->StarRadarLocation[1] = (s16)o->oPosY;
src/game/behaviors/spawn_star.inc.c:        gMarioState->StarRadarLocation[2] = (s16)o->oPosZ;
src/game/behaviors/spawn_star.inc.c:    if (o->oBehParams2ndByte > 1) {
src/game/behaviors/spawn_star.inc.c:            if (o->oDistanceToMario < 300.0f || o->oBehParams2ndByte == 3) {
src/game/behaviors/spawn_star.inc.c:                if (o->oBehParams2ndByte == 2) {
src/game/behaviors/spawn_star.inc.c:                    o->oBehParams2ndByte = 3;
src/game/behaviors/spawn_star.inc.c:        if (o->oInteractStatus & INT_STATUS_INTERACTED) {
src/game/behaviors/spawn_star.inc.c:            o->oInteractStatus = 0;
src/game/behaviors/spawn_star.inc.c:    o->oMoveAngleYaw = atan2s(o->oHomeZ - o->oPosZ, o->oHomeX - o->oPosX);
src/game/behaviors/spawn_star.inc.c:    o->oStarSpawnDisFromHome = sqrtf(sqr(o->oHomeX - o->oPosX) + sqr(o->oHomeZ - o->oPosZ));
src/game/behaviors/spawn_star.inc.c:    o->oVelY = (o->oHomeY - o->oPosY) / 30.0f;
src/game/behaviors/spawn_star.inc.c:    o->oForwardVel = o->oStarSpawnDisFromHome / 30.0f;
src/game/behaviors/spawn_star.inc.c:    o->oStarSpawnUnkFC = o->oPosY;
src/game/behaviors/spawn_star.inc.c:    if (o->oBehParams2ndByte == 0 || gCurrCourseNum == COURSE_BBH)
src/game/behaviors/spawn_star.inc.c:    o->activeFlags |= ACTIVE_FLAG_INITIATED_TIME_STOP;
src/game/behaviors/spawn_star.inc.c:    switch (o->oAction) {
src/game/behaviors/spawn_star.inc.c:            o->oFaceAngleYaw += 0x1000;
src/game/behaviors/spawn_star.inc.c:            if (o->oTimer > 20)
src/game/behaviors/spawn_star.inc.c:                o->oAction = 1;
src/game/behaviors/spawn_star.inc.c:            o->oStarSpawnUnkFC += o->oVelY;
src/game/behaviors/spawn_star.inc.c:            o->oPosY = o->oStarSpawnUnkFC + sins((o->oTimer * 0x8000) / 30) * 400.0f;
src/game/behaviors/spawn_star.inc.c:            o->oFaceAngleYaw += 0x1000;
src/game/behaviors/spawn_star.inc.c:            if (o->oTimer == 30) {
src/game/behaviors/spawn_star.inc.c:                o->oAction = 2;
src/game/behaviors/spawn_star.inc.c:                o->oForwardVel = 0;
src/game/behaviors/spawn_star.inc.c:            if (o->oTimer < 20)
src/game/behaviors/spawn_star.inc.c:                o->oVelY = 20 - o->oTimer;
src/game/behaviors/spawn_star.inc.c:                o->oVelY = -10.0f;
src/game/behaviors/spawn_star.inc.c:            o->oFaceAngleYaw = o->oFaceAngleYaw - o->oTimer * 0x10 + 0x1000;
src/game/behaviors/spawn_star.inc.c:            if (o->oPosY < o->oHomeY) {
src/game/behaviors/spawn_star.inc.c:                o->oPosY = o->oHomeY;
src/game/behaviors/spawn_star.inc.c:                o->oAction = 3;
src/game/behaviors/spawn_star.inc.c:            o->oFaceAngleYaw += 0x800;
src/game/behaviors/spawn_star.inc.c:            if (o->oTimer == 20) {
src/game/behaviors/spawn_star.inc.c:                o->activeFlags &= ~ACTIVE_FLAG_INITIATED_TIME_STOP;
src/game/behaviors/spawn_star.inc.c:            if (o->oInteractStatus & INT_STATUS_INTERACTED) {
src/game/behaviors/spawn_star.inc.c:                o->oInteractStatus = 0;
src/game/behaviors/spawn_star.inc.c:    sp30 = spawn_object_abs_with_rot(o, 0, MODEL_STAR, bhvStarSpawnCoordinates, o->oPosX, o->oPosY,
src/game/behaviors/spawn_star.inc.c:                                     o->oPosZ, 0, 0, 0);
src/game/behaviors/spawn_star.inc.c:    sp30->oBehParams = o->oBehParams;
src/game/behaviors/spawn_star.inc.c:            spawn_object_abs_with_rot(o, 0, MODEL_STAR, bhvStar, o->oPosX, o->oPosY, o->oPosZ, 0, 0, 0);
src/game/behaviors/spawn_star.inc.c:        sp30->oBehParams = o->oBehParams;
src/game/behaviors/spawn_star.inc.c:        o->activeFlags = ACTIVE_FLAG_DEACTIVATED;
src/game/behaviors/spawn_star.inc.c:    o->oHiddenStarTriggerCounter = 8 - sp36;
src/game/behaviors/spawn_star.inc.c:    starId = (o->oBehParams >> 24) & 0xFF;
src/game/behaviors/spawn_star.inc.c:    gRedCoinsCollected = o->oHiddenStarTriggerCounter;
src/game/behaviors/spawn_star.inc.c:    if ((gDialogCourseActNum-1 == starId)&&(o->oBehParams2ndByte == 0)) {
src/game/behaviors/spawn_star.inc.c:        gMarioState->StarRadarLocation[0] = (s16)o->oPosX;
src/game/behaviors/spawn_star.inc.c:        gMarioState->StarRadarLocation[1] = (s16)o->oPosY;
src/game/behaviors/spawn_star.inc.c:        gMarioState->StarRadarLocation[2] = (s16)o->oPosZ;
src/game/behaviors/spawn_star.inc.c:    switch (o->oAction) {
src/game/behaviors/spawn_star.inc.c:            if (o->oHiddenStarTriggerCounter == 8)
src/game/behaviors/spawn_star.inc.c:                o->oAction = 1;
src/game/behaviors/spawn_star.inc.c:            if (o->oTimer > 2) {
src/game/behaviors/spawn_star.inc.c:                spawn_red_coin_cutscene_star(o->oPosX, o->oPosY, o->oPosZ);
src/game/behaviors/spawn_star.inc.c:                o->activeFlags = ACTIVE_FLAG_DEACTIVATED;
src/game/behaviors/spawn_star_exit.inc.c:        o->oPosY += 100.0f;
src/game/behaviors/spawn_star_exit.inc.c:        o->oPosX = 2780.0f;
src/game/behaviors/spawn_star_exit.inc.c:        o->oPosZ = 4666.0f;
src/game/behaviors/spindel.inc.c:    o->oHomeY = o->oPosY;
src/game/behaviors/spindel.inc.c:    o->oSpindelUnkF4 = 0;
src/game/behaviors/spindel.inc.c:    o->oSpindelUnkF8 = 0;
src/game/behaviors/spindel.inc.c:    if (o->oSpindelUnkF4 == -1) {
src/game/behaviors/spindel.inc.c:        if (o->oTimer == 32) {
src/game/behaviors/spindel.inc.c:            o->oSpindelUnkF4 = 0;
src/game/behaviors/spindel.inc.c:            o->oTimer = 0;
src/game/behaviors/spindel.inc.c:            o->oVelZ = 0.0f;
src/game/behaviors/spindel.inc.c:            o->oAngleVelPitch = 0;
src/game/behaviors/spindel.inc.c:    sp18 = 10 - o->oSpindelUnkF4;
src/game/behaviors/spindel.inc.c:    if (o->oTimer == sp18 + 8) {
src/game/behaviors/spindel.inc.c:        o->oTimer = 0;
src/game/behaviors/spindel.inc.c:        o->oSpindelUnkF4++;
src/game/behaviors/spindel.inc.c:        if (o->oSpindelUnkF4 == 20) {
src/game/behaviors/spindel.inc.c:            if (o->oSpindelUnkF8 == 0) {
src/game/behaviors/spindel.inc.c:                o->oSpindelUnkF8 = 1;
src/game/behaviors/spindel.inc.c:                o->oSpindelUnkF8 = 0;
src/game/behaviors/spindel.inc.c:            o->oSpindelUnkF4 = -1;
src/game/behaviors/spindel.inc.c:    if (o->oTimer < sp18 * 8) {
src/game/behaviors/spindel.inc.c:        if (o->oSpindelUnkF8 == 0) {
src/game/behaviors/spindel.inc.c:            o->oVelZ = 20 / sp18;
src/game/behaviors/spindel.inc.c:            o->oAngleVelPitch = 1024 / sp18;
src/game/behaviors/spindel.inc.c:            o->oVelZ = -20 / sp18;
src/game/behaviors/spindel.inc.c:            o->oAngleVelPitch = -1024 / sp18;
src/game/behaviors/spindel.inc.c:        o->oPosZ += o->oVelZ;
src/game/behaviors/spindel.inc.c:        o->oMoveAnglePitch += o->oAngleVelPitch;
src/game/behaviors/spindel.inc.c:        if (absf_2(o->oMoveAnglePitch & 0x1fff) < 800.0f && o->oAngleVelPitch != 0) {
src/game/behaviors/spindel.inc.c:        sp1C = sins(o->oMoveAnglePitch * 4) * 23.0;
src/game/behaviors/spindel.inc.c:        o->oPosY = o->oHomeY + sp1C;
src/game/behaviors/spindel.inc.c:        if (o->oTimer + 1 == sp18 * 8)
src/game/behaviors/spindel.inc.c:            set_camera_shake_from_point(SHAKE_POS_SMALL, o->oPosX, o->oPosY, o->oPosZ);
src/game/behaviors/spindrift.inc.c:    o->activeFlags |= ACTIVE_FLAG_UNK10;
src/game/behaviors/spindrift.inc.c:    switch (o->oAction) {
src/game/behaviors/spindrift.inc.c:            approach_forward_vel(&o->oForwardVel, 4.0f, 1.0f);
src/game/behaviors/spindrift.inc.c:                o->oAngleToMario = cur_obj_angle_to_home();
src/game/behaviors/spindrift.inc.c:            else if (o->oDistanceToMario > 300.0f)
src/game/behaviors/spindrift.inc.c:                o->oAngleToMario = obj_angle_to_object(o, gMarioObject);
src/game/behaviors/spindrift.inc.c:            cur_obj_rotate_yaw_toward(o->oAngleToMario, 0x400);
src/game/behaviors/spindrift.inc.c:            o->oFlags &= ~8;
src/game/behaviors/spindrift.inc.c:            o->oForwardVel = -10.0f;
src/game/behaviors/spindrift.inc.c:            if (o->oTimer > 20) {
src/game/behaviors/spindrift.inc.c:                o->oAction = 0;
src/game/behaviors/spindrift.inc.c:                o->oInteractStatus = 0;
src/game/behaviors/spindrift.inc.c:                o->oFlags |= 8;
src/game/behaviors/spiny.inc.c:    if (o->parentObj != o) {
src/game/behaviors/spiny.inc.c:        if (o->oDistanceToMario > 2500.0f) {
src/game/behaviors/spiny.inc.c:            o->parentObj->oEnemyLakituNumSpinies -= 1;
src/game/behaviors/spiny.inc.c:        o->oGraphYOffset = -17.0f;
src/game/behaviors/spiny.inc.c:        if (o->oMoveFlags & OBJ_MOVE_MASK_ON_GROUND) {
src/game/behaviors/spiny.inc.c:            if (!(o->oFlags & OBJ_FLAG_SET_FACE_YAW_TO_MOVE_YAW)) {
src/game/behaviors/spiny.inc.c:                    o->oFlags |= OBJ_FLAG_SET_FACE_YAW_TO_MOVE_YAW;
src/game/behaviors/spiny.inc.c:                    o->oMoveAngleYaw = o->oFaceAngleYaw;
src/game/behaviors/spiny.inc.c:            if (o->oSpinyTurningAwayFromWall) {
src/game/behaviors/spiny.inc.c:                o->oSpinyTurningAwayFromWall =
src/game/behaviors/spiny.inc.c:                    obj_resolve_collisions_and_turn(o->oSpinyTargetYaw, 0x80);
src/game/behaviors/spiny.inc.c:                if (!(o->oSpinyTurningAwayFromWall =
src/game/behaviors/spiny.inc.c:                          obj_bounce_off_walls_edges_objects(&o->oSpinyTargetYaw))) {
src/game/behaviors/spiny.inc.c:                    if (o->oSpinyTimeUntilTurn != 0) {
src/game/behaviors/spiny.inc.c:                        o->oSpinyTimeUntilTurn -= 1;
src/game/behaviors/spiny.inc.c:                        o->oSpinyTargetYaw = o->oMoveAngleYaw + (s16) random_sign() * 0x2000;
src/game/behaviors/spiny.inc.c:                        o->oSpinyTimeUntilTurn = random_linear_offset(100, 100);
src/game/behaviors/spiny.inc.c:                cur_obj_rotate_yaw_toward(o->oSpinyTargetYaw, 0x80);
src/game/behaviors/spiny.inc.c:        } else if (o->oMoveFlags & OBJ_MOVE_HIT_WALL) {
src/game/behaviors/spiny.inc.c:            o->oMoveAngleYaw = cur_obj_reflect_move_angle_off_wall();
src/game/behaviors/spiny.inc.c:            o->oAction = SPINY_ACT_WALK;
src/game/behaviors/spiny.inc.c:            o->oForwardVel *= 0.1f;
src/game/behaviors/spiny.inc.c:            o->oVelY *= 0.7f;
src/game/behaviors/spiny.inc.c:            o->oMoveFlags = 0; // weird flex but okay
src/game/behaviors/spiny.inc.c:            o->oInteractType = INTERACT_MR_BLIZZARD;
src/game/behaviors/spiny.inc.c:            o->oInteractType = INTERACT_UNKNOWN_08;
src/game/behaviors/spiny.inc.c:    o->oGraphYOffset = 15.0f;
src/game/behaviors/spiny.inc.c:    o->oParentRelativePosX = -50.0f;
src/game/behaviors/spiny.inc.c:    o->oParentRelativePosY = 35.0f;
src/game/behaviors/spiny.inc.c:    o->oParentRelativePosZ = -100.0f;
src/game/behaviors/spiny.inc.c:    if (o->parentObj->prevObj == NULL) {
src/game/behaviors/spiny.inc.c:        o->oAction = SPINY_ACT_THROWN_BY_LAKITU;
src/game/behaviors/spiny.inc.c:        o->oMoveAngleYaw = o->parentObj->oFaceAngleYaw;
src/game/behaviors/spiny.inc.c:        o->oForwardVel =
src/game/behaviors/spiny.inc.c:            o->parentObj->oForwardVel * coss(o->oMoveAngleYaw - o->parentObj->oMoveAngleYaw) + 10.0f;
src/game/behaviors/spiny.inc.c:        o->oVelY = 30.0f;
src/game/behaviors/spiny.inc.c:        o->oMoveFlags = 0; // you do you, spiny
src/game/behaviors/spiny.inc.c:        o->oGraphYOffset = 15.0f;
src/game/behaviors/spiny.inc.c:        o->oFaceAnglePitch -= 0x2000;
src/game/behaviors/spiny.inc.c:        if (o->oMoveFlags & OBJ_MOVE_LANDED) {
src/game/behaviors/spiny.inc.c:            o->oGraphYOffset = -17.0f;
src/game/behaviors/spiny.inc.c:            o->oFaceAnglePitch = 0;
src/game/behaviors/spiny.inc.c:            o->oAction = SPINY_ACT_WALK;
src/game/behaviors/spiny.inc.c:        } else if (o->oMoveFlags & OBJ_MOVE_HIT_WALL) {
src/game/behaviors/spiny.inc.c:            o->oMoveAngleYaw = cur_obj_reflect_move_angle_off_wall();
src/game/behaviors/spiny.inc.c:        if (obj_check_attacks(&sSpinyHitbox, o->oAction)) {
src/game/behaviors/spiny.inc.c:            if (o->parentObj != o) {
src/game/behaviors/spiny.inc.c:                o->parentObj->oEnemyLakituNumSpinies -= 1;
src/game/behaviors/spiny.inc.c:    switch (o->oAction) {
src/game/behaviors/square_platform_cycle.inc.c:    o->oMoveAngleYaw = yaw;
src/game/behaviors/square_platform_cycle.inc.c:    if (a < o->oTimer)
src/game/behaviors/square_platform_cycle.inc.c:    o->oForwardVel = 10.0f;
src/game/behaviors/square_platform_cycle.inc.c:    switch (o->oAction) {
src/game/behaviors/square_platform_cycle.inc.c:            o->oAction = (o->oBehParams2ndByte & 3) + 1;
src/game/behaviors/square_platform_cycle.inc.c:                o->oAction++;
src/game/behaviors/square_platform_cycle.inc.c:                o->oAction++;
src/game/behaviors/square_platform_cycle.inc.c:                o->oAction++;
src/game/behaviors/square_platform_cycle.inc.c:                o->oAction = 1;
src/game/behaviors/star_door.inc.c:    o->oVelX = (o->oUnkBC) * coss(o->oMoveAngleYaw);
src/game/behaviors/star_door.inc.c:    o->oVelZ = (o->oUnkBC) * -sins(o->oMoveAngleYaw);
src/game/behaviors/star_door.inc.c:    o->oPosX += o->oVelX;
src/game/behaviors/star_door.inc.c:    o->oPosZ += o->oVelZ;
src/game/behaviors/star_door.inc.c:    switch (o->oAction) {
src/game/behaviors/star_door.inc.c:            if (0x30000 & o->oInteractStatus)
src/game/behaviors/star_door.inc.c:                o->oAction = 1;
src/game/behaviors/star_door.inc.c:                o->oAction = 1;
src/game/behaviors/star_door.inc.c:            if (o->oTimer == 0 && (s16)(o->oMoveAngleYaw) >= 0) {
src/game/behaviors/star_door.inc.c:            o->oUnkBC = -8.0f;
src/game/behaviors/star_door.inc.c:            if (o->oTimer >= 16)
src/game/behaviors/star_door.inc.c:                o->oAction++;
src/game/behaviors/star_door.inc.c:            if (o->oTimer >= 31)
src/game/behaviors/star_door.inc.c:                o->oAction++;
src/game/behaviors/star_door.inc.c:            if (o->oTimer == 0 && (s16)(o->oMoveAngleYaw) >= 0) {
src/game/behaviors/star_door.inc.c:            o->oUnkBC = 8.0f;
src/game/behaviors/star_door.inc.c:            if (o->oTimer >= 16)
src/game/behaviors/star_door.inc.c:                o->oAction++;
src/game/behaviors/star_door.inc.c:            o->oInteractStatus = 0;
src/game/behaviors/star_door.inc.c:            o->oAction = 0;
src/game/behaviors/static_checkered_platform.inc.c:        o->oAngleVelPitch = 0;
src/game/behaviors/static_checkered_platform.inc.c:        o->oAngleVelYaw = 0;
src/game/behaviors/static_checkered_platform.inc.c:        o->oAngleVelRoll = 0;
src/game/behaviors/static_checkered_platform.inc.c:        o->oFaceAnglePitch = gDebugInfo[5][1] << 12;
src/game/behaviors/static_checkered_platform.inc.c:        o->oFaceAngleYaw = gDebugInfo[5][2] << 12;
src/game/behaviors/static_checkered_platform.inc.c:        o->oFaceAngleRoll = gDebugInfo[5][3] << 12;
src/game/behaviors/static_checkered_platform.inc.c:    o->oAngleVelPitch = gDebugInfo[5][4];
src/game/behaviors/static_checkered_platform.inc.c:    o->oAngleVelYaw = gDebugInfo[5][5];
src/game/behaviors/static_checkered_platform.inc.c:    o->oAngleVelRoll = gDebugInfo[5][6];
src/game/behaviors/static_checkered_platform.inc.c:        o->oFaceAnglePitch += o->oAngleVelPitch;
src/game/behaviors/static_checkered_platform.inc.c:        o->oFaceAngleYaw += o->oAngleVelYaw;
src/game/behaviors/static_checkered_platform.inc.c:        o->oFaceAngleRoll += o->oAngleVelRoll;
src/game/behaviors/strong_wind_particle.inc.c:    if (o->oTimer == 0) {
src/game/behaviors/strong_wind_particle.inc.c:        o->oStrongWindParticlePenguinObj = cur_obj_nearest_object_with_behavior(bhvSLWalkingPenguin);
src/game/behaviors/strong_wind_particle.inc.c:        o->oForwardVel = coss(o->oMoveAnglePitch) * 100.0f;
src/game/behaviors/strong_wind_particle.inc.c:        o->oVelY = sins(o->oMoveAnglePitch) * -100.0f;
src/game/behaviors/strong_wind_particle.inc.c:        o->oMoveAngleYaw += random_f32_around_zero(o->oBehParams2ndByte * 500); // Wind spread
src/game/behaviors/strong_wind_particle.inc.c:        o->oOpacity = 100;
src/game/behaviors/strong_wind_particle.inc.c:    if (o->oTimer > 15) // Deactivate after 15 frames
src/game/behaviors/strong_wind_particle.inc.c:    penguinObj = o->oStrongWindParticlePenguinObj;
src/game/behaviors/strong_wind_particle.inc.c:        penguinXDist = penguinObj->oSLWalkingPenguinWindCollisionXPos - o->oPosX;
src/game/behaviors/strong_wind_particle.inc.c:        penguinZDist = penguinObj->oSLWalkingPenguinWindCollisionZPos - o->oPosZ;
src/game/behaviors/sushi.inc.c:    f32 sp1C = find_water_level(o->oPosX, o->oPosZ);
src/game/behaviors/sushi.inc.c:    o->oPosX = o->oHomeX + sins(o->oSushiSharkUnkF4) * 1700.0f;
src/game/behaviors/sushi.inc.c:    o->oPosZ = o->oHomeZ + coss(o->oSushiSharkUnkF4) * 1700.0f;
src/game/behaviors/sushi.inc.c:    o->oPosY = sp1C + o->oHomeY + sins(o->oSushiSharkUnkF4) * 200.0f;
src/game/behaviors/sushi.inc.c:    o->oMoveAngleYaw = o->oSushiSharkUnkF4 + 0x4000;
src/game/behaviors/sushi.inc.c:    o->oSushiSharkUnkF4 += 0x80;
src/game/behaviors/sushi.inc.c:        if (o->oPosY - sp1C > -200.0f)
src/game/behaviors/sushi.inc.c:    if ((o->oTimer & 0xF) == 0)
src/game/behaviors/sushi.inc.c:    o->oInteractStatus = 0;
src/game/behaviors/swing_platform.inc.c:    o->oVelY = 0x1000;
src/game/behaviors/swing_platform.inc.c:    s32 startRoll = o->oFaceAngleRoll;
src/game/behaviors/swing_platform.inc.c:    if (o->oFaceAngleRoll < 0) {
src/game/behaviors/swing_platform.inc.c:        o->oVelX += 4.0f;
src/game/behaviors/swing_platform.inc.c:        o->oVelX -= 4.0f;
src/game/behaviors/swing_platform.inc.c:    o->oVelY += o->oVelX;
src/game/behaviors/swing_platform.inc.c:    o->oFaceAngleRoll = o->oVelY;
src/game/behaviors/swing_platform.inc.c:    //o->oAngleVelRoll = o->oFaceAngleRoll - startRoll;
src/game/behaviors/swing_platform.inc.c:    o->oDontInertia = FALSE;
src/game/behaviors/switch_hidden_objects.inc.c:    o->oHiddenObjectUnkF4 = NULL;
src/game/behaviors/switch_hidden_objects.inc.c:    o->oAnimState = 1;
src/game/behaviors/switch_hidden_objects.inc.c:    switch (o->oBehParams2ndByte) {
src/game/behaviors/switch_hidden_objects.inc.c:            o->oNumLootCoins = 0;
src/game/behaviors/switch_hidden_objects.inc.c:            o->oNumLootCoins = 3;
src/game/behaviors/switch_hidden_objects.inc.c:            o->oNumLootCoins = 5;
src/game/behaviors/switch_hidden_objects.inc.c:    if (o->oAction == 0) {
src/game/behaviors/switch_hidden_objects.inc.c:        if (o->oTimer == 0)
src/game/behaviors/switch_hidden_objects.inc.c:        if (o->oHiddenObjectUnkF4 == NULL)
src/game/behaviors/switch_hidden_objects.inc.c:            o->oHiddenObjectUnkF4 = cur_obj_nearest_object_with_behavior(bhvFloorSwitchHiddenObjects);
src/game/behaviors/switch_hidden_objects.inc.c:        if ((sp1C = o->oHiddenObjectUnkF4) != NULL)
src/game/behaviors/switch_hidden_objects.inc.c:                o->oAction++;
src/game/behaviors/switch_hidden_objects.inc.c:    } else if (o->oAction == 1) {
src/game/behaviors/switch_hidden_objects.inc.c:            o->oAction = 0;
src/game/behaviors/switch_hidden_objects.inc.c:            o->oAction++;
src/game/behaviors/switch_hidden_objects.inc.c:        o->oInteractStatus = 0;
src/game/behaviors/switch_hidden_objects.inc.c:        if ((sp1C = o->oHiddenObjectUnkF4) != NULL)
src/game/behaviors/switch_hidden_objects.inc.c:                o->oAction = 0;
src/game/behaviors/switch_hidden_objects.inc.c:    if (o->oAction == 0) {
src/game/behaviors/switch_hidden_objects.inc.c:        if (o->oHiddenObjectUnkF4 == NULL)
src/game/behaviors/switch_hidden_objects.inc.c:            o->oHiddenObjectUnkF4 = cur_obj_nearest_object_with_behavior(bhvFloorSwitchHiddenObjects);
src/game/behaviors/switch_hidden_objects.inc.c:        if ((sp1C = o->oHiddenObjectUnkF4) != NULL)
src/game/behaviors/switch_hidden_objects.inc.c:                o->oAction++;
src/game/behaviors/switch_hidden_objects.inc.c:            o->oAction = 0;
src/game/behaviors/switch_hidden_objects.inc.c:    if (o->oBehParams2ndByte == 0)
src/game/behaviors/swoop.inc.c:    if (approach_f32_ptr(&o->header.gfx.scale[0], 1.0f, 0.05f) && o->oDistanceToMario < 1500.0f) {
src/game/behaviors/swoop.inc.c:        if (cur_obj_rotate_yaw_toward(o->oAngleToMario, 800)) {
src/game/behaviors/swoop.inc.c:            o->oAction = SWOOP_ACT_MOVE;
src/game/behaviors/swoop.inc.c:            o->oVelY = -12.0f;
src/game/behaviors/swoop.inc.c:    o->oFaceAngleRoll = 0x8000;
src/game/behaviors/swoop.inc.c:    if (o->oForwardVel == 0.0f) {
src/game/behaviors/swoop.inc.c:            o->oForwardVel = 10.0f;
src/game/behaviors/swoop.inc.c:            o->oVelY = -10.0f;
src/game/behaviors/swoop.inc.c:        o->oAction = SWOOP_ACT_IDLE;
src/game/behaviors/swoop.inc.c:        o->header.gfx.scale[0] = o->oForwardVel = o->oVelY = 0.0f;
src/game/behaviors/swoop.inc.c:        o->oFaceAngleRoll = 0;
src/game/behaviors/swoop.inc.c:        if (o->oSwoopBonkCountdown != 0) {
src/game/behaviors/swoop.inc.c:            o->oSwoopBonkCountdown -= 1;
src/game/behaviors/swoop.inc.c:        } else if (o->oVelY != 0.0f) {
src/game/behaviors/swoop.inc.c:            o->oSwoopTargetYaw = o->oAngleToMario;
src/game/behaviors/swoop.inc.c:            if (o->oPosY < gMarioObject->oPosY + 200.0f) {
src/game/behaviors/swoop.inc.c:                    o->oForwardVel *= 2.0f;
src/game/behaviors/swoop.inc.c:        } else if (o->oMoveFlags & OBJ_MOVE_HIT_WALL) {
src/game/behaviors/swoop.inc.c:            o->oSwoopTargetYaw = cur_obj_reflect_move_angle_off_wall();
src/game/behaviors/swoop.inc.c:            o->oSwoopBonkCountdown = 30;
src/game/behaviors/swoop.inc.c:        if ((o->oSwoopTargetPitch = obj_get_pitch_from_vel()) == 0) {
src/game/behaviors/swoop.inc.c:            o->oSwoopTargetPitch += o->oForwardVel * 500;
src/game/behaviors/swoop.inc.c:        obj_move_pitch_approach(o->oSwoopTargetPitch, 140);
src/game/behaviors/swoop.inc.c:        cur_obj_rotate_yaw_toward(o->oSwoopTargetYaw + (s32)(3000 * coss(4000 * gGlobalTimer)), 1200);
src/game/behaviors/swoop.inc.c:        obj_roll_to_match_yaw_turn(o->oSwoopTargetYaw, 0x3000, 500);
src/game/behaviors/swoop.inc.c:        o->oFaceAngleRoll += (s32)(1000 * coss(20000 * gGlobalTimer));
src/game/behaviors/swoop.inc.c:    if (!(o->activeFlags & ACTIVE_FLAG_IN_DIFFERENT_ROOM)) {
src/game/behaviors/swoop.inc.c:        o->oDeathSound = SOUND_OBJ_SWOOP_DEATH;
src/game/behaviors/swoop.inc.c:        switch (o->oAction) {
src/game/behaviors/swoop.inc.c:        cur_obj_scale(o->header.gfx.scale[0]);
src/game/behaviors/swoop.inc.c:        obj_check_attacks(&sSwoopHitbox, o->oAction);
src/game/behaviors/thi_top.inc.c:        if (o->oTimer == 0)
src/game/behaviors/thi_top.inc.c:        if (o->oAction == 0) {
src/game/behaviors/thi_top.inc.c:            if (o->oDistanceToMario < 500.0f)
src/game/behaviors/thi_top.inc.c:                    o->oAction++;
src/game/behaviors/thi_top.inc.c:            if (o->oTimer < 50) {
src/game/behaviors/thi_top.inc.c:                o->oAction += 1;
src/game/behaviors/thi_top.inc.c:        if (o->oTimer == 0)
src/game/behaviors/thwomp.inc.c:    o->oPosY = o->oHomeY;
src/game/behaviors/thwomp.inc.c:    if (o->oTimer == 0)
src/game/behaviors/thwomp.inc.c:        o->oExtraVariable1 = random_float() * 10.0f + 20.0f;
src/game/behaviors/thwomp.inc.c:    if (o->oTimer > o->oExtraVariable1)
src/game/behaviors/thwomp.inc.c:        o->oAction = 0;
src/game/behaviors/thwomp.inc.c:    o->oVelY += -4.0f;
src/game/behaviors/thwomp.inc.c:    o->oPosY += o->oVelY;
src/game/behaviors/thwomp.inc.c:    if (o->oPosY < o->oHomeY) {
src/game/behaviors/thwomp.inc.c:        o->oPosY = o->oHomeY;
src/game/behaviors/thwomp.inc.c:        o->oVelY = 0;
src/game/behaviors/thwomp.inc.c:        o->oAction = 3;
src/game/behaviors/thwomp.inc.c:    o->oPosY = o->oHomeY;
src/game/behaviors/thwomp.inc.c:    if (o->oTimer == 0)
src/game/behaviors/thwomp.inc.c:        if (o->oDistanceToMario < 1500.0f) {
src/game/behaviors/thwomp.inc.c:    if (o->oTimer > 9)
src/game/behaviors/thwomp.inc.c:        o->oAction = 4;
src/game/behaviors/thwomp.inc.c:    if (o->oTimer == 0)
src/game/behaviors/thwomp.inc.c:        o->oExtraVariable1 = random_float() * 30.0f + 10.0f;
src/game/behaviors/thwomp.inc.c:    if (o->oTimer > o->oExtraVariable1)
src/game/behaviors/thwomp.inc.c:        o->oAction = 2;
src/game/behaviors/thwomp.inc.c:    if (o->oBehParams2ndByte + 40 < o->oTimer) {
src/game/behaviors/thwomp.inc.c:        o->oAction = 1;
src/game/behaviors/thwomp.inc.c:        o->oPosY += 5.0f;
src/game/behaviors/thwomp.inc.c:        o->oPosY += 10.0f;
src/game/behaviors/thwomp.inc.c:            o->oHomeY = sp1C->oPosY;
src/game/behaviors/thwomp.inc.c:    if (o->oTimer > o->oExtraVariable1 && o->oAction == 0) {
src/game/behaviors/thwomp.inc.c:        o->oTimer = 0;
src/game/behaviors/thwomp.inc.c:        o->oAction = 1;
src/game/behaviors/thwomp.inc.c:    if (o->oAction == 1) {
src/game/behaviors/thwomp.inc.c:        o->oPosY += o->oVelY;
src/game/behaviors/thwomp.inc.c:        if (o->oPosY > o->oHomeY+(250.0f*o->oBehParams2ndByte)) {
src/game/behaviors/thwomp.inc.c:            o->oVelY = 2;
src/game/behaviors/thwomp.inc.c:            o->oAction = 2;
src/game/behaviors/thwomp.inc.c:            o->oTimer = 0;
src/game/behaviors/thwomp.inc.c:            if (o->oVelY < 30.0f) {
src/game/behaviors/thwomp.inc.c:                o->oVelY += 4;
src/game/behaviors/thwomp.inc.c:    if (o->oAction == 2) {
src/game/behaviors/thwomp.inc.c:        o->oPosY += o->oVelY;
src/game/behaviors/thwomp.inc.c:        if (o->oPosY > o->oHomeY+(250.0f*o->oBehParams2ndByte)) {
src/game/behaviors/thwomp.inc.c:            o->oVelY -= 2;
src/game/behaviors/thwomp.inc.c:            o->oVelY += 2;
src/game/behaviors/thwomp.inc.c:        if (o->oTimer > 90) {
src/game/behaviors/thwomp.inc.c:            o->oTimer = 0;
src/game/behaviors/thwomp.inc.c:            o->oAction = 3;
src/game/behaviors/thwomp.inc.c:    if (o->oAction == 3) {
src/game/behaviors/thwomp.inc.c:        o->oVelY -= 1;
src/game/behaviors/thwomp.inc.c:        o->oPosY += o->oVelY;
src/game/behaviors/thwomp.inc.c:        if (o->oPosY < o->oHomeY) {
src/game/behaviors/thwomp.inc.c:            o->oPosY = o->oHomeY-30.0f;
src/game/behaviors/thwomp.inc.c:            o->oAction = 0;
src/game/behaviors/thwomp.inc.c:            o->oTimer = 0;
src/game/behaviors/thwomp.inc.c:            o->oVelY = 0;
src/game/behaviors/thwomp.inc.c:            o->oExtraVariable1 = random_float() * 40.0f + 60.0f;
src/game/behaviors/thwomp.inc.c:    o->oDontInertia = FALSE;
src/game/behaviors/tilting_inverted_pyramid.inc.c:    pos[0] = o->oPosX;
src/game/behaviors/tilting_inverted_pyramid.inc.c:    pos[1] = o->oPosY;
src/game/behaviors/tilting_inverted_pyramid.inc.c:    pos[2] = o->oPosZ;
src/game/behaviors/tilting_inverted_pyramid.inc.c:    Mat4 *transform = &o->transform;
src/game/behaviors/tilting_inverted_pyramid.inc.c:    o->oTiltingPyramidNormalX = 0.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:    o->oTiltingPyramidNormalY = 1.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:    o->oTiltingPyramidNormalZ = 0.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:    obj_scale(o,(o->oBehParams2ndByte/2.0f));
src/game/behaviors/tilting_inverted_pyramid.inc.c:    Mat4 *transform = &o->transform;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        dist[0] = gMarioObject->oPosX - o->oPosX;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        dist[1] = gMarioObject->oPosY - o->oPosY;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        dist[2] = gMarioObject->oPosZ - o->oPosZ;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        dx = gMarioObject->oPosX - o->oPosX;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        dz = gMarioObject->oPosZ - o->oPosZ;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        if (o->oTiltingPyramidMarioOnPlatform == TRUE)
src/game/behaviors/tilting_inverted_pyramid.inc.c:        o->oTiltingPyramidMarioOnPlatform = TRUE;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        o->oTiltingPyramidMarioOnPlatform = FALSE;
src/game/behaviors/tilting_inverted_pyramid.inc.c:    o->oTiltingPyramidNormalX = approach_by_increment(dx, o->oTiltingPyramidNormalX, 0.01f);
src/game/behaviors/tilting_inverted_pyramid.inc.c:    o->oTiltingPyramidNormalY = approach_by_increment(dy, o->oTiltingPyramidNormalY, 0.01f);
src/game/behaviors/tilting_inverted_pyramid.inc.c:    o->oTiltingPyramidNormalZ = approach_by_increment(dz, o->oTiltingPyramidNormalZ, 0.01f);
src/game/behaviors/tilting_inverted_pyramid.inc.c:    create_transform_from_normals(*transform, o->oTiltingPyramidNormalX, o->oTiltingPyramidNormalY, o->oTiltingPyramidNormalZ);
src/game/behaviors/tilting_inverted_pyramid.inc.c:    o->header.gfx.throwMatrix = transform;
src/game/behaviors/tilting_inverted_pyramid.inc.c:    if (o->oAction == 0) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:        o->oAction = 1;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        o->oMoveAngleYaw += 0x4000;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        o->oHomeX = o->oPosX;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        if (o->oBehParams2ndByte == 1) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oPosX -= 400.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:    if (o->oAction == 1) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:        if (o->oTimer > 60) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oAction = 2;
src/game/behaviors/tilting_inverted_pyramid.inc.c:    if (o->oAction == 2) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:        if (o->oBehParams2ndByte == 0) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oForwardVel = -30.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            if (o->oPosX < o->oHomeX-400.0f) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oAction = 1;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oBehParams2ndByte = 1;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oTimer = 0;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oForwardVel = 0.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oForwardVel = 30.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            if (o->oPosX > o->oHomeX) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oAction = 1;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oBehParams2ndByte = 0;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oTimer = 0;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oForwardVel = 0.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:    o->oDontInertia = TRUE;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        if (o->oAction == 0) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oAction = 1;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oTimer = 0;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        if (o->oAction == 1) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:            if (o->oTimer%2 == 0) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oPosY = o->oHomeY;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oPosY = o->oHomeY+7.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            if (o->oTimer > 30) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oAction = 2;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oTimer = 0;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        if (o->oAction == 2) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oPosY += o->oVelY;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oVelY -= 2.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            if (o->oPosY < -5000.0f) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oPosY = -5000.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oVelY = 0;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oPosY = o->oHomeY;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oAction = 0;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oVelY = 0;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        if (o->oBehParams2ndByte == 1) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:            switch(o->oAction) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oAction++;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oHomeY = o->oPosY;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oPosY -= 600.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                if (o->oPosY < o->oHomeY) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:                    o->oPosY += 2.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                    o->oAction++;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                    o->oPosY = o->oHomeY;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        if (o->oAction == 0) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oAction = 1;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        if (o->oAction == 1) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oPosY += 15.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oVelY = 15.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            if (gMarioState->pos[1] < o->oPosY-50.0f) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oAction = 2;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oHealth = 0;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        if (o->oAction == 2) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oPosY += o->oVelY;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            if (o->oVelY > -60.0f) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oVelY -= 2.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            if (o->oPosY < o->oHomeY) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oPosY = o->oHomeY;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                if (o->oHealth < 5) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:                    o->oVelY = (-o->oVelY)/2;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                    o->oHealth ++;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                    if (gMarioState->pos[1] < o->oPosY-50.0f) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:                    o->oAction = 0;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                    o->oVelY = 0;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        if (o->oAction == 0) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oAction = 1;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                play_sound(SOUND_GENERAL_OPEN_CHEST, o->header.gfx.cameraToObject);
src/game/behaviors/tilting_inverted_pyramid.inc.c:        if (o->oAction == 1) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oFaceAnglePitch += o->oMoveAnglePitch;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            if (o->oFaceAnglePitch > 0x4000) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oMoveAnglePitch -= 0x50;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oMoveAnglePitch += 0x50;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oMoveAnglePitch *= .98;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        if (o->oDistanceToMario > 2700.0f) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oAction = 0;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oMoveAnglePitch = 0;;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oFaceAnglePitch = 0;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        if (o->oAction == 0) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oPosY = o->oHomeY-2100.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oAction = 1;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        if (o->oAction == 1) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oAction = 2;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        if (o->oAction == 2) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oVelY = 10;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oPosY += 10;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            if (o->oPosY > o->oHomeY) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oPosY = o->oHomeY;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oVelY = 0;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oTimer = 0;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            if (o->oTimer > 60) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oAction = 3;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        if (o->oAction == 3) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oVelY = -10;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oPosY -= 10;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            if (o->oPosY < o->oHomeY-2100.0f) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oPosY = o->oHomeY-2100.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oVelY = 0;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oAction = 1;o->oHomeY-2100.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            sp1C->header.gfx.scale[1] = (sp1C->oPosY-o->oPosY)/100.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            sp2C->oFaceAnglePitch += o->oVelY*-64;
src/game/behaviors/tilting_inverted_pyramid.inc.c:    if (o->oAction == 0) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:        o->oAction = 1;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        o->oVelY = 5.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        o->oFaceAngleYaw += o->oBehParams2ndByte*0x4000;
src/game/behaviors/tilting_inverted_pyramid.inc.c:    if (o->oDistanceToMario > 1100.0f) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:        o->oOpacity = 255-((o->oDistanceToMario*255)/1100.0f);
src/game/behaviors/tilting_inverted_pyramid.inc.c:        o->oPosY += o->oVelY;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        if (o->oPosY > o->oHomeY) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oVelY -=.5;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oVelY +=.5;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        o->oDontInertia = TRUE;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        if (o->oAction == 0) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->header.gfx.scale[0] = 5;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->header.gfx.sharedChild = gLoadedGraphNodes[0xE4];
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oAnimState = 2;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->header.gfx.scale[0] = 1;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oAnimState = 0;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oPosX += 400;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oAction = 1;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oTimer = 0;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                obj->oBehParams2ndByte = o->oBehParams2ndByte;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                obj->oBehParams2ndByte = o->oBehParams2ndByte;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                obj->oBehParams2ndByte = o->oBehParams2ndByte;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                obj->oBehParams2ndByte = o->oBehParams2ndByte;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                obj->oBehParams2ndByte = o->oBehParams2ndByte;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oHealth = 4;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oPosX -= 790;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        if (o->oAction == 1) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:            if (o->oTimer > 19) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oTimer = 0;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oHealth += 1; //using health as an index for direction tbh
src/game/behaviors/tilting_inverted_pyramid.inc.c:                if (o->oExtraVariable1 == 0) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:                    obj->oBehParams2ndByte = o->oBehParams2ndByte;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            switch(SnakePathList[o->oBehParams2ndByte][o->oHealth]) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oPosX += 10;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oPosX -= 10;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oPosY += 10;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oPosY -= 10;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oPosZ += 10;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oPosZ -= 10;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oAction = 3;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        if (o->oAction == 3) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oVelY -= 1;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oPosY += o->oVelY;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            if (o->oPosY < -3000.0f) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:                if (o->oExtraVariable1 == 0) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:                    o->oVelY = 0;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                    o->oPosX = o->oHomeX;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                    o->oPosY = o->oHomeY;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                    o->oPosZ = o->oHomeZ;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                    o->oAction = 0;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                    o->oAnimState = 0;
src/game/behaviors/tilting_inverted_pyramid.inc.c:    if (o->oTimer > 79) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:    sp20 = find_water_level(o->oPosX, o->oPosZ);
src/game/behaviors/tilting_inverted_pyramid.inc.c:    sp1C = find_floor(o->oPosX, o->oPosY, o->oPosZ, &sp24);
src/game/behaviors/tilting_inverted_pyramid.inc.c:    if (o->oAction == 1) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->header.gfx.node.flags &= ~GRAPH_RENDER_INVISIBLE;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->header.gfx.node.flags |= GRAPH_RENDER_INVISIBLE;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oFaceAngleYaw = random_u16();
src/game/behaviors/tilting_inverted_pyramid.inc.c:            if (o->oTimer > 30)
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->header.gfx.node.flags |= GRAPH_RENDER_INVISIBLE;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oTimer = 0;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oAction = 0;
src/game/behaviors/tilting_inverted_pyramid.inc.c:    if (o->oAction == 0) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:            if (o->oTimer > random_u16()/2)
src/game/behaviors/tilting_inverted_pyramid.inc.c:                    o->oPosX = gMarioState->pos[0] + (random_u16()/10)-3276.8;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                    o->oPosZ = gMarioState->pos[2] + (random_u16()/10)-3276.8;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                    o->oPosX = (random_u16()/4)-8192;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                    o->oPosZ = (random_u16()/4)-8192;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oPosY = 19000.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oPosY = llightning_floating_platform_find_home_y();
src/game/behaviors/tilting_inverted_pyramid.inc.c:                set_camera_shake_from_point(SHAKE_POS_LARGE, o->oPosX, o->oPosY, o->oPosZ);
src/game/behaviors/tilting_inverted_pyramid.inc.c:                if ((mdist < 500.0f)&&(gMarioState->pos[1] > o->oPosY-100.0f))  {
src/game/behaviors/tilting_inverted_pyramid.inc.c:                    o->oPosX = gMarioState->pos[0];
src/game/behaviors/tilting_inverted_pyramid.inc.c:                    o->oPosZ = gMarioState->pos[2];
src/game/behaviors/tilting_inverted_pyramid.inc.c:                    o->oPosY = gMarioState->pos[1];
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oTimer = 0;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oAction = 1;
src/game/behaviors/tilting_inverted_pyramid.inc.c:    if (o->oBehParams2ndByte == 0) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:    if (o->oAction == 0) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:        o->oAction = 1;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        o->oPosY += 100.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:    if (o->oAction == 1) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oAction = 2;
src/game/behaviors/tilting_inverted_pyramid.inc.c:    if (o->oAction == 2) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:        o->oPosY -= 5.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        if (o->oPosY < o->oHomeY) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oAction = 3;
src/game/behaviors/tilting_inverted_pyramid.inc.c:    if (o->oAction == 3) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:    if (o->oAction > 1) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:        gMarioState->pos[0] = o->oPosX;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        if (gMarioState->pos[1] > o->oPosY) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:            gMarioState->pos[1] = o->oPosY;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        gMarioState->pos[2] = o->oPosZ;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        o->oFaceAngleYaw = gMarioState->faceAngle[1];
src/game/behaviors/tilting_inverted_pyramid.inc.c:    if (o->oAction == 0) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:        if (o->oForwardVel < 90.0f) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oForwardVel += 1.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        if (o->oPosX < o->oHomeX-((f32)(o->oBehParams2ndByte)*3200.0f)) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oAction = 1;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oTimer = 0;
src/game/behaviors/tilting_inverted_pyramid.inc.c:    if (o->oAction == 1) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:        if (o->oForwardVel > 0.0f) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oForwardVel -= 2.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            if (o->oTimer > 200) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oTimer = 0;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oAction = 2;
src/game/behaviors/tilting_inverted_pyramid.inc.c:    if (o->oAction == 2) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:        if (o->oForwardVel > -90.0f) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oForwardVel -= 1.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        if (o->oPosX > o->oHomeX) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oAction = 3;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oTimer = 0;
src/game/behaviors/tilting_inverted_pyramid.inc.c:    if (o->oAction == 3) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:        if (o->oForwardVel < 0.0f) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oForwardVel += 2.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            if (o->oTimer > 200) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oTimer = 0;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oAction = 0;
src/game/behaviors/tilting_inverted_pyramid.inc.c:    switch (o->oAction) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oAction = 1;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        switch (o->oBehParams2ndByte) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:            if (o->oTimer < 30) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oPosY += 15.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        if ((potentialcrate->oPosZ < o->oPosZ+50.0f)&&(potentialcrate->oPosZ > o->oPosZ-50.0f)&&(lateral_dist_between_objects(o,potentialcrate) < 700.0f)) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:    if (o->oBehParams2ndByte == 1) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:    if (triggerd != o->oAction) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:        o->oAction = triggerd;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        if (o->oPosY < o->oHomeY+500.0f) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oPosY += 30.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        if (o->oPosY > o->oHomeY+crateblockaddition) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oPosY -= 30.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oPosY = o->oHomeY+crateblockaddition;
src/game/behaviors/tilting_inverted_pyramid.inc.c:    o->oDontInertia = TRUE;
src/game/behaviors/tilting_inverted_pyramid.inc.c:    if (o->oAction == 0) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:        o->oAction = 2;
src/game/behaviors/tilting_inverted_pyramid.inc.c:    if (o->oAction == 2) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:        if (o->oDistanceToMario > 4000.0f) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oAction = 3;
src/game/behaviors/tilting_inverted_pyramid.inc.c:    if (o->oAction == 3) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:        if (o->oDistanceToMario < 4000.0f) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oAction = 0;
src/game/behaviors/tilting_inverted_pyramid.inc.c:    if (o->oAction == 1) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:        if (o->parentObj->oAction == 3) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:        obj_scale(o,scatable[o->oBehParams2ndByte]);
src/game/behaviors/tilting_inverted_pyramid.inc.c:        o->oForwardVel = veltable[o->oBehParams2ndByte]*2;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        if (o->oTimer > 99) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oForwardVel = 0;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        if (o->oTimer > 120) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:            obj_scale(o,scatable[o->oBehParams2ndByte]);
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oForwardVel = veltable[o->oBehParams2ndByte]*(-2);
src/game/behaviors/tilting_inverted_pyramid.inc.c:        if (o->oTimer > 219) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oForwardVel = 0;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        if (o->oTimer > 240) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oTimer = 0;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oPosX = o->oHomeX;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oPosY = o->oHomeY;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oPosZ = o->oHomeZ;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        if (o->parentObj->oBehParams2ndByte == 0) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oVelY = o->oForwardVel;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oPosY += o->oVelY;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        o->oVelX = 0;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        o->oVelZ = 0;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        o->oPosZ -= 90.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        if (o->oPosZ < o->oHomeZ - 16384.0f) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oPosZ += 16384.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:    if ((o->oPosZ < 15000)&&(o->oPosZ > -14000)&&(o->oBehParams2ndByte < 2)) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:    if (o->oBehParams2ndByte == 2) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:        o->oPosX = sinf(o->oTimer*10)*500.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:    if (o->oBehParams2ndByte == 1) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:        o->oForwardVel = 130.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        if (o->oPosZ < -32768.0f) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oPosZ = 32768.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        if (o->oHealth != 1) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oHealth = 1;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->prevObj = spawn_object(o,MODEL_RED_COIN, bhvRedCoin);
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->prevObj->prevObj = o;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        if (o->prevObj != NULL) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->prevObj->oPosX = o->oPosX;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->prevObj->oPosY = o->oPosY + 800.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->prevObj->oPosZ = o->oPosZ+1000.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:    if (o->oBehParams2ndByte == 0) {//forwardwash truck
src/game/behaviors/tilting_inverted_pyramid.inc.c:        switch(o->oAction) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oAction ++;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oHealth = 70;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oForwardVel = 8.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                if (o->oTimer > o->oHealth) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:                    o->oHealth -= 4;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                    if (o->oHealth < 35) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:                        o->oHealth = 35;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                    o->oTimer = 0;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                    o->prevObj = spawn_object(o,0xF8, bhvBadSign);
src/game/behaviors/tilting_inverted_pyramid.inc.c:                    o->prevObj->oPosZ = 32768.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                    o->prevObj->oFaceAngleYaw = 0;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                if (o->oPosZ > o->oHomeZ + 5000.0f) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:                    o->oForwardVel = 0;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                    o->oAction ++;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oForwardVel = 0;
src/game/behaviors/tilting_inverted_pyramid.inc.c:    switch(o->oAction) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:        o->oHomeX = find_floor(o->oPosX, o->oPosY, o->oPosZ, &sp24);
src/game/behaviors/tilting_inverted_pyramid.inc.c:        o->oAction++;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        o->oFaceAngleRoll = 0x7FFF;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        o->header.gfx.node.flags |= GRAPH_RENDER_INVISIBLE;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        o->oVelY -= 2.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        o->oPosY += o->oVelY;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        if (o->oFaceAngleRoll < 0x7FFF) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oFaceAngleRoll += 0x0FFF;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oFaceAngleRoll = 0x7FFF;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        if (o->oPosY < o->oHomeX) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->header.gfx.node.flags |= GRAPH_RENDER_INVISIBLE;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oAction ++;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oTimer = 0;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oPosY = o->oHomeX;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oVelY = 0;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            if (o->oDistanceToMario > 2500.0f) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oTimer = 0;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            if (o->oTimer > 30) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oHomeZ = o->oPosY;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                while(o->oHomeZ < o->oHomeY) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:                    o->oVelY += 1.5;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                    o->oHomeZ += o->oVelY;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oAction ++;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oFaceAngleRoll = 0x0;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->header.gfx.node.flags &= ~GRAPH_RENDER_INVISIBLE;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oPosY += o->oVelY;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oVelY -= 2.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            if (o->oVelY < 0.0f) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oAction = 1;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        o->oPosZ -= 90.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        if (o->oPosZ < -16384.0f) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:    switch(o->oAction) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:        if ((o->oDistanceToMario < 400.0f)&&(gMarioState->numStars > -1)) {//9
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oAction ++;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oTimer = 0;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oPosY += 10.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            if (o->oTimer > 35) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oAction ++;
src/game/behaviors/tilting_inverted_pyramid.inc.c:    if ((o->oDistanceToMario < 600.0f)&&(gMarioState->BadAppleActivate == FALSE)) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:    if (o->oBehParams2ndByte) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:        o->oMoveAngleYaw = sins(o->oTimer * 0x400) * 2000;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        o->oMoveAngleYaw = coss(o->oTimer * 0x400) * 2000;
src/game/behaviors/tilting_inverted_pyramid.inc.c:    if (o->oAction == 0) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:        o->oAction++;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        if ((o->oTimer > 60+(gMarioState->BossHealth*100))&&(suct_spawn > 0)&&(gMarioState->EA_ACTIVE < (6-gMarioState->BossHealth))) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oTimer = 0;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        if (o->oTimer > 60) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oTimer = 0;
src/game/behaviors/tilting_inverted_pyramid.inc.c:    if (o->oDistanceToMario < (o->oBehParams2ndByte*400.0f)) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:    o->oDontFallDamage = TRUE;
src/game/behaviors/tilting_inverted_pyramid.inc.c:    o->oPosY = o->oHomeY + (sins(o->oTimer*5000) * o->oVelY);
src/game/behaviors/tilting_inverted_pyramid.inc.c:    o->oVelY *= 0.95f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oTimer = 0;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oVelY = 50.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:    //o->oAnimState = 1;
src/game/behaviors/tilting_inverted_pyramid.inc.c:    o->oFaceAngleYaw = approach_s16_asymptotic(o->oFaceAngleYaw,o->oMoveAngleYaw,4);
src/game/behaviors/tilting_inverted_pyramid.inc.c:    switch (o->oAction) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:        o->oAction = 1;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        o->oPosY += o->oVelY;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        o->oVelY -= 2.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        o->oForwardVel = 30.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        if (o->oPosY < o->oHomeY) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oVelY = 20.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oPosY = o->oHomeY;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oMoveAngleYaw = random_u16();
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oMoveAngleYaw = obj_angle_to_object(o,post);
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oMoveAngleYaw = o->oAngleToMario;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            //o->oPosY = gMarioState->pos[1];
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oVelY = gMarioState->vel[1];
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oForwardVel = 60.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        o->oPosX += sins(o->oMoveAngleYaw) * o->oForwardVel;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        o->oPosZ += coss(o->oMoveAngleYaw) * o->oForwardVel;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oAction = 3;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        if (o->oDistanceToMario < 400.0f) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oAction = 2;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        o->oPosY += o->oVelY;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        o->oVelY -= 2.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        if (o->oPosY < o->oHomeY) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oPosY = o->oHomeY;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oVelY = 0.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        if (o->oTimer < 15) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:            gMarioState->faceAngle[1] = o->oAngleToMario;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            gMarioState->pos[1] = o->oPosY+150.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            gMarioState->pos[0] = o->oPosX + sins(o->oMoveAngleYaw) * 300.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            gMarioState->pos[2] = o->oPosZ + coss(o->oMoveAngleYaw) * 300.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        switch(o->oTimer) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oAction = 1;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oPosY += o->oVelY;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oVelY -= 2.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            if (o->oPosY < o->oHomeY) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oPosY = o->oHomeY;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oVelY = 0.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:    switch (o->oAction) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oAction ++;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            obj_scale(o,1.0f - ((f32)o->oTimer)/50.0f);
src/game/behaviors/tilting_inverted_pyramid.inc.c:            if (o->oTimer > 50) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:    o->oPosX = sins(o->oMoveAngleYaw) * 15900.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:    o->oPosZ = coss(o->oMoveAngleYaw) * 15900.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:    o->oMoveAngleYaw += 0x50;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oVelX = 5000.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:    o->oFaceAngleRoll = sins(o->oTimer*5000) * o->oVelX;
src/game/behaviors/tilting_inverted_pyramid.inc.c:    o->oVelX *= 0.95f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:    o->oInteractStatus = 0;
src/game/behaviors/tilting_inverted_pyramid.inc.c:    switch(o->oAction) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:        o->oAction++;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        o->oVelX = 0;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        o->oHomeY = o->oPosY;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        o->oHomeX = 0.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        o->oHomeZ = 0.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        o->oPosY -= 5000.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        o->oVelY = 140.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        o->oPosY += o->oVelY;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        o->oVelY -= 2.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        if (o->oVelY < 0) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oAction++;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oHomeY = o->oPosY;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        o->oFaceAngleYaw = o->oMoveAngleYaw+0x4000;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oFaceAngleYaw = approach_s16_asymptotic(o->oFaceAngleYaw,o->oMoveAngleYaw+0x4000,4);
src/game/behaviors/tilting_inverted_pyramid.inc.c:            if ((gMarioState->BossHealth < 1)&&(o->oTimer > 25)) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oFaceAnglePitch -= 0x50;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oAction = 4;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            if ((o->oTimer%(24+gMarioState->BossHealth) == 0)&&(o->oTimer > 40)&&(o->oTimer < 160)) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:            if (o->oTimer > 260) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oAction++;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            if (o->oTimer > 30) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oPosX += sins(o->oMoveAngleYaw) * (100.0f-(f32)(gMarioState->BossHealth*5));
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oPosZ += coss(o->oMoveAngleYaw) * (100.0f-(f32)(gMarioState->BossHealth*5));
src/game/behaviors/tilting_inverted_pyramid.inc.c:                    o->oMoveAngleYaw = cur_obj_angle_to_home()+0x8000;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                    o->oAction = 2;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oMoveAngleYaw = o->oFaceAngleYaw;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oFaceAngleYaw = approach_s16_asymptotic(o->oFaceAngleYaw,o->oAngleToMario,4);
src/game/behaviors/tilting_inverted_pyramid.inc.c:            if (o->oTimer < 120) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oFaceAnglePitch -= 0x50;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oPosY -= 10.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            if (o->oTimer == 250) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:    switch(o->oAction) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oPosY -= 40.0f-(gMarioState->BossHealth*3);
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oFaceAnglePitch += 0x100;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oFaceAngleRoll += 0x200;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oFaceAngleYaw += 0x300;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            if (o->oDistanceToMario < 125.0f) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:            if (o->oPosY < o->oHomeY+20.0f) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->header.gfx.sharedChild = gLoadedGraphNodes[MODEL_BBH_HAUNTED_DOOR];
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oFaceAnglePitch = 0;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oFaceAngleRoll = 0;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oAction++;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oPosY = o->oHomeY + 5.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            if (o->oTimer < 180-(gMarioState->BossHealth*4)) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:                obj_scale(o,(f32)(o->oTimer)/3.0f);
src/game/behaviors/tilting_inverted_pyramid.inc.c:            if (o->oTimer > 1800) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:    o->header.gfx.node.flags |= GRAPH_RENDER_INVISIBLE;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        o->header.gfx.node.flags &= ~GRAPH_RENDER_INVISIBLE;
src/game/behaviors/tilting_inverted_pyramid.inc.c:    if (cur_obj_was_attacked_or_ground_pounded() && (o->oTimer > 30)) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:        ball->oPosX += sins(o->oMoveAngleYaw) * 300.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        ball->oPosZ += coss(o->oMoveAngleYaw) * 300.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        o->oTimer = 0;
src/game/behaviors/tilting_inverted_pyramid.inc.c:    o->oPosX += sins(o->oMoveAngleYaw) * 130.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:    o->oPosZ += coss(o->oMoveAngleYaw) * 130.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:    o->oFaceAngleRoll += 0x300;
src/game/behaviors/tilting_inverted_pyramid.inc.c:    if (o->oTimer > 400) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:    switch(o->oAction) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oAction = 1;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oFaceAngleYaw = random_u16();
src/game/behaviors/tilting_inverted_pyramid.inc.c:                //    o->header.gfx.sharedChild = gLoadedGraphNodes[0xF2];
src/game/behaviors/tilting_inverted_pyramid.inc.c:                //    o->header.gfx.sharedChild = gLoadedGraphNodes[0xF3];
src/game/behaviors/tilting_inverted_pyramid.inc.c:                //    o->header.gfx.sharedChild = gLoadedGraphNodes[0xF4];
src/game/behaviors/tilting_inverted_pyramid.inc.c:        if ((o->oDistanceToMario<70.0f)&&(!gMarioState->MessHeld)) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oAction =2;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oPosX = gMarioState->pos[0];
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oPosY = gMarioState->pos[1]+200.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oPosZ = gMarioState->pos[2];
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oAction = 3;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oPosX = obj->oPosX;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oPosY = obj->oPosY+(gMarioState->SockCollection*30.0f);
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oPosZ = obj->oPosZ;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        //if (o->oTimer > 30) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:    switch(o->oAction) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oPosY -= 300.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oAction = 1;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oAction = 2;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            if (o->oPosY < o->oHomeY) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oPosY += 15.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oPosY = o->oHomeY;
src/game/behaviors/tilting_inverted_pyramid.inc.c:    switch(o->oAction) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oFaceAngleYaw = 0x2000;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oAction = 1;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oAction = 2;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            if (o->oPosY < o->oHomeY+600.0f) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oPosY += 15.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oPosY = o->oHomeY+600.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oAction = 3;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            if ((o->oFaceAngleYaw != 0)&&(o->oTimer>30)) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oFaceAngleYaw -= 0x100;
src/game/behaviors/tilting_inverted_pyramid.inc.c:    o->oInteractStatus = 0;
src/game/behaviors/tilting_inverted_pyramid.inc.c:    if (o->oPosY < o->oHomeY-100.0f) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:        o->oPosX = o->oHomeX;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        o->oPosY = o->oHomeY;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        o->oPosZ = o->oHomeZ;
src/game/behaviors/tilting_inverted_pyramid.inc.c:    switch(o->oAction) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oAction = 1;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oForwardVel = 0.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oMoveAngleYaw = approach_s16_asymptotic(o->oMoveAngleYaw,o->oAngleToMario,4);
src/game/behaviors/tilting_inverted_pyramid.inc.c:            if (o->oTimer%30 == 0) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:            if (o->oTimer > 90) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oAction = 2;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oForwardVel = 30.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oForwardVel = charge;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                    o->oAction = 3;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                    o->prevObj = obj;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                    o->oForwardVel = 0.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                        o->oAction = 4;    
src/game/behaviors/tilting_inverted_pyramid.inc.c:            if (o->oMoveFlags & OBJ_MOVE_HIT_EDGE) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oAction = 1;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            if (o->oTimer > 30) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oAction = 1;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->prevObj->oFaceAnglePitch -= 0x120;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            if (o->oTimer == 50) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oBehParams = 0x06000000;
src/game/behaviors/tilting_inverted_pyramid.inc.c:    if (o->oDistanceToMario < 40.0f) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:    if ((o->oAction==0) && (cur_obj_update_dialog_with_cutscene(2, 1, CUTSCENE_DIALOG, DIALOG_056))) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:        o->oAction = 3;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        o->oTimer = 0;
src/game/behaviors/tilting_inverted_pyramid.inc.c:    if (o->oAction == 3) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:        if (o->oTimer > 60) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oAction = 2;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        o->oPosY = find_floor(o->oPosX, o->oPosY, o->oPosZ, &sp24);
src/game/behaviors/tilting_inverted_pyramid.inc.c:    if (o->oAction != 2) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:    if ((gMarioState->posDelay[0]!=o->oPosX)&&(gMarioState->posDelay[2]!=o->oPosZ)) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:        o->oMoveAngleYaw = -atan2s(gMarioState->posDelay[0]-o->oPosX,gMarioState->posDelay[2]-o->oPosZ);
src/game/behaviors/tilting_inverted_pyramid.inc.c:    o->oPosX = gMarioState->posDelay[0];
src/game/behaviors/tilting_inverted_pyramid.inc.c:    o->oPosY = gMarioState->posDelay[1];
src/game/behaviors/tilting_inverted_pyramid.inc.c:    o->oPosZ = gMarioState->posDelay[2];
src/game/behaviors/tilting_inverted_pyramid.inc.c:    if (o->oDistanceToMario < 40.0f) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:        o->oAction = 1;
src/game/behaviors/tilting_inverted_pyramid.inc.c:    amount = (u8)(((f32)(o->oTimer%140)/90)*100);
src/game/behaviors/tilting_inverted_pyramid.inc.c:    if (o->oTimer%140 > 90) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:        gMarioState->pos[0] -= sins(o->oAngleToMario)*10.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        gMarioState->pos[2] -= coss(o->oAngleToMario)*10.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:    if (o->oBehParams2ndByte==0) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:        o->oPosX = o->oHomeX + sins((o->oTimer*200)+o->oMoveAngleYaw)*400.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        o->oPosY = o->oHomeY + coss((o->oTimer*200)+o->oMoveAngleYaw)*400.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        o->oPosX = o->oHomeX + sins((-o->oTimer*200)+o->oMoveAngleYaw)*400.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        o->oPosY = o->oHomeY + coss((-o->oTimer*200)+o->oMoveAngleYaw)*400.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        obj->oBehParams2ndByte = o->oBehParams2ndByte;
src/game/behaviors/tilting_inverted_pyramid.inc.c:    if ((o->oBehParams2ndByte==1)&&(o->oAction=0)){
src/game/behaviors/tilting_inverted_pyramid.inc.c:        o->oAction = 1;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        o->oTimer = 45;
src/game/behaviors/tilting_inverted_pyramid.inc.c:    if ((o->oTimer > 90)&&(o->oDistanceToMario < 4000.0f)) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:        o->oTimer = 0;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        obj->oBehParams2ndByte = o->oBehParams2ndByte;
src/game/behaviors/tilting_inverted_pyramid.inc.c:    if ((o->oDistanceToMario < 90.0f)&&(gPlayer1Controller->buttonDown & Z_TRIG)&&(o->oAction==0)) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oAction = 1;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            gMarioState->pos[0] = o->oPosX;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oAction = 1;
src/game/behaviors/tilting_inverted_pyramid.inc.c:    switch(o->oAction) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oHomeY = find_floor(o->oPosX, o->oPosY, o->oPosZ, &sp24);
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oHomeX = o->oPosY;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oAction = 1;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            if ((gMarioState->pos[0] > o->oPosX-200.0f)&&(gMarioState->pos[0] < o->oPosX+200.0f)&&(gMarioState->pos[1] < o->oPosY+300.0f)) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oAction = 2;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oGravity = 0.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oGravity -= 4.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oPosY += o->oGravity;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            if (o->oPosY < o->oHomeY) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oPosY = o->oHomeY;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oAction = 3;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                if (o->oDistanceToMario < 1000.0f) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:            if (o->oTimer > 30) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oAction = 4;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oPosY += 8.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            if (o->oPosY > o->oHomeX) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oPosY = o->oHomeX;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oAction = 1;
src/game/behaviors/tilting_inverted_pyramid.inc.c:    switch(o->oAction) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oAction = 1;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oPosY -= (f32)(o->oBehParams2ndByte*150);
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oPosY -= 7.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            if (o->oPosY < -678.0f) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oAction = 3;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oPosY += 4.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            if (o->oPosY > o->oHomeY) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oAction = 1;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oPosZ = o->oHomeZ;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            if (o->oTimer > 5) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oPosY = o->oHomeY - 150.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oPosZ = o->oHomeZ - 150.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oAction = 2;
src/game/behaviors/tilting_inverted_pyramid.inc.c:    if (o->oAction == 1) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:        if (o->oTimer > 5) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:    if ((o->oDistanceToMario < 350.0f)&&(o->oAction == 0)&&(gMarioState->MaskChase)) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:        o->oAction = 1;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        o->oTimer = 0;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        o->oPosY += 100.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        spawn_default_star(o->oPosX,o->oPosY,o->oPosZ);
src/game/behaviors/tilting_inverted_pyramid.inc.c:    switch(o->oAction) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:            cur_obj_scale((f32)(o->oTimer)/(30.0f));
src/game/behaviors/tilting_inverted_pyramid.inc.c:            if (o->oTimer > 29) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oAction = 1;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oAction = 2;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oPosX = o->oHomeX + (f32)(o->oTimer%2==0)*4.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            if (o->oTimer > 30) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oAction = 3;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            if (o->oVelY > -6.0f) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oVelY -= 1.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oPosY += o->oVelY;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            if (o->oTimer > 120) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oAction = 4;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->header.gfx.node.flags |= GRAPH_RENDER_INVISIBLE;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            if (o->oTimer > 5) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oVelY = 0.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oAction = 0;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oPosY = o->oHomeY;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oPosX = o->oHomeX;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->header.gfx.node.flags &= ~GRAPH_RENDER_INVISIBLE;
src/game/behaviors/tilting_inverted_pyramid.inc.c:    u8 behparam1 = (o->oBehParams >> 24);
src/game/behaviors/tilting_inverted_pyramid.inc.c:    u16 pl = pathlengths[o->oBehParams2ndByte];
src/game/behaviors/tilting_inverted_pyramid.inc.c:    switch(o->oAction) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oPosX = Path[o->oTimer%pl][o->oBehParams2ndByte][0];
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oPosY = Path[o->oTimer%pl][o->oBehParams2ndByte][1];
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oPosZ = Path[o->oTimer%pl][o->oBehParams2ndByte][2];
src/game/behaviors/tilting_inverted_pyramid.inc.c:            a = Path[(o->oTimer+1)%pl][o->oBehParams2ndByte][2] - o->oPosZ;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            b = Path[(o->oTimer+1)%pl][o->oBehParams2ndByte][0] - o->oPosX;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oFaceAngleYaw = atan2s(a,b);
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oAction = 2;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oAction = 1;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oPosX = Path[o->oTimer%pl][o->oBehParams2ndByte][0];
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oPosY = Path[o->oTimer%pl][o->oBehParams2ndByte][1];
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oPosZ = Path[o->oTimer%pl][o->oBehParams2ndByte][2];
src/game/behaviors/tilting_inverted_pyramid.inc.c:            a = Path[(o->oTimer+1)%pl][o->oBehParams2ndByte][2] - o->oPosZ;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            b = Path[(o->oTimer+1)%pl][o->oBehParams2ndByte][0] - o->oPosX;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oFaceAngleRoll = (atan2s(a,b)-o->oFaceAngleYaw)*2;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oFaceAngleYaw = atan2s(a,b);
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oFaceAnglePitch = atan2s( sqrtf((a*a) + (b*b)) ,(-Path[(o->oTimer+1)%pl][o->oBehParams2ndByte][1]) - (-o->oPosY));
src/game/behaviors/tilting_inverted_pyramid.inc.c:            if ((behparam1)&&(o->oTimer>pl)) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oTimer = 0;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oAction = 2;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            if (o->oTimer > 60) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:                    o->oAction = 1;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                    o->oTimer = 0;
src/game/behaviors/tilting_inverted_pyramid.inc.c:    u8 behparam1 = (o->oBehParams >> 24);
src/game/behaviors/tilting_inverted_pyramid.inc.c:    u16 pl = pathlengths[o->oBehParams2ndByte];
src/game/behaviors/tilting_inverted_pyramid.inc.c:    o->oHomeX = o->oPosX;
src/game/behaviors/tilting_inverted_pyramid.inc.c:    o->oHomeY = o->oPosY;
src/game/behaviors/tilting_inverted_pyramid.inc.c:    o->oHomeZ = o->oPosZ;
src/game/behaviors/tilting_inverted_pyramid.inc.c:    o->oPosX = Path[(o->oTimer+offset)%pl][o->oBehParams2ndByte][0];
src/game/behaviors/tilting_inverted_pyramid.inc.c:    o->oPosY = Path[(o->oTimer+offset)%pl][o->oBehParams2ndByte][1]-300.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:    o->oGraphYOffset = 300.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:    o->oPosZ = Path[(o->oTimer+offset)%pl][o->oBehParams2ndByte][2];
src/game/behaviors/tilting_inverted_pyramid.inc.c:    bro[0] = o->oHomeX - o->oPosX;
src/game/behaviors/tilting_inverted_pyramid.inc.c:    bro[1] = o->oHomeY - o->oPosY;
src/game/behaviors/tilting_inverted_pyramid.inc.c:    bro[2] = o->oHomeZ - o->oPosZ;
src/game/behaviors/tilting_inverted_pyramid.inc.c:    a = Path[(o->oTimer+1+offset)%pl][o->oBehParams2ndByte][2] - o->oPosZ;
src/game/behaviors/tilting_inverted_pyramid.inc.c:    b = Path[(o->oTimer+1+offset)%pl][o->oBehParams2ndByte][0] - o->oPosX;
src/game/behaviors/tilting_inverted_pyramid.inc.c:    o->oFaceAngleYaw = atan2s(a,b);
src/game/behaviors/tilting_inverted_pyramid.inc.c:    o->oFaceAnglePitch += (s16)(dist*30.0f);
src/game/behaviors/tilting_inverted_pyramid.inc.c:    o->oInteractStatus = 0;
src/game/behaviors/tilting_inverted_pyramid.inc.c:    switch (o->oAction) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:        o->oHealth = 500;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        o->oAction = 1;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oHealth += 1;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oHealth = 500;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            Rope_Progress += o->oHealth;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                        spawn_default_star(o->oPosX,o->oPosY,o->oPosZ-400.0f);
src/game/behaviors/tilting_inverted_pyramid.inc.c:                fires[i]->oPosX = (o->oHomeX - 472.0f) + (i*118);
src/game/behaviors/tilting_inverted_pyramid.inc.c:                fires[i]->oPosY = o->oHomeY + (sins(Rope_Progress-0x3FFF)*200.0f*sinlocation);
src/game/behaviors/tilting_inverted_pyramid.inc.c:                fires[i]->oPosZ = o->oHomeZ + (coss(Rope_Progress-0x3FFF)*200.0f*sinlocation);
src/game/behaviors/tilting_inverted_pyramid.inc.c:    switch(o->oAction) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oHealth = 5;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oAction = 1;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            if (o->oTimer%(25+gMarioState->BossHealth)==0) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:            if (gMarioState->pos[0] < o->oPosX+300.0f) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:                    o->oHomeX -= 2504.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                    o->oAction = 2;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                    o->oVelY = 20.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                    spawn_default_star(o->oPosX-900.0f,o->oPosY+200.0f,o->oPosZ);
src/game/behaviors/tilting_inverted_pyramid.inc.c:                    o->oAction = 3; //dead
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oPosX -= 60.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            if (o->oPosX < o->oHomeX) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oAction = 1;
src/game/behaviors/tilting_inverted_pyramid.inc.c:    o->oVelY -= 2.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:    o->oPosY += o->oVelY;
src/game/behaviors/tilting_inverted_pyramid.inc.c:    if (o->oPosY < o->oHomeY) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:        o->oPosY = o->oHomeY;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        o->oVelY = 0.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:    o->oAnimState = 0;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        o->oAnimState = 1;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        o->oVelY = lerp(o->oVelY,-40.0f,0.1f);
src/game/behaviors/tilting_inverted_pyramid.inc.c:        o->oVelY = lerp(o->oVelY,0.0f,0.1f);
src/game/behaviors/tilting_inverted_pyramid.inc.c:    o->oPosY = o->oHomeY + (sins(o->oTimer*400)*30.0f) + o->oVelY;
src/game/behaviors/tilting_inverted_pyramid.inc.c:    if (o->oBehParams2ndByte==1) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:    switch(o->oAction) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oAction = 1;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                skewbox[(o->oBehParams2ndByte*3)+i] = spawn_object(o,MODEL_NONE,bhvBewerHitbox);
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oPosX += -20.0f*reverse;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            if (o->oTimer%10 == 5) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:            if (o->oTimer > 90) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oAction = 2;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            if (o->oTimer > 40) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oAction = 3;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oPosX += 40.0f*reverse;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oFaceAnglePitch += 0x400;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            if (o->oTimer > 45) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oAction = 4;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oPosX = o->oHomeX;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            if (o->oTimer > 40) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oAction = 1;
src/game/behaviors/tilting_inverted_pyramid.inc.c:        skewbox[(o->oBehParams2ndByte*3)+i]->oPosX = o->oPosX+(700.0f*reverse*(f32)i);
src/game/behaviors/tilting_inverted_pyramid.inc.c:    u16 offset = (o->oTimer+o->oBehParams2ndByte)%199;
src/game/behaviors/tilting_inverted_pyramid.inc.c:    o->oPosX = Path[offset][pathid][0];
src/game/behaviors/tilting_inverted_pyramid.inc.c:    o->oPosY = Path[offset][pathid][1];
src/game/behaviors/tilting_inverted_pyramid.inc.c:    o->oPosZ = Path[offset][pathid][2];
src/game/behaviors/tilting_inverted_pyramid.inc.c:    switch(o->oAction) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oPosY += o->oVelY;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oVelY -= 2.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            if (o->oTimer > 60) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:    switch(o->oAction) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oAction = 1;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oAction = 2;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oHomeX = 0.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oHomeY = 0.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oHomeZ = 0.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oPosY += 30.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oVelY = 85.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oForwardVel = 0.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oForwardVel = 80.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oMoveAngleYaw = cur_obj_angle_to_home();
src/game/behaviors/tilting_inverted_pyramid.inc.c:            if (o->oMoveFlags & OBJ_MOVE_ON_GROUND) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oAction = 3;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oHomeY = o->oPosY;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oAnimState = 1;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            if (o->oHomeY+500.0f > o->oPosY) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oPosY+= 10.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            if (o->oPosX < gMarioState->pos[0]+20.0f) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oPosX += 10.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            if (o->oPosX > gMarioState->pos[0]-20.0f) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oPosX -= 10.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            if (o->oPosZ < gMarioState->pos[2]+20.0f) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oPosZ += 10.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            if (o->oPosZ > gMarioState->pos[2]-20.0f) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oPosZ -= 10.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            if (o->oTimer > 100) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oAction = 4;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            if (o->oTimer%2==0) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oPosX -= 8.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oPosX += 8.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            if (o->oTimer > 30) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oAction = 5;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oAnimState = 2;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oVelY = -10.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            o->oForwardVel = 0.0f;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            if (o->oMoveFlags & OBJ_MOVE_ON_GROUND) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:                if (o->oFloor->obj != NULL) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oAction = 6;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oAnimState = 1;
src/game/behaviors/tilting_inverted_pyramid.inc.c:            if (o->oTimer > 30) {
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oAnimState = 0;
src/game/behaviors/tilting_inverted_pyramid.inc.c:                o->oAction = 3;
src/game/behaviors/tower_door.inc.c:    if (o->oTimer == 0)
src/game/behaviors/tower_door.inc.c:        o->oMoveAngleYaw -= 0x4000;
src/game/behaviors/tower_platform.inc.c:    if (o->parentObj->oAction == 3)
src/game/behaviors/tower_platform.inc.c:    switch (o->oAction) {
src/game/behaviors/tower_platform.inc.c:                o->oAction++;
src/game/behaviors/tower_platform.inc.c:            if (o->oTimer > 140)
src/game/behaviors/tower_platform.inc.c:                o->oAction++;
src/game/behaviors/tower_platform.inc.c:                o->oPosY += 5.0f;
src/game/behaviors/tower_platform.inc.c:            if (o->oTimer > 60)
src/game/behaviors/tower_platform.inc.c:                o->oAction++;
src/game/behaviors/tower_platform.inc.c:            if (o->oTimer > 140)
src/game/behaviors/tower_platform.inc.c:                o->oAction = 0;
src/game/behaviors/tower_platform.inc.c:                o->oPosY -= 5.0f;
src/game/behaviors/tower_platform.inc.c:    if (o->parentObj->oAction == 3)
src/game/behaviors/tower_platform.inc.c:    s32 sp24 = o->oPlatformUnk110 / o->oPlatformUnk10C;
src/game/behaviors/tower_platform.inc.c:    switch (o->oAction) {
src/game/behaviors/tower_platform.inc.c:            if (o->oTimer > sp24)
src/game/behaviors/tower_platform.inc.c:                o->oAction++;
src/game/behaviors/tower_platform.inc.c:            o->oForwardVel = -o->oPlatformUnk10C;
src/game/behaviors/tower_platform.inc.c:            if (o->oTimer > sp24)
src/game/behaviors/tower_platform.inc.c:                o->oAction = 0;
src/game/behaviors/tower_platform.inc.c:            o->oForwardVel = o->oPlatformUnk10C;
src/game/behaviors/tower_platform.inc.c:    o->oPosX += o->oVelX;
src/game/behaviors/tower_platform.inc.c:    o->oPosZ += o->oVelZ;
src/game/behaviors/tower_platform.inc.c:    if (o->parentObj->oAction == 3)
src/game/behaviors/tower_platform.inc.c:    yaw = o->oPlatformSpawnerUnkF4 * o->oPlatformSpawnerUnkFC + o->oPlatformSpawnerUnkF8;
src/game/behaviors/tower_platform.inc.c:    platform->oPosX += o->oPlatformSpawnerUnk100 * sins(yaw);
src/game/behaviors/tower_platform.inc.c:    platform->oPosY += 100 * o->oPlatformSpawnerUnkF4;
src/game/behaviors/tower_platform.inc.c:    platform->oPosZ += o->oPlatformSpawnerUnk100 * coss(yaw);
src/game/behaviors/tower_platform.inc.c:    platform->oPlatformUnk110 = o->oPlatformSpawnerUnk104;
src/game/behaviors/tower_platform.inc.c:    platform->oPlatformUnk10C = o->oPlatformSpawnerUnk108;
src/game/behaviors/tower_platform.inc.c:    o->oPlatformSpawnerUnkF4++;
src/game/behaviors/tower_platform.inc.c:    o->oPlatformSpawnerUnkF4 = 0;
src/game/behaviors/tower_platform.inc.c:    o->oPlatformSpawnerUnkF8 = 0;
src/game/behaviors/tower_platform.inc.c:    o->oPlatformSpawnerUnkFC = 0x2000;
src/game/behaviors/tower_platform.inc.c:    o->oPlatformSpawnerUnk100 = 704.0f;
src/game/behaviors/tower_platform.inc.c:    o->oPlatformSpawnerUnk104 = 380.0f;
src/game/behaviors/tower_platform.inc.c:    o->oPlatformSpawnerUnk108 = 3.0f;
src/game/behaviors/tower_platform.inc.c:    o->oDistanceToMario = dist_between_objects(o, gMarioObject);
src/game/behaviors/tower_platform.inc.c:    switch (o->oAction) {
src/game/behaviors/tower_platform.inc.c:            if (marioY > o->oHomeY - 1000.0f)
src/game/behaviors/tower_platform.inc.c:                o->oAction++;
src/game/behaviors/tower_platform.inc.c:            o->oAction++;
src/game/behaviors/tower_platform.inc.c:            if (marioY < o->oHomeY - 1000.0f)
src/game/behaviors/tower_platform.inc.c:                o->oAction++;
src/game/behaviors/tower_platform.inc.c:            o->oAction = 0;
src/game/behaviors/tox_box.inc.c:    if (o->oDistanceToMario < 3000.0f)
src/game/behaviors/tox_box.inc.c:    o->oPosY = 99.41124 * sins((f32)(o->oTimer + 1) / 8 * 0x8000) + o->oHomeY + 3.0f;
src/game/behaviors/tox_box.inc.c:    o->oForwardVel = forwardVel;
src/game/behaviors/tox_box.inc.c:    o->oUnkC0 = a1;
src/game/behaviors/tox_box.inc.c:    o->oFaceAnglePitch += deltaPitch;
src/game/behaviors/tox_box.inc.c:    if ((s16) o->oFaceAnglePitch < 0)
src/game/behaviors/tox_box.inc.c:    o->oFaceAngleRoll += deltaRoll;
src/game/behaviors/tox_box.inc.c:    if (o->oTimer == 7) {
src/game/behaviors/tox_box.inc.c:        o->oAction = cur_obj_progress_direction_table();
src/game/behaviors/tox_box.inc.c:    o->oForwardVel = 0.0f;
src/game/behaviors/tox_box.inc.c:    if (o->oTimer == 0)
src/game/behaviors/tox_box.inc.c:    o->oPosY = o->oHomeY + 3.0f;
src/game/behaviors/tox_box.inc.c:    if (o->oTimer == 20)
src/game/behaviors/tox_box.inc.c:        o->oAction = cur_obj_progress_direction_table();
src/game/behaviors/tox_box.inc.c:    if (o->oTimer == 20)
src/game/behaviors/tox_box.inc.c:        o->oAction = cur_obj_progress_direction_table();
src/game/behaviors/tox_box.inc.c:    if (o->oTimer == 20)
src/game/behaviors/tox_box.inc.c:        o->oAction = cur_obj_progress_direction_table();
src/game/behaviors/tox_box.inc.c:    s8 *sp1C = D_8032F96C[o->oBehParams2ndByte];
src/game/behaviors/tox_box.inc.c:    o->oAction = cur_obj_set_direction_table(sp1C);
src/game/behaviors/treasure_chest.inc.c:    struct Object *sp34 = o->parentObj->parentObj;
src/game/behaviors/treasure_chest.inc.c:    switch (o->oAction) {
src/game/behaviors/treasure_chest.inc.c:            if (o->parentObj->oAction == 1)
src/game/behaviors/treasure_chest.inc.c:                o->oAction = 1;
src/game/behaviors/treasure_chest.inc.c:            if (o->oTimer == 0) {
src/game/behaviors/treasure_chest.inc.c:                    play_sound(SOUND_GENERAL_CLAM_SHELL1, o->header.gfx.cameraToObject);
src/game/behaviors/treasure_chest.inc.c:                    play_sound(SOUND_GENERAL_OPEN_CHEST, o->header.gfx.cameraToObject);
src/game/behaviors/treasure_chest.inc.c:            o->oFaceAnglePitch += -0x200;
src/game/behaviors/treasure_chest.inc.c:            if (o->oFaceAnglePitch < -0x4000) {
src/game/behaviors/treasure_chest.inc.c:                o->oFaceAnglePitch = -0x4000;
src/game/behaviors/treasure_chest.inc.c:                o->oAction++;
src/game/behaviors/treasure_chest.inc.c:                if (o->parentObj->oBehParams2ndByte != 4)
src/game/behaviors/treasure_chest.inc.c:                    spawn_orange_number(o->parentObj->oBehParams2ndByte, 0, -40, 0);
src/game/behaviors/treasure_chest.inc.c:            if (o->parentObj->oAction == 0)
src/game/behaviors/treasure_chest.inc.c:                o->oAction = 3;
src/game/behaviors/treasure_chest.inc.c:            o->oFaceAnglePitch += 0x800;
src/game/behaviors/treasure_chest.inc.c:            if (o->oFaceAnglePitch > 0) {
src/game/behaviors/treasure_chest.inc.c:                o->oFaceAnglePitch = 0;
src/game/behaviors/treasure_chest.inc.c:                o->oAction = 0;
src/game/behaviors/treasure_chest.inc.c:    switch (o->oAction) {
src/game/behaviors/treasure_chest.inc.c:            if (obj_check_if_facing_toward_angle(o->oMoveAngleYaw, gMarioObject->header.gfx.angle[1] + 0x8000, 0x3000)) {
src/game/behaviors/treasure_chest.inc.c:                if (is_point_within_radius_of_mario(o->oPosX, o->oPosY, o->oPosZ, 150)) {
src/game/behaviors/treasure_chest.inc.c:                    if (!o->parentObj->oTreasureChestUnkF8) {
src/game/behaviors/treasure_chest.inc.c:                        if (o->parentObj->oTreasureChestUnkF4 == o->oBehParams2ndByte) {
src/game/behaviors/treasure_chest.inc.c:                            o->parentObj->oTreasureChestUnkF4++;
src/game/behaviors/treasure_chest.inc.c:                            o->oAction = 1;
src/game/behaviors/treasure_chest.inc.c:                            o->parentObj->oTreasureChestUnkF4 = 1;
src/game/behaviors/treasure_chest.inc.c:                            o->parentObj->oTreasureChestUnkF8 = 1;
src/game/behaviors/treasure_chest.inc.c:                            o->oAction = 2;
src/game/behaviors/treasure_chest.inc.c:            if (o->parentObj->oTreasureChestUnkF8 == 1)
src/game/behaviors/treasure_chest.inc.c:                o->oAction = 0;
src/game/behaviors/treasure_chest.inc.c:            if (!is_point_within_radius_of_mario(o->oPosX, o->oPosY, o->oPosZ, 500)) {
src/game/behaviors/treasure_chest.inc.c:                o->parentObj->oTreasureChestUnkF8 = 0;
src/game/behaviors/treasure_chest.inc.c:                o->oAction = 0;
src/game/behaviors/treasure_chest.inc.c:    o->oInteractStatus = 0;
src/game/behaviors/treasure_chest.inc.c:    o->oTreasureChestUnkF4 = 1;
src/game/behaviors/treasure_chest.inc.c:    o->oTreasureChestUnkFC = 0;
src/game/behaviors/treasure_chest.inc.c:    switch (o->oAction) {
src/game/behaviors/treasure_chest.inc.c:            if (o->oTreasureChestUnkF4 == 5) {
src/game/behaviors/treasure_chest.inc.c:                o->oAction = 1;
src/game/behaviors/treasure_chest.inc.c:                    o->activeFlags = ACTIVE_FLAG_DEACTIVATED;
src/game/behaviors/treasure_chest.inc.c:    o->oTreasureChestUnkF4 = 1;
src/game/behaviors/treasure_chest.inc.c:    o->oTreasureChestUnkFC = 1;
src/game/behaviors/treasure_chest.inc.c:    switch (o->oAction) {
src/game/behaviors/treasure_chest.inc.c:            if (o->oTreasureChestUnkF4 == 5) {
src/game/behaviors/treasure_chest.inc.c:                o->oAction = 1;
src/game/behaviors/treasure_chest.inc.c:            if (o->oTimer == 60) {
src/game/behaviors/treasure_chest.inc.c:                o->oAction = 2;
src/game/behaviors/treasure_chest.inc.c:    o->oTreasureChestUnkF4 = 1;
src/game/behaviors/treasure_chest.inc.c:    o->oTreasureChestUnkFC = 0;
src/game/behaviors/treasure_chest.inc.c:    switch (o->oAction) {
src/game/behaviors/treasure_chest.inc.c:            if (o->oTreasureChestUnkF4 == 5) {
src/game/behaviors/treasure_chest.inc.c:                o->oAction = 1;
src/game/behaviors/treasure_chest.inc.c:            if (o->oTimer == 60) {
src/game/behaviors/treasure_chest.inc.c:                o->oAction = 2;
src/game/behaviors/tree_particles.inc.c:    if (o->oTimer == 0) {
src/game/behaviors/tree_particles.inc.c:        o->oAngleVelPitch = (random_float() - 0.5) * 0x1000;
src/game/behaviors/tree_particles.inc.c:        o->oAngleVelRoll = (random_float() - 0.5) * 0x1000;
src/game/behaviors/tree_particles.inc.c:        o->oTreeSnowOrLeafUnkF8 = 4;
src/game/behaviors/tree_particles.inc.c:        o->oTreeSnowOrLeafUnkFC = random_float() * 0x400 + 0x600;
src/game/behaviors/tree_particles.inc.c:    if (o->oPosY < o->oFloorHeight)
src/game/behaviors/tree_particles.inc.c:    if (o->oFloorHeight < -11000.0f)
src/game/behaviors/tree_particles.inc.c:    if (o->oTimer > 100)
src/game/behaviors/tree_particles.inc.c:    o->oFaceAnglePitch += o->oAngleVelPitch;
src/game/behaviors/tree_particles.inc.c:    o->oFaceAngleRoll += o->oAngleVelRoll;
src/game/behaviors/tree_particles.inc.c:    o->oVelY += -3.0f;
src/game/behaviors/tree_particles.inc.c:    if (o->oVelY < -8.0f)
src/game/behaviors/tree_particles.inc.c:        o->oVelY = -8.0f;
src/game/behaviors/tree_particles.inc.c:    if (o->oForwardVel > 0)
src/game/behaviors/tree_particles.inc.c:        o->oForwardVel -= 0.3;
src/game/behaviors/tree_particles.inc.c:        o->oForwardVel = 0;
src/game/behaviors/tree_particles.inc.c:    o->oPosX += sins(o->oMoveAngleYaw) * sins(o->oTreeSnowOrLeafUnkF4) * o->oTreeSnowOrLeafUnkF8;
src/game/behaviors/tree_particles.inc.c:    o->oPosZ += coss(o->oMoveAngleYaw) * sins(o->oTreeSnowOrLeafUnkF4) * o->oTreeSnowOrLeafUnkF8;
src/game/behaviors/tree_particles.inc.c:    o->oTreeSnowOrLeafUnkF4 += o->oTreeSnowOrLeafUnkFC;
src/game/behaviors/tree_particles.inc.c:    o->oPosY += o->oVelY;
src/game/behaviors/triplet_butterfly.inc.c:    butterflyNum = o->oBehParams2ndByte & TRIPLET_BUTTERFLY_BP_BUTTERFLY_NUM;
src/game/behaviors/triplet_butterfly.inc.c:    if (butterflyNum != 0 || o->oDistanceToMario < 200.0f) {
src/game/behaviors/triplet_butterfly.inc.c:            o->oTripletButterflySelectedButterfly = random_u16() % 3;
src/game/behaviors/triplet_butterfly.inc.c:        if (o->parentObj->oTripletButterflySelectedButterfly == o->oBehParams2ndByte) {
src/game/behaviors/triplet_butterfly.inc.c:            o->oTripletButterflyType = TRIPLET_BUTTERFLY_TYPE_SPAWN_1UP;
src/game/behaviors/triplet_butterfly.inc.c:        } else if (o->parentObj->oBehParams2ndByte & TRIPLET_BUTTERFLY_BP_NO_BOMBS) {
src/game/behaviors/triplet_butterfly.inc.c:            o->oTripletButterflyType = TRIPLET_BUTTERFLY_TYPE_NORMAL;
src/game/behaviors/triplet_butterfly.inc.c:        o->oAction = TRIPLET_BUTTERFLY_ACT_WANDER;
src/game/behaviors/triplet_butterfly.inc.c:        o->oTripletButterflyBaseYaw = o->oBehParams2ndByte * (0x10000 / 3);
src/game/behaviors/triplet_butterfly.inc.c:        o->oMoveAngleYaw = (s32)(o->oTripletButterflyBaseYaw + random_linear_offset(0, 0x5555));
src/game/behaviors/triplet_butterfly.inc.c:        o->oTripletButterflySpeed = random_linear_offset(15, 15);
src/game/behaviors/triplet_butterfly.inc.c:    if (o->oDistanceToMario > 1500.0f) {
src/game/behaviors/triplet_butterfly.inc.c:        approach_f32_ptr(&o->oTripletButterflySpeed, 8.0f, 0.5f);
src/game/behaviors/triplet_butterfly.inc.c:        if (o->oTimer < 60) {
src/game/behaviors/triplet_butterfly.inc.c:            o->oTripletButterflyTargetYaw = cur_obj_angle_to_home();
src/game/behaviors/triplet_butterfly.inc.c:            o->oTripletButterflyTargetYaw = (s32) o->oTripletButterflyBaseYaw;
src/game/behaviors/triplet_butterfly.inc.c:            if (o->oTimer > 110 && o->oDistanceToMario < 200.0f
src/game/behaviors/triplet_butterfly.inc.c:                && o->oTripletButterflyType > TRIPLET_BUTTERFLY_TYPE_NORMAL) {
src/game/behaviors/triplet_butterfly.inc.c:                o->oAction = TRIPLET_BUTTERFLY_ACT_ACTIVATE;
src/game/behaviors/triplet_butterfly.inc.c:                o->oTripletButterflySpeed = 0.0f;
src/game/behaviors/triplet_butterfly.inc.c:        if (o->oHomeY < o->oFloorHeight) {
src/game/behaviors/triplet_butterfly.inc.c:            o->oHomeY = o->oFloorHeight;
src/game/behaviors/triplet_butterfly.inc.c:        if (o->oPosY < o->oHomeY + random_linear_offset(50, 50)) {
src/game/behaviors/triplet_butterfly.inc.c:            o->oTripletButterflyTargetPitch = -0x2000;
src/game/behaviors/triplet_butterfly.inc.c:            o->oTripletButterflyTargetPitch = 0x2000;
src/game/behaviors/triplet_butterfly.inc.c:        obj_move_pitch_approach(o->oTripletButterflyTargetPitch, 400);
src/game/behaviors/triplet_butterfly.inc.c:        cur_obj_rotate_yaw_toward(o->oTripletButterflyTargetYaw, random_linear_offset(400, 800));
src/game/behaviors/triplet_butterfly.inc.c:    if (o->oTimer > 20) {
src/game/behaviors/triplet_butterfly.inc.c:        if (o->oTripletButterflyModel == 0) {
src/game/behaviors/triplet_butterfly.inc.c:            o->oTripletButterflyModel = sTripletButterflyActivationData[o->oTripletButterflyType].model;
src/game/behaviors/triplet_butterfly.inc.c:            cur_obj_set_model(o->oTripletButterflyModel);
src/game/behaviors/triplet_butterfly.inc.c:            o->oTripletButterflyScale = 0.0f;
src/game/behaviors/triplet_butterfly.inc.c:            o->oHomeY = o->oPosY;
src/game/behaviors/triplet_butterfly.inc.c:        } else if (o->oTripletButterflyScale
src/game/behaviors/triplet_butterfly.inc.c:                   >= sTripletButterflyActivationData[o->oTripletButterflyType].scale) {
src/game/behaviors/triplet_butterfly.inc.c:            if (o->oTripletButterflyType != TRIPLET_BUTTERFLY_TYPE_EXPLODES) {
src/game/behaviors/triplet_butterfly.inc.c:                spawn_object(o, o->oTripletButterflyModel,
src/game/behaviors/triplet_butterfly.inc.c:                             sTripletButterflyActivationData[o->oTripletButterflyType].behavior);
src/game/behaviors/triplet_butterfly.inc.c:                o->oAction = TRIPLET_BUTTERFLY_ACT_EXPLODE;
src/game/behaviors/triplet_butterfly.inc.c:                o->oWallHitboxRadius = 100.0f;
src/game/behaviors/triplet_butterfly.inc.c:        o->oTripletButterflyScale +=
src/game/behaviors/triplet_butterfly.inc.c:            sTripletButterflyActivationData[o->oTripletButterflyType].scale / 30.0f;
src/game/behaviors/triplet_butterfly.inc.c:        if (o->oTripletButterflyType == TRIPLET_BUTTERFLY_TYPE_EXPLODES) {
src/game/behaviors/triplet_butterfly.inc.c:            o->oGraphYOffset = 250.0f * o->oTripletButterflyScale;
src/game/behaviors/triplet_butterfly.inc.c:            o->oPosY = o->oHomeY - o->oGraphYOffset;
src/game/behaviors/triplet_butterfly.inc.c:    if (o->oAction == -1 || (o->oMoveFlags & 0x00000200) || o->oTimer >= 158) {
src/game/behaviors/triplet_butterfly.inc.c:        o->oPosY += o->oGraphYOffset;
src/game/behaviors/triplet_butterfly.inc.c:        if (o->oTimer > 120) {
src/game/behaviors/triplet_butterfly.inc.c:            scaleIncrease = 0.04f * coss(o->oTripletButterflyScalePhase);
src/game/behaviors/triplet_butterfly.inc.c:                o->oTripletButterflyScalePhase += 10000;
src/game/behaviors/triplet_butterfly.inc.c:                o->oTripletButterflyScalePhase += 4000;
src/game/behaviors/triplet_butterfly.inc.c:            o->oTripletButterflyScale += scaleIncrease;
src/game/behaviors/triplet_butterfly.inc.c:        approach_f32_ptr(&o->oTripletButterflySpeed, 20.0f, 1.0f);
src/game/behaviors/triplet_butterfly.inc.c:        cur_obj_rotate_yaw_toward(o->oAngleToMario, 800);
src/game/behaviors/triplet_butterfly.inc.c:    switch (o->oAction) {
src/game/behaviors/triplet_butterfly.inc.c:    cur_obj_scale(o->oTripletButterflyScale);
src/game/behaviors/triplet_butterfly.inc.c:    obj_compute_vel_from_move_pitch(o->oTripletButterflySpeed);
src/game/behaviors/ttc_2d_rotator.inc.c:    o->oTTC2DRotatorMinTimeUntilNextTurn =
src/game/behaviors/ttc_2d_rotator.inc.c:        sTTC2DRotatorTimeBetweenTurns[o->oBehParams2ndByte][gTTCSpeedSetting];
src/game/behaviors/ttc_2d_rotator.inc.c:    o->oTTC2DRotatorIncrement = o->oTTC2DRotatorSpeed = sTTC2DRotatorSpeeds[o->oBehParams2ndByte];
src/game/behaviors/ttc_2d_rotator.inc.c:    s32 startYaw = o->oFaceAngleYaw;
src/game/behaviors/ttc_2d_rotator.inc.c:    if (o->oTTC2DRotatorRandomDirTimer != 0) {
src/game/behaviors/ttc_2d_rotator.inc.c:        o->oTTC2DRotatorRandomDirTimer -= 1;
src/game/behaviors/ttc_2d_rotator.inc.c:    if (o->oTTC2DRotatorMinTimeUntilNextTurn != 0
src/game/behaviors/ttc_2d_rotator.inc.c:        && obj_face_yaw_approach(o->oTTC2DRotatorTargetYaw, 0xC8)) {
src/game/behaviors/ttc_2d_rotator.inc.c:        if (o->oTimer > o->oTTC2DRotatorMinTimeUntilNextTurn) {
src/game/behaviors/ttc_2d_rotator.inc.c:            o->oTTC2DRotatorTargetYaw += o->oTTC2DRotatorIncrement;
src/game/behaviors/ttc_2d_rotator.inc.c:            o->oTimer = 0;
src/game/behaviors/ttc_2d_rotator.inc.c:                if (o->oTTC2DRotatorRandomDirTimer == 0) {
src/game/behaviors/ttc_2d_rotator.inc.c:                        o->oTTC2DRotatorIncrement = o->oTTC2DRotatorSpeed;
src/game/behaviors/ttc_2d_rotator.inc.c:                        o->oTTC2DRotatorRandomDirTimer = random_mod_offset(90, 60, 4);
src/game/behaviors/ttc_2d_rotator.inc.c:                        o->oTTC2DRotatorIncrement = -o->oTTC2DRotatorSpeed;
src/game/behaviors/ttc_2d_rotator.inc.c:                        o->oTTC2DRotatorRandomDirTimer = random_mod_offset(30, 30, 3);
src/game/behaviors/ttc_2d_rotator.inc.c:                o->oTTC2DRotatorMinTimeUntilNextTurn = random_mod_offset(10, 20, 3);
src/game/behaviors/ttc_2d_rotator.inc.c:    o->oAngleVelYaw = o->oFaceAngleYaw - startYaw;
src/game/behaviors/ttc_2d_rotator.inc.c:    if (o->oBehParams2ndByte == TTC_2D_ROTATOR_BP_HAND) {
src/game/behaviors/ttc_cog.inc.c:    o->collisionData = segmented_to_virtual(
src/game/behaviors/ttc_cog.inc.c:        sTTCCogCollisionModels[(o->oBehParams2ndByte & TTC_COG_BP_SHAPE_MASK) >> 1]);
src/game/behaviors/ttc_cog.inc.c:    o->oTTCCogDir = sTTCCogDirections[o->oBehParams2ndByte & TTC_COG_BP_DIR_MASK];
src/game/behaviors/ttc_cog.inc.c:            o->oTTCCogSpeed = sTTCCogNormalSpeeds[gTTCSpeedSetting];
src/game/behaviors/ttc_cog.inc.c:            if (approach_f32_ptr(&o->oTTCCogSpeed, o->oTTCCogTargetVel, 50.0f)) {
src/game/behaviors/ttc_cog.inc.c:                o->oTTCCogTargetVel = 200.0f * (random_u16() % 7) * random_sign();
src/game/behaviors/ttc_cog.inc.c:    o->oAngleVelYaw = (s32)(o->oTTCCogSpeed * o->oTTCCogDir);
src/game/behaviors/ttc_cog.inc.c:    o->oFaceAngleYaw += o->oAngleVelYaw;
src/game/behaviors/ttc_elevator.inc.c:        ((o->oBehParams >> 16) & 0xFFFF) != 0 ? 100.0f * ((o->oBehParams >> 16) & 0xFFFF) : 500.0f;
src/game/behaviors/ttc_elevator.inc.c:    o->oTTCElevatorPeakY = o->oPosY + peakOffset;
src/game/behaviors/ttc_elevator.inc.c:    o->oVelY = sTTCElevatorSpeeds[gTTCSpeedSetting] * o->oTTCElevatorDir;
src/game/behaviors/ttc_elevator.inc.c:        if (o->oTimer > o->oTTCElevatorMoveTime) {
src/game/behaviors/ttc_elevator.inc.c:            o->oTTCElevatorDir = random_sign();
src/game/behaviors/ttc_elevator.inc.c:            o->oTTCElevatorMoveTime = random_mod_offset(30, 30, 6);
src/game/behaviors/ttc_elevator.inc.c:            o->oTimer = 0;
src/game/behaviors/ttc_elevator.inc.c:        } else if (o->oTimer < 5) {
src/game/behaviors/ttc_elevator.inc.c:            o->oVelY = 0.0f;
src/game/behaviors/ttc_elevator.inc.c:    if (clamp_f32(&o->oPosY, o->oHomeY, o->oTTCElevatorPeakY)) {
src/game/behaviors/ttc_elevator.inc.c:        o->oTTCElevatorDir = -o->oTTCElevatorDir;
src/game/behaviors/ttc_moving_bar.inc.c:    if ((o->oTTCMovingBarDelay = sTTCMovingBarDelays[gTTCSpeedSetting]) == 0) {
src/game/behaviors/ttc_moving_bar.inc.c:        o->oTTCMovingBarOffset = 250.0f;
src/game/behaviors/ttc_moving_bar.inc.c:    o->oTTCMovingBarStoppedTimer = 10 * o->oBehParams2ndByte;
src/game/behaviors/ttc_moving_bar.inc.c:    o->oMoveAngleYaw = 0x4000 - o->oMoveAngleYaw;
src/game/behaviors/ttc_moving_bar.inc.c:    if (o->oTTCMovingBarDelay != 0 && o->oTimer > o->oTTCMovingBarDelay) {
src/game/behaviors/ttc_moving_bar.inc.c:        if (o->oTTCMovingBarStoppedTimer != 0) {
src/game/behaviors/ttc_moving_bar.inc.c:            o->oTTCMovingBarStoppedTimer -= 1;
src/game/behaviors/ttc_moving_bar.inc.c:                o->oTTCMovingBarDelay = sTTCMovingBarRandomDelays[random_u16() & 0x3];
src/game/behaviors/ttc_moving_bar.inc.c:                    o->oTTCMovingBarStoppedTimer = random_linear_offset(20, 100);
src/game/behaviors/ttc_moving_bar.inc.c:            o->oAction = TTC_MOVING_BAR_ACT_PULL_BACK;
src/game/behaviors/ttc_moving_bar.inc.c:            o->oTTCMovingBarSpeed = -8.0f;
src/game/behaviors/ttc_moving_bar.inc.c:    if ((o->oTTCMovingBarSpeed += 0.73f) > 0.0f) {
src/game/behaviors/ttc_moving_bar.inc.c:        if (o->oTTCMovingBarStoppedTimer != 0) {
src/game/behaviors/ttc_moving_bar.inc.c:            o->oTTCMovingBarStoppedTimer -= 1;
src/game/behaviors/ttc_moving_bar.inc.c:            o->oTTCMovingBarSpeed = 0.0f;
src/game/behaviors/ttc_moving_bar.inc.c:            o->oAction = TTC_MOVING_BAR_ACT_EXTEND;
src/game/behaviors/ttc_moving_bar.inc.c:            o->oTTCMovingBarSpeed = 29.0f;
src/game/behaviors/ttc_moving_bar.inc.c:    o->oTTCMovingBarOffset = o->oTTCMovingBarSpeed = 0.0f;
src/game/behaviors/ttc_moving_bar.inc.c:    o->oAction = TTC_MOVING_BAR_ACT_WAIT;
src/game/behaviors/ttc_moving_bar.inc.c:    if ((o->oTTCMovingBarOffset == 250.0f
src/game/behaviors/ttc_moving_bar.inc.c:         || (250.0f - o->oTTCMovingBarOffset) * (250.0f - o->oTTCMovingBarStartOffset) < 0.0f)
src/game/behaviors/ttc_moving_bar.inc.c:        && o->oTTCMovingBarSpeed > -8.0f && o->oTTCMovingBarSpeed < 8.0f) {
src/game/behaviors/ttc_moving_bar.inc.c:        o->oAction = TTC_MOVING_BAR_ACT_RETRACT;
src/game/behaviors/ttc_moving_bar.inc.c:        o->oTTCMovingBarSpeed = 0.0f;
src/game/behaviors/ttc_moving_bar.inc.c:        if (o->oTTCMovingBarOffset < 250.0f) {
src/game/behaviors/ttc_moving_bar.inc.c:        if (o->oTTCMovingBarSpeed * accel < 0.0f) {
src/game/behaviors/ttc_moving_bar.inc.c:        o->oTTCMovingBarSpeed += accel;
src/game/behaviors/ttc_moving_bar.inc.c:            && o->oTTCMovingBarOffset * o->oTTCMovingBarStartOffset < 0.0f && random_u16() % 4 == 0) {
src/game/behaviors/ttc_moving_bar.inc.c:    if (o->oTimer > 30) {
src/game/behaviors/ttc_moving_bar.inc.c:        o->oTTCMovingBarSpeed = -5.0f;
src/game/behaviors/ttc_moving_bar.inc.c:        if (o->oTTCMovingBarOffset < 0.0f) {
src/game/behaviors/ttc_moving_bar.inc.c:    o->oTTCMovingBarStartOffset = o->oTTCMovingBarOffset;
src/game/behaviors/ttc_moving_bar.inc.c:    o->oTTCMovingBarOffset += o->oTTCMovingBarSpeed;
src/game/behaviors/ttc_moving_bar.inc.c:    switch (o->oAction) {
src/game/behaviors/ttc_moving_bar.inc.c:    obj_set_dist_from_home(o->oTTCMovingBarOffset);
src/game/behaviors/ttc_pendulum.inc.c:        o->oTTCPendulumAngleAccel = sTTCPendulumInitialAccels[gTTCSpeedSetting];
src/game/behaviors/ttc_pendulum.inc.c:        o->oTTCPendulumAngle = 6500.0f;
src/game/behaviors/ttc_pendulum.inc.c:        o->oTTCPendulumAngle = 6371.5557f;
src/game/behaviors/ttc_pendulum.inc.c:        UNUSED f32 startVel = o->oTTCPendulumAngleVel;
src/game/behaviors/ttc_pendulum.inc.c:        if (o->oTTCPendulumSoundTimer != 0) {
src/game/behaviors/ttc_pendulum.inc.c:            if (--o->oTTCPendulumSoundTimer == 0) {
src/game/behaviors/ttc_pendulum.inc.c:        if (o->oTTCPendulumDelay != 0) {
src/game/behaviors/ttc_pendulum.inc.c:            o->oTTCPendulumDelay -= 1;
src/game/behaviors/ttc_pendulum.inc.c:            if (o->oTTCPendulumAngle * o->oTTCPendulumAccelDir > 0.0f) {
src/game/behaviors/ttc_pendulum.inc.c:                o->oTTCPendulumAccelDir = -o->oTTCPendulumAccelDir;
src/game/behaviors/ttc_pendulum.inc.c:            o->oTTCPendulumAngleVel += o->oTTCPendulumAngleAccel * o->oTTCPendulumAccelDir;
src/game/behaviors/ttc_pendulum.inc.c:            if (o->oTTCPendulumAngleVel == 0.0f) {
src/game/behaviors/ttc_pendulum.inc.c:                        o->oTTCPendulumAngleAccel = 13.0f;
src/game/behaviors/ttc_pendulum.inc.c:                        o->oTTCPendulumAngleAccel = 42.0f;
src/game/behaviors/ttc_pendulum.inc.c:                        o->oTTCPendulumDelay = random_linear_offset(5, 30);
src/game/behaviors/ttc_pendulum.inc.c:                o->oTTCPendulumSoundTimer = o->oTTCPendulumDelay + 15;
src/game/behaviors/ttc_pendulum.inc.c:            o->oTTCPendulumAngle += o->oTTCPendulumAngleVel;
src/game/behaviors/ttc_pendulum.inc.c:    o->oFaceAngleRoll = (s32) o->oTTCPendulumAngle;
src/game/behaviors/ttc_pit_block.inc.c:    o->collisionData = segmented_to_virtual(sTTCPitBlockCollisionModels[o->oBehParams2ndByte]);
src/game/behaviors/ttc_pit_block.inc.c:    o->oTTCPitBlockPeakY = o->oPosY + 330.0f;
src/game/behaviors/ttc_pit_block.inc.c:        o->oPosY += 330.0f;
src/game/behaviors/ttc_pit_block.inc.c:    if (o->oTimer > o->oTTCPitBlockWaitTime) {
src/game/behaviors/ttc_pit_block.inc.c:        if (clamp_f32(&o->oPosY, o->oHomeY, o->oTTCPitBlockPeakY)) {
src/game/behaviors/ttc_pit_block.inc.c:            o->oTTCPitBlockDir = o->oTTCPitBlockDir ^ 0x1;
src/game/behaviors/ttc_pit_block.inc.c:            if ((o->oTTCPitBlockWaitTime =
src/game/behaviors/ttc_pit_block.inc.c:                     sTTCPitBlockProperties[gTTCSpeedSetting][o->oTTCPitBlockDir & 0x1].waitTime)
src/game/behaviors/ttc_pit_block.inc.c:                o->oTTCPitBlockWaitTime = random_mod_offset(10, 20, 6);
src/game/behaviors/ttc_pit_block.inc.c:            o->oVelY = sTTCPitBlockProperties[gTTCSpeedSetting][o->oTTCPitBlockDir].speed;
src/game/behaviors/ttc_pit_block.inc.c:            o->oTimer = 0;
src/game/behaviors/ttc_rotating_solid.inc.c:    o->collisionData = segmented_to_virtual(sTTCRotatingSolidCollisionModels[o->oBehParams2ndByte]);
src/game/behaviors/ttc_rotating_solid.inc.c:    o->oTTCRotatingSolidNumSides = o->oBehParams2ndByte == TTC_ROTATING_SOLID_BP_CUBE ? 4 : 3;
src/game/behaviors/ttc_rotating_solid.inc.c:    o->oTTCRotatingSolidRotationDelay = sTTCRotatingSolidInitialDelays[gTTCSpeedSetting];
src/game/behaviors/ttc_rotating_solid.inc.c:    if (gTTCSpeedSetting != TTC_SPEED_STOPPED && o->oTimer > o->oTTCRotatingSolidRotationDelay) {
src/game/behaviors/ttc_rotating_solid.inc.c:        if (o->oTTCRotatingSolidSoundTimer != 0) {
src/game/behaviors/ttc_rotating_solid.inc.c:            if (--o->oTTCRotatingSolidSoundTimer == 0) {
src/game/behaviors/ttc_rotating_solid.inc.c:        } else if (o->oTTCRotatingSolidVelY > 0.0f && o->oPosY >= o->oHomeY) {
src/game/behaviors/ttc_rotating_solid.inc.c:                (s32)((f32) o->oTTCRotatingSolidNumTurns / o->oTTCRotatingSolidNumSides * 0x10000);
src/game/behaviors/ttc_rotating_solid.inc.c:            s32 startRoll = o->oFaceAngleRoll;
src/game/behaviors/ttc_rotating_solid.inc.c:            o->oAngleVelRoll = o->oFaceAngleRoll - startRoll;
src/game/behaviors/ttc_rotating_solid.inc.c:            if (o->oAngleVelRoll == 0) {
src/game/behaviors/ttc_rotating_solid.inc.c:                o->oTTCRotatingSolidNumTurns =
src/game/behaviors/ttc_rotating_solid.inc.c:                    (o->oTTCRotatingSolidNumTurns + 1) % o->oTTCRotatingSolidNumSides;
src/game/behaviors/ttc_rotating_solid.inc.c:                o->oTimer = 0;
src/game/behaviors/ttc_rotating_solid.inc.c:                    o->oTTCRotatingSolidRotationDelay = random_mod_offset(5, 20, 7);
src/game/behaviors/ttc_rotating_solid.inc.c:            o->oTTCRotatingSolidVelY += 0.5f;
src/game/behaviors/ttc_rotating_solid.inc.c:            if ((o->oPosY += o->oTTCRotatingSolidVelY) >= o->oHomeY) {
src/game/behaviors/ttc_rotating_solid.inc.c:                o->oPosY = o->oHomeY;
src/game/behaviors/ttc_rotating_solid.inc.c:                o->oTTCRotatingSolidSoundTimer = 6;
src/game/behaviors/ttc_rotating_solid.inc.c:        o->oTTCRotatingSolidVelY = -5.0f;
src/game/behaviors/ttc_spinner.inc.c:    o->oAngleVelPitch = sTTCSpinnerSpeeds[gTTCSpeedSetting];
src/game/behaviors/ttc_spinner.inc.c:        if (o->oTimer > o->oTTCChangeDirTimer) {
src/game/behaviors/ttc_spinner.inc.c:            o->oTTCSpinnerDir = random_sign();
src/game/behaviors/ttc_spinner.inc.c:            o->oTTCChangeDirTimer = random_mod_offset(30, 30, 4);
src/game/behaviors/ttc_spinner.inc.c:            o->oTimer = 0;
src/game/behaviors/ttc_spinner.inc.c:        } else if (o->oTimer > 5) {
src/game/behaviors/ttc_spinner.inc.c:            o->oAngleVelPitch *= o->oTTCSpinnerDir;
src/game/behaviors/ttc_spinner.inc.c:            o->oAngleVelPitch = 0;
src/game/behaviors/ttc_spinner.inc.c:    o->oFaceAnglePitch += o->oAngleVelPitch;
src/game/behaviors/ttc_treadmill.inc.c:    o->collisionData = segmented_to_virtual(sTTCTreadmillCollisionModels[o->oBehParams2ndByte & 0x1]);
src/game/behaviors/ttc_treadmill.inc.c:    o->oTTCTreadmillBigSurface = segmented_to_virtual(ttc_movtex_tris_big_surface_treadmill);
src/game/behaviors/ttc_treadmill.inc.c:    o->oTTCTreadmillSmallSurface = segmented_to_virtual(ttc_movtex_tris_small_surface_treadmill);
src/game/behaviors/ttc_treadmill.inc.c:    *o->oTTCTreadmillBigSurface = *o->oTTCTreadmillSmallSurface = sTTCTreadmillSpeeds[gTTCSpeedSetting];
src/game/behaviors/ttc_treadmill.inc.c:            if (o->oTimer > o->oTTCTreadmillTimeUntilSwitch) {
src/game/behaviors/ttc_treadmill.inc.c:                if (approach_f32_ptr(&o->oTTCTreadmillSpeed, 0.0f, 10.0f)) {
src/game/behaviors/ttc_treadmill.inc.c:                    o->oTTCTreadmillTimeUntilSwitch = random_mod_offset(10, 20, 7);
src/game/behaviors/ttc_treadmill.inc.c:                    o->oTTCTreadmillTargetSpeed = random_sign() * 50.0f;
src/game/behaviors/ttc_treadmill.inc.c:                    o->oTimer = 0;
src/game/behaviors/ttc_treadmill.inc.c:            } else if (o->oTimer > 5) {
src/game/behaviors/ttc_treadmill.inc.c:                approach_f32_ptr(&o->oTTCTreadmillSpeed, o->oTTCTreadmillTargetSpeed, 10.0f);
src/game/behaviors/ttc_treadmill.inc.c:            *o->oTTCTreadmillBigSurface = *o->oTTCTreadmillSmallSurface = o->oTTCTreadmillSpeed;
src/game/behaviors/ttc_treadmill.inc.c:    o->oForwardVel = 0.084f * *o->oTTCTreadmillBigSurface;
src/game/behaviors/tumbling_bridge.inc.c:    switch (o->oAction) {
src/game/behaviors/tumbling_bridge.inc.c:                o->oAction++;
src/game/behaviors/tumbling_bridge.inc.c:                o->oTumblingBridgeUnkF4 = random_sign() * 0x80;
src/game/behaviors/tumbling_bridge.inc.c:            if (o->oTimer > 5) {
src/game/behaviors/tumbling_bridge.inc.c:                o->oAction++;
src/game/behaviors/tumbling_bridge.inc.c:            if (o->oAngleVelPitch < 0x400)
src/game/behaviors/tumbling_bridge.inc.c:                o->oAngleVelPitch += 0x80;
src/game/behaviors/tumbling_bridge.inc.c:            if (o->oAngleVelRoll > -0x400 && o->oAngleVelRoll < 0x400)
src/game/behaviors/tumbling_bridge.inc.c:                o->oAngleVelRoll += o->oTumblingBridgeUnkF4; // acceleration?
src/game/behaviors/tumbling_bridge.inc.c:            o->oGravity = -3.0f;
src/game/behaviors/tumbling_bridge.inc.c:            if (o->oPosY < o->oFloorHeight - 300.0f)
src/game/behaviors/tumbling_bridge.inc.c:                o->oAction++;
src/game/behaviors/tumbling_bridge.inc.c:    if (o->parentObj->oAction == 3)
src/game/behaviors/tumbling_bridge.inc.c:    s32 bridgeID = o->oBehParams2ndByte;
src/game/behaviors/tumbling_bridge.inc.c:    o->oAction = 2;
src/game/behaviors/tumbling_bridge.inc.c:    else if (o->oDistanceToMario > 1200.0f) {
src/game/behaviors/tumbling_bridge.inc.c:        o->oAction = 3;
src/game/behaviors/tumbling_bridge.inc.c:    o->oAction = 0;
src/game/behaviors/tumbling_bridge.inc.c:    if (cur_obj_has_behavior(bhvLllTumblingBridge) || o->oDistanceToMario < 1000.0f)
src/game/behaviors/tumbling_bridge.inc.c:        o->oAction = 1;
src/game/behaviors/tuxie.inc.c:    if (o->oSoundStateID == 0) {
src/game/behaviors/tuxie.inc.c:        if (o->oSubAction == 0) {
src/game/behaviors/tuxie.inc.c:            o->oForwardVel = 10.0f;
src/game/behaviors/tuxie.inc.c:                o->oSubAction = 1;
src/game/behaviors/tuxie.inc.c:            cur_obj_rotate_yaw_toward(o->oAngleToMario, 0x400);
src/game/behaviors/tuxie.inc.c:            o->oForwardVel = 0.0f;
src/game/behaviors/tuxie.inc.c:                o->oSubAction = 0;
src/game/behaviors/tuxie.inc.c:        o->oForwardVel = 0.0f;
src/game/behaviors/tuxie.inc.c:        o->oAction = 1;
src/game/behaviors/tuxie.inc.c:        o->prevObj = sp1C;
src/game/behaviors/tuxie.inc.c:    switch (o->oSubAction) {
src/game/behaviors/tuxie.inc.c:                sp2C = (o->oBehParams >> 0x10) & 0xFF;
src/game/behaviors/tuxie.inc.c:                sp28 = (o->prevObj->oBehParams >> 0x10) & 0xFF;
src/game/behaviors/tuxie.inc.c:                        o->oSubAction = 1;
src/game/behaviors/tuxie.inc.c:                        o->oSubAction = 2;
src/game/behaviors/tuxie.inc.c:                    o->prevObj->oInteractionSubtype |= INT_SUBTYPE_DROP_IMMEDIATELY;
src/game/behaviors/tuxie.inc.c:            if (o->prevObj->oHeldState == HELD_FREE) {
src/game/behaviors/tuxie.inc.c:                // like o->prevObj->oInteractionSubtype &= ~INT_SUBTYPE_DROP_IMMEDIATELY;
src/game/behaviors/tuxie.inc.c:                // however, this code uses the value of o->oInteractionSubtype
src/game/behaviors/tuxie.inc.c:                // o->oInteractionSubtype is always 0, so the result is this:
src/game/behaviors/tuxie.inc.c:                // o->prevObj->oUnknownUnk88 &= ~INT_SUBTYPE_DROP_IMMEDIATELY
src/game/behaviors/tuxie.inc.c:                // which has no effect as o->prevObj->oUnknownUnk88 is always 0
src/game/behaviors/tuxie.inc.c:                o->prevObj->OBJECT_FIELD_S32(o->oInteractionSubtype) &= ~INT_SUBTYPE_DROP_IMMEDIATELY;
src/game/behaviors/tuxie.inc.c:                obj_set_behavior(o->prevObj, bhvUnused20E0);
src/game/behaviors/tuxie.inc.c:                o->oAction = 2;
src/game/behaviors/tuxie.inc.c:            if (o->prevObj->oHeldState == HELD_FREE) {
src/game/behaviors/tuxie.inc.c:                o->prevObj->OBJECT_FIELD_S32(o->oInteractionSubtype) &= ~INT_SUBTYPE_DROP_IMMEDIATELY;
src/game/behaviors/tuxie.inc.c:                obj_set_behavior(o->prevObj, bhvPenguinBaby);
src/game/behaviors/tuxie.inc.c:                o->oAction = 2;
src/game/behaviors/tuxie.inc.c:        o->oAction = 1;
src/game/behaviors/tuxie.inc.c:        o->prevObj = sp24;
src/game/behaviors/tuxie.inc.c:        switch (o->oSubAction) {
src/game/behaviors/tuxie.inc.c:                        o->oSubAction++;
src/game/behaviors/tuxie.inc.c:                    o->oSubAction++;
src/game/behaviors/tuxie.inc.c:                if (o->oDistanceToMario > 450.0f)
src/game/behaviors/tuxie.inc.c:                    o->oSubAction = 0;
src/game/behaviors/tuxie.inc.c:    o->activeFlags |= ACTIVE_FLAG_UNK10;
src/game/behaviors/tuxie.inc.c:    o->oInteractStatus = 0;
src/game/behaviors/tuxie.inc.c:        o->oSmallPenguinUnk100 = o->oAction;
src/game/behaviors/tuxie.inc.c:        o->oAction = 3;
src/game/behaviors/tuxie.inc.c:    if (o->oTimer == 0)
src/game/behaviors/tuxie.inc.c:    o->oForwardVel = o->oSmallPenguinUnk104 + 3.0f;
src/game/behaviors/tuxie.inc.c:    cur_obj_rotate_yaw_toward(o->oAngleToMario + 0x8000, o->oSmallPenguinUnk110 + 0x600);
src/game/behaviors/tuxie.inc.c:    if (o->oDistanceToMario > o->oSmallPenguinUnk108 + 500.0f)
src/game/behaviors/tuxie.inc.c:        o->oAction = 0;
src/game/behaviors/tuxie.inc.c:        o->oAction = 5;
src/game/behaviors/tuxie.inc.c:    o->oForwardVel = o->oSmallPenguinUnk104 + 3.0f;
src/game/behaviors/tuxie.inc.c:    cur_obj_rotate_yaw_toward(o->oAngleToMario, o->oSmallPenguinUnk110 + 0x600);
src/game/behaviors/tuxie.inc.c:    if (o->oDistanceToMario < o->oSmallPenguinUnk108 + 300.0f)
src/game/behaviors/tuxie.inc.c:        o->oAction = 0;
src/game/behaviors/tuxie.inc.c:    if (o->oDistanceToMario > 1100.0f)
src/game/behaviors/tuxie.inc.c:        o->oAction = 0;
src/game/behaviors/tuxie.inc.c:    if (o->oTimer > 5) {
src/game/behaviors/tuxie.inc.c:        if (o->oTimer == 6)
src/game/behaviors/tuxie.inc.c:        if (o->oTimer > 25)
src/game/behaviors/tuxie.inc.c:                o->oAction = 4;
src/game/behaviors/tuxie.inc.c:    if (o->oTimer > 20) {
src/game/behaviors/tuxie.inc.c:        o->oForwardVel = 0.0f;
src/game/behaviors/tuxie.inc.c:        if (o->oTimer > 40)
src/game/behaviors/tuxie.inc.c:            o->oAction = o->oSmallPenguinUnk100;
src/game/behaviors/tuxie.inc.c:    if (o->oTimer == 0) {
src/game/behaviors/tuxie.inc.c:        o->oSmallPenguinUnk110 = (s32)(random_float() * 0x400);
src/game/behaviors/tuxie.inc.c:        o->oSmallPenguinUnk108 = random_float() * 100.0f;
src/game/behaviors/tuxie.inc.c:        o->oSmallPenguinUnk104 = random_float();
src/game/behaviors/tuxie.inc.c:        o->oForwardVel = 0.0f;
src/game/behaviors/tuxie.inc.c:    if (o->oDistanceToMario < 1000.0f && o->oSmallPenguinUnk108 + 600.0f < o->oDistanceToMario)
src/game/behaviors/tuxie.inc.c:        o->oAction = 1;
src/game/behaviors/tuxie.inc.c:    else if (o->oDistanceToMario < o->oSmallPenguinUnk108 + 300.0f)
src/game/behaviors/tuxie.inc.c:        o->oAction = 2;
src/game/behaviors/tuxie.inc.c:        o->oAction = 5;
src/game/behaviors/tuxie.inc.c:        if (o->oDistanceToMario < 1000.0f)
src/game/behaviors/tuxie.inc.c:            o->oForwardVel = 2.0f;
src/game/behaviors/tuxie.inc.c:            o->oForwardVel = 0.0f;
src/game/behaviors/tuxie.inc.c:    if (o->oSmallPenguinUnk88 != 0) {
src/game/behaviors/tuxie.inc.c:        o->oAction = 5;
src/game/behaviors/tuxie.inc.c:        o->oSmallPenguinUnk88 = 0;
src/game/behaviors/tuxie.inc.c:    switch (o->oHeldState) {
src/game/behaviors/tuxie.inc.c:                play_sound(SOUND_OBJ2_BABY_PENGUIN_YELL, o->header.gfx.cameraToObject);
src/game/behaviors/tweester.inc.c:    o->header.gfx.scale[0] 
src/game/behaviors/tweester.inc.c:        = (( coss(o->oTweesterScaleTimer) + 1.0) * 0.5 * 0.3 + 1.0) * scale;
src/game/behaviors/tweester.inc.c:    o->header.gfx.scale[1] 
src/game/behaviors/tweester.inc.c:        = ((-coss(o->oTweesterScaleTimer) + 1.0) * 0.5 * 0.5 + 0.5) * scale;
src/game/behaviors/tweester.inc.c:    o->header.gfx.scale[2] 
src/game/behaviors/tweester.inc.c:        = (( coss(o->oTweesterScaleTimer) + 1.0) * 0.5 * 0.3 + 1.0) * scale;
src/game/behaviors/tweester.inc.c:    o->oTweesterScaleTimer += 0x200;
src/game/behaviors/tweester.inc.c:    o->oForwardVel = 14.0f;
src/game/behaviors/tweester.inc.c:    o->oFaceAngleYaw += dYaw;
src/game/behaviors/tweester.inc.c:    if (o->oSubAction == TWEESTER_SUB_ACT_WAIT) {
src/game/behaviors/tweester.inc.c:        o->oTweesterUnused = 0;
src/game/behaviors/tweester.inc.c:        if (o->oDistanceToMario < 1500.0f)
src/game/behaviors/tweester.inc.c:            o->oSubAction++;
src/game/behaviors/tweester.inc.c:        o->oTimer = 0;
src/game/behaviors/tweester.inc.c:        tweester_scale_and_move(o->oTimer / 60.0f);
src/game/behaviors/tweester.inc.c:        if (o->oTimer > 59)
src/game/behaviors/tweester.inc.c:            o->oAction = TWEESTER_ACT_CHASE;
src/game/behaviors/tweester.inc.c:    f32 activationRadius = o->oBehParams2ndByte * 100;
src/game/behaviors/tweester.inc.c:    o->oAngleToHome = cur_obj_angle_to_home();
src/game/behaviors/tweester.inc.c:        && o->oSubAction == TWEESTER_SUB_ACT_CHASE) {
src/game/behaviors/tweester.inc.c:        o->oForwardVel = 20.0f;
src/game/behaviors/tweester.inc.c:        cur_obj_rotate_yaw_toward(o->oAngleToMario, 0x200);
src/game/behaviors/tweester.inc.c:            o->oSubAction++;
src/game/behaviors/tweester.inc.c:        o->oForwardVel = 20.0f;
src/game/behaviors/tweester.inc.c:        cur_obj_rotate_yaw_toward(o->oAngleToHome, 0x200);
src/game/behaviors/tweester.inc.c:            o->oAction = TWEESTER_ACT_HIDE;
src/game/behaviors/tweester.inc.c:    if (o->oDistanceToMario > 3000.0f)
src/game/behaviors/tweester.inc.c:        o->oAction = TWEESTER_ACT_HIDE;
src/game/behaviors/tweester.inc.c:    if (o->oMoveFlags & OBJ_MOVE_HIT_WALL)
src/game/behaviors/tweester.inc.c:        o->oMoveAngleYaw = o->oWallAngle;
src/game/behaviors/tweester.inc.c:    f32 shrinkTimer = 60.0f - o->oTimer;
src/game/behaviors/tweester.inc.c:            o->oAction = TWEESTER_ACT_IDLE;
src/game/behaviors/tweester.inc.c:        if (o->oTimer > 360)
src/game/behaviors/tweester.inc.c:            o->oAction = TWEESTER_ACT_IDLE;
src/game/behaviors/tweester.inc.c:    o->oInteractStatus = 0;
src/game/behaviors/tweester.inc.c:    o->oMoveAngleYaw += 0x3700;
src/game/behaviors/tweester.inc.c:    o->oForwardVel += 15.0f;
src/game/behaviors/tweester.inc.c:    o->oPosY += 22.0f;
src/game/behaviors/tweester.inc.c:    if (o->oTimer == 0) {
src/game/behaviors/tweester.inc.c:        o->oFaceAnglePitch = random_u16();
src/game/behaviors/tweester.inc.c:        o->oFaceAngleYaw = random_u16();
src/game/behaviors/tweester.inc.c:    if (o->oTimer > 15)
src/game/behaviors/ukiki.inc.c:    if (o->oBehParams2ndByte == UKIKI_HAT) {
src/game/behaviors/ukiki.inc.c:            o->oAction = UKIKI_ACT_IDLE;
src/game/behaviors/ukiki.inc.c:        } else if (o->oMoveFlags & OBJ_MOVE_MASK_IN_WATER) {
src/game/behaviors/ukiki.inc.c:            o->oAction = UKIKI_ACT_WAIT_TO_RESPAWN;
src/game/behaviors/ukiki.inc.c:    if (o->oBehParams2ndByte == UKIKI_HAT) {
src/game/behaviors/ukiki.inc.c:    o->oForwardVel = 0.0f;
src/game/behaviors/ukiki.inc.c:    if (o->oSubAction == UKIKI_SUB_ACT_TAUNT_NONE) {
src/game/behaviors/ukiki.inc.c:        o->oSubAction = (s32)(random_float() * 4.0f + 1.0f);
src/game/behaviors/ukiki.inc.c:        o->oUkikiTauntCounter = 0;
src/game/behaviors/ukiki.inc.c:        o->oUkikiTauntsToBeDone = (s16)(random_float() * 4.0f + 2.0f);
src/game/behaviors/ukiki.inc.c:    switch(o->oSubAction) {
src/game/behaviors/ukiki.inc.c:                o->oSubAction = UKIKI_SUB_ACT_TAUNT_NONE;
src/game/behaviors/ukiki.inc.c:                o->oUkikiTauntCounter++;
src/game/behaviors/ukiki.inc.c:            if (o->oUkikiTauntCounter >= o->oUkikiTauntsToBeDone * 2) {
src/game/behaviors/ukiki.inc.c:                o->oSubAction = UKIKI_SUB_ACT_TAUNT_NONE;
src/game/behaviors/ukiki.inc.c:                o->oUkikiTauntCounter++;
src/game/behaviors/ukiki.inc.c:            if (o->oUkikiTauntCounter >= o->oUkikiTauntsToBeDone) {
src/game/behaviors/ukiki.inc.c:                o->oSubAction = UKIKI_SUB_ACT_TAUNT_NONE;
src/game/behaviors/ukiki.inc.c:                o->oSubAction = UKIKI_SUB_ACT_TAUNT_NONE;
src/game/behaviors/ukiki.inc.c:        if (o->oDistanceToMario > 700.0f && o->oDistanceToMario < 1000.0f) {
src/game/behaviors/ukiki.inc.c:            o->oAction = UKIKI_ACT_RUN;
src/game/behaviors/ukiki.inc.c:        } else if (o->oDistanceToMario <= 700.0f && 200.0f < o->oDistanceToMario) {
src/game/behaviors/ukiki.inc.c:            if (abs_angle_diff(o->oAngleToMario, o->oMoveAngleYaw) > 0x1000)    {
src/game/behaviors/ukiki.inc.c:                o->oAction = UKIKI_ACT_TURN_TO_MARIO;
src/game/behaviors/ukiki.inc.c:    } else if (o->oDistanceToMario < 300.0f) {
src/game/behaviors/ukiki.inc.c:        o->oAction = UKIKI_ACT_RUN;
src/game/behaviors/ukiki.inc.c:    if (o->oUkikiTextState == UKIKI_TEXT_GO_TO_CAGE) {
src/game/behaviors/ukiki.inc.c:        o->oAction = UKIKI_ACT_GO_TO_CAGE;
src/game/behaviors/ukiki.inc.c:    if (o->oUkikiTextState == UKIKI_TEXT_STOLE_HAT) {
src/game/behaviors/ukiki.inc.c:        o->oMoveAngleYaw = gMarioObject->oMoveAngleYaw + 0x8000;
src/game/behaviors/ukiki.inc.c:            o->oAction = UKIKI_ACT_JUMP;
src/game/behaviors/ukiki.inc.c:            o->oMoveAngleYaw = gMarioObject->oMoveAngleYaw + 0x4000;
src/game/behaviors/ukiki.inc.c:                o->oAction = UKIKI_ACT_JUMP;
src/game/behaviors/ukiki.inc.c:                o->oMoveAngleYaw = gMarioObject->oMoveAngleYaw - 0x4000;
src/game/behaviors/ukiki.inc.c:                    o->oAction = UKIKI_ACT_JUMP;
src/game/behaviors/ukiki.inc.c:        o->oUkikiTextState = UKIKI_TEXT_HAS_HAT;
src/game/behaviors/ukiki.inc.c:    if (o->oBehParams2ndByte == UKIKI_HAT) {
src/game/behaviors/ukiki.inc.c:        if (o->oPosY < -1550.0f) {
src/game/behaviors/ukiki.inc.c:            o->oAction = UKIKI_ACT_RETURN_HOME;
src/game/behaviors/ukiki.inc.c:    o->oMoveAngleYaw = cur_obj_angle_to_home();
src/game/behaviors/ukiki.inc.c:    o->oForwardVel = 10.0f;
src/game/behaviors/ukiki.inc.c:    if (o->oPosY > -1550.0f) {
src/game/behaviors/ukiki.inc.c:        o->oAction = UKIKI_ACT_IDLE;
src/game/behaviors/ukiki.inc.c:        o->oAction = UKIKI_ACT_IDLE;
src/game/behaviors/ukiki.inc.c:    if (o->oSubAction == UKIKI_SUB_ACT_TAUNT_JUMP_CLAP) {
src/game/behaviors/ukiki.inc.c:        cur_obj_rotate_yaw_toward(o->oAngleToMario, 0x400);
src/game/behaviors/ukiki.inc.c:    if (o->oTimer == 0) {
src/game/behaviors/ukiki.inc.c:        o->oForwardVel = random_float() * 3.0f + 2.0f;
src/game/behaviors/ukiki.inc.c:    facingMario = cur_obj_rotate_yaw_toward(o->oAngleToMario, 0x800);
src/game/behaviors/ukiki.inc.c:        o->oAction = UKIKI_ACT_IDLE;
src/game/behaviors/ukiki.inc.c:        if (o->oDistanceToMario > 500.0f) {
src/game/behaviors/ukiki.inc.c:            o->oAction = UKIKI_ACT_RUN;
src/game/behaviors/ukiki.inc.c:    } else if (o->oDistanceToMario < 300.0f) {
src/game/behaviors/ukiki.inc.c:        o->oAction = UKIKI_ACT_RUN;
src/game/behaviors/ukiki.inc.c:    s16 goalYaw = o->oAngleToMario + 0x8000;
src/game/behaviors/ukiki.inc.c:        goalYaw = o->oAngleToMario;
src/game/behaviors/ukiki.inc.c:    if (o->oTimer == 0) {
src/game/behaviors/ukiki.inc.c:        o->oUkikiChaseFleeRange = random_float() * 100.0f + 350.0f;
src/game/behaviors/ukiki.inc.c:        if (o->oDistanceToMario > o->oUkikiChaseFleeRange) {
src/game/behaviors/ukiki.inc.c:            o->oAction = UKIKI_ACT_TURN_TO_MARIO;
src/game/behaviors/ukiki.inc.c:    } else if (o->oDistanceToMario < o->oUkikiChaseFleeRange) {
src/game/behaviors/ukiki.inc.c:        o->oAction = UKIKI_ACT_TURN_TO_MARIO;
src/game/behaviors/ukiki.inc.c:        if (o->oDistanceToMario < 200.0f) {
src/game/behaviors/ukiki.inc.c:            if((o->oMoveFlags & OBJ_MOVE_HIT_WALL) &&
src/game/behaviors/ukiki.inc.c:                o->oAction = UKIKI_ACT_JUMP;
src/game/behaviors/ukiki.inc.c:                o->oMoveAngleYaw = o->oWallAngle;
src/game/behaviors/ukiki.inc.c:            } else if((o->oMoveFlags & OBJ_MOVE_HIT_EDGE)) {
src/game/behaviors/ukiki.inc.c:                    o->oAction = UKIKI_ACT_JUMP;
src/game/behaviors/ukiki.inc.c:                    o->oMoveAngleYaw += 0x8000;
src/game/behaviors/ukiki.inc.c:    o->oForwardVel = 10.0f;
src/game/behaviors/ukiki.inc.c:    if (o->oSubAction == 0) {
src/game/behaviors/ukiki.inc.c:        if (o->oTimer == 0) {
src/game/behaviors/ukiki.inc.c:        } else if (o->oMoveFlags & OBJ_MOVE_MASK_NOT_AIR) {
src/game/behaviors/ukiki.inc.c:            o->oSubAction++;
src/game/behaviors/ukiki.inc.c:            o->oVelY = 0.0f;
src/game/behaviors/ukiki.inc.c:        o->oForwardVel = 0.0f;
src/game/behaviors/ukiki.inc.c:            o->oAction = UKIKI_ACT_RUN;
src/game/behaviors/ukiki.inc.c:    o->oFlags |= OBJ_FLAG_ACTIVE_FROM_AFAR;
src/game/behaviors/ukiki.inc.c:    switch(o->oSubAction) {
src/game/behaviors/ukiki.inc.c:            o->oPathedWaypointsS16 = sCageUkikiPath;
src/game/behaviors/ukiki.inc.c:                o->oForwardVel = 10.0f;
src/game/behaviors/ukiki.inc.c:                cur_obj_rotate_yaw_toward(o->oPathedTargetYaw, 0x400);
src/game/behaviors/ukiki.inc.c:                o->oPosY = o->oFloorHeight;
src/game/behaviors/ukiki.inc.c:                o->oForwardVel = 0.0f;
src/game/behaviors/ukiki.inc.c:                o->oSubAction++;
src/game/behaviors/ukiki.inc.c:            cur_obj_rotate_yaw_toward(o->oAngleToMario, 0x400);
src/game/behaviors/ukiki.inc.c:                o->oSubAction++; // fallthrough
src/game/behaviors/ukiki.inc.c:                o->oSubAction++;
src/game/behaviors/ukiki.inc.c:                o->oForwardVel = 10.0f;
src/game/behaviors/ukiki.inc.c:                o->oSubAction++;
src/game/behaviors/ukiki.inc.c:            o->oForwardVel = 36.0f;
src/game/behaviors/ukiki.inc.c:            o->oSubAction++;
src/game/behaviors/ukiki.inc.c:                o->oForwardVel = 0.0f;
src/game/behaviors/ukiki.inc.c:            if (o->oMoveFlags & OBJ_MOVE_LANDED) {
src/game/behaviors/ukiki.inc.c:                o->oSubAction++;
src/game/behaviors/ukiki.inc.c:                o->oUkikiCageSpinTimer = 32;
src/game/behaviors/ukiki.inc.c:                o->oForwardVel = 0.0f;
src/game/behaviors/ukiki.inc.c:            o->oMoveAngleYaw += 0x800;
src/game/behaviors/ukiki.inc.c:            o->oUkikiCageSpinTimer--;
src/game/behaviors/ukiki.inc.c:            if (o->oUkikiCageSpinTimer < 0) {
src/game/behaviors/ukiki.inc.c:                o->oSubAction++;
src/game/behaviors/ukiki.inc.c:            if (o->oPosY < -1300.0f) {
src/game/behaviors/ukiki.inc.c:    if (o->oAction == UKIKI_ACT_GO_TO_CAGE || o->oAction == UKIKI_ACT_RETURN_HOME) {
src/game/behaviors/ukiki.inc.c:    if(!(o->oMoveFlags & OBJ_MOVE_MASK_IN_WATER)) {
src/game/behaviors/ukiki.inc.c:        o->oAnimState = UKIKI_ANIM_STATE_EYE_CLOSED;
src/game/behaviors/ukiki.inc.c:        o->oAnimState = UKIKI_ANIM_STATE_DEFAULT;
src/game/behaviors/ukiki.inc.c:    if (o->oPosY - o->oHomeY > -100.0f) {
src/game/behaviors/ukiki.inc.c:        switch(o->oUkikiTextState) {
src/game/behaviors/ukiki.inc.c:                    o->oUkikiTextState = UKIKI_TEXT_CAGE_TEXTBOX;
src/game/behaviors/ukiki.inc.c:                        o->oInteractionSubtype |= INT_SUBTYPE_DROP_IMMEDIATELY;
src/game/behaviors/ukiki.inc.c:                        o->oUkikiTextState = UKIKI_TEXT_GO_TO_CAGE;
src/game/behaviors/ukiki.inc.c:                        o->oUkikiTextState = UKIKI_TEXT_DO_NOT_LET_GO;
src/game/behaviors/ukiki.inc.c:                        o->oUkikiTextboxTimer = 60;
src/game/behaviors/ukiki.inc.c:                if (o->oUkikiTextboxTimer-- < 0) {
src/game/behaviors/ukiki.inc.c:                    o->oUkikiTextState = UKIKI_TEXT_DEFAULT;
src/game/behaviors/ukiki.inc.c:        o->oUkikiTextState = UKIKI_TEXT_DEFAULT;
src/game/behaviors/ukiki.inc.c:        o->oTimer = 0;
src/game/behaviors/ukiki.inc.c:        o->oAction = UKIKI_ACT_WAIT_TO_RESPAWN;
src/game/behaviors/ukiki.inc.c:    switch(o->oUkikiTextState) {
src/game/behaviors/ukiki.inc.c:                o->oUkikiTextState = UKIKI_TEXT_STEAL_HAT;
src/game/behaviors/ukiki.inc.c:                o->oUkikiHasHat |= UKIKI_HAT_ON;
src/game/behaviors/ukiki.inc.c:                o->oInteractionSubtype |= INT_SUBTYPE_DROP_IMMEDIATELY;
src/game/behaviors/ukiki.inc.c:                o->oUkikiTextState = UKIKI_TEXT_STOLE_HAT;
src/game/behaviors/ukiki.inc.c:                o->oUkikiHasHat &= ~UKIKI_HAT_ON;
src/game/behaviors/ukiki.inc.c:                o->oUkikiTextState = UKIKI_TEXT_GAVE_HAT_BACK;
src/game/behaviors/ukiki.inc.c:            o->oUkikiTextState = UKIKI_TEXT_DEFAULT;
src/game/behaviors/ukiki.inc.c:            o->oAction = UKIKI_ACT_IDLE;
src/game/behaviors/ukiki.inc.c:    if (o->oBehParams2ndByte == UKIKI_HAT) {
src/game/behaviors/ukiki.inc.c:            o->oUkikiTextState = UKIKI_TEXT_HAS_HAT;
src/game/behaviors/ukiki.inc.c:            o->oUkikiHasHat |= UKIKI_HAT_ON;
src/game/behaviors/ukiki.inc.c:    switch(o->oHeldState) {
src/game/behaviors/ukiki.inc.c:            o->oUkikiTextboxTimer = 0;
src/game/behaviors/ukiki.inc.c:            if (o->oBehParams2ndByte == UKIKI_HAT) {
src/game/behaviors/ukiki.inc.c:    if (o->oUkikiHasHat & UKIKI_HAT_ON) {
src/game/behaviors/ukiki.inc.c:        o->oAnimState = UKIKI_ANIM_STATE_HAT_ON;
src/game/behaviors/ukiki.inc.c:        o->oAnimState = UKIKI_ANIM_STATE_DEFAULT;
src/game/behaviors/ukiki.inc.c:    o->oInteractStatus = 0;
src/game/behaviors/ukiki.inc.c:    print_debug_bottom_up("mode   %d\n", o->oAction);
src/game/behaviors/ukiki.inc.c:    print_debug_bottom_up("action %d\n", o->oHeldState);
src/game/behaviors/ukiki_cage.inc.c:    switch (o->oAction) {
src/game/behaviors/ukiki_cage.inc.c:            if (o->oTimer == 0) {
src/game/behaviors/ukiki_cage.inc.c:            obj_copy_pos(o, o->parentObj);
src/game/behaviors/ukiki_cage.inc.c:            obj_copy_behavior_params(o, o->parentObj);
src/game/behaviors/ukiki_cage.inc.c:            if (o->parentObj->oAction == UKIKI_CAGE_ACT_HIDE) {
src/game/behaviors/ukiki_cage.inc.c:                o->oAction++;
src/game/behaviors/ukiki_cage.inc.c:    o->oFaceAngleYaw += 0x400;
src/game/behaviors/ukiki_cage.inc.c:    if (o->oUkikiCageNextAction != UKIKI_CAGE_ACT_WAIT_FOR_UKIKI) {
src/game/behaviors/ukiki_cage.inc.c:        o->oAction = UKIKI_CAGE_ACT_SPIN;
src/game/behaviors/ukiki_cage.inc.c:    if (o->oUkikiCageNextAction != UKIKI_CAGE_ACT_SPIN) {
src/game/behaviors/ukiki_cage.inc.c:        o->oAction = UKIKI_CAGE_ACT_FALL;
src/game/behaviors/ukiki_cage.inc.c:    o->oMoveAngleYaw += 0x800;
src/game/behaviors/ukiki_cage.inc.c:    if (o->oMoveFlags & (OBJ_MOVE_LANDED | OBJ_MOVE_ENTERED_WATER)) {
src/game/behaviors/ukiki_cage.inc.c:        o->oAction = UKIKI_CAGE_ACT_HIDE;
src/game/behaviors/unagi.inc.c:    if (o->oBehParams2ndByte != 1) {
src/game/behaviors/unagi.inc.c:        o->oPathedStartWaypoint = segmented_to_virtual(jrb_seg7_trajectory_unagi_1);
src/game/behaviors/unagi.inc.c:        if (o->oBehParams2ndByte == 0) {
src/game/behaviors/unagi.inc.c:            o->oFaceAnglePitch = -7600;
src/game/behaviors/unagi.inc.c:            o->oAction = 1;
src/game/behaviors/unagi.inc.c:        o->oPathedStartWaypoint = segmented_to_virtual(jrb_seg7_trajectory_unagi_2);
src/game/behaviors/unagi.inc.c:        o->oAction = 3;
src/game/behaviors/unagi.inc.c:        o->oAnimState = 1;
src/game/behaviors/unagi.inc.c:        o->oUnagiUnk1B0 = o->oMoveAngleYaw;
src/game/behaviors/unagi.inc.c:    o->oPathedPrevWaypoint = o->oPathedStartWaypoint;
src/game/behaviors/unagi.inc.c:    if (o->oDistanceToMario > 4500.0f && o->oSubAction != 0) {
src/game/behaviors/unagi.inc.c:        o->oAction = 1;
src/game/behaviors/unagi.inc.c:        o->oPosX = o->oPathedStartWaypoint->pos[0];
src/game/behaviors/unagi.inc.c:        o->oPosY = o->oPathedStartWaypoint->pos[1];
src/game/behaviors/unagi.inc.c:        o->oPosZ = o->oPathedStartWaypoint->pos[2];
src/game/behaviors/unagi.inc.c:    } else if (o->oUnagiUnk1AC < 700.0f) {
src/game/behaviors/unagi.inc.c:        o->oSubAction = 1;
src/game/behaviors/unagi.inc.c:    if (o->oSoundStateID == 3) {
src/game/behaviors/unagi.inc.c:            o->oForwardVel = 40.0f;
src/game/behaviors/unagi.inc.c:            if (o->oAction != arg0 && (o->oPathedPrevWaypointFlags & 0xFF) >= 7) {
src/game/behaviors/unagi.inc.c:        o->oAction = arg0;
src/game/behaviors/unagi.inc.c:    o->oMoveAnglePitch = o->oFaceAnglePitch =
src/game/behaviors/unagi.inc.c:        approach_s16_symmetric(o->oMoveAnglePitch, o->oPathedTargetPitch, 50);
src/game/behaviors/unagi.inc.c:    cur_obj_rotate_yaw_toward(o->oPathedTargetYaw, 120);
src/game/behaviors/unagi.inc.c:    obj_roll_to_match_yaw_turn(o->oPathedTargetYaw, 0x2000, 100);
src/game/behaviors/unagi.inc.c:    o->oPathedPrevWaypoint = o->oPathedStartWaypoint;
src/game/behaviors/unagi.inc.c:    o->oPathedPrevWaypointFlags = 0;
src/game/behaviors/unagi.inc.c:    o->oMoveAnglePitch = o->oFaceAnglePitch = 0;
src/game/behaviors/unagi.inc.c:    o->oMoveAngleYaw = o->oFaceAngleYaw = o->oUnagiUnk1B0;
src/game/behaviors/unagi.inc.c:    o->oFaceAngleRoll = 0;
src/game/behaviors/unagi.inc.c:    o->oForwardVel = o->oVelX = o->oVelZ = o->oUnagiUnkF8 = 0.0f;
src/game/behaviors/unagi.inc.c:    o->oUnagiUnkF4 = -800.0f;
src/game/behaviors/unagi.inc.c:    o->oAction = 3;
src/game/behaviors/unagi.inc.c:    if (o->oUnagiUnkF4 < 0.0f) {
src/game/behaviors/unagi.inc.c:        if ((o->oUnagiUnkF4 += 10.0f) > 0.0f) {
src/game/behaviors/unagi.inc.c:            o->oUnagiUnkF4 = 0.0f;
src/game/behaviors/unagi.inc.c:        if (o->oUnagiUnkF4 == 0.0f) {
src/game/behaviors/unagi.inc.c:            if (o->oTimer > 60 && o->oUnagiUnk1AC < 1000.0f) {
src/game/behaviors/unagi.inc.c:                o->oUnagiUnkF8 = o->oUnagiUnk110 = 30.0f;
src/game/behaviors/unagi.inc.c:                o->oUnagiUnk110 = 0.0f;
src/game/behaviors/unagi.inc.c:        } else if (o->oUnagiUnk110 > 0.0f) {
src/game/behaviors/unagi.inc.c:                o->oUnagiUnk110 = 0.0f;
src/game/behaviors/unagi.inc.c:        } else if (o->oUnagiUnk110 == 0.0f) {
src/game/behaviors/unagi.inc.c:                if (o->oUnagiUnk1AC < 1000.0f) {
src/game/behaviors/unagi.inc.c:                    o->oAction = 4;
src/game/behaviors/unagi.inc.c:                    o->oForwardVel = o->oUnagiUnkF8;
src/game/behaviors/unagi.inc.c:                    o->oUnagiUnk110 = -50.0f;
src/game/behaviors/unagi.inc.c:        approach_f32_ptr(&o->oUnagiUnkF8, o->oUnagiUnk110, 4.0f);
src/game/behaviors/unagi.inc.c:        if ((o->oUnagiUnkF4 += o->oUnagiUnkF8) < 0.0f) {
src/game/behaviors/unagi.inc.c:            o->oUnagiUnkF4 = o->oUnagiUnkF8 = 0.0f;
src/game/behaviors/unagi.inc.c:            o->oTimer = 0;
src/game/behaviors/unagi.inc.c:    o->oPosX = o->oHomeX + o->oUnagiUnkF4 * sins(o->oMoveAngleYaw);
src/game/behaviors/unagi.inc.c:    o->oPosZ = o->oHomeZ + o->oUnagiUnkF4 * coss(o->oMoveAngleYaw);
src/game/behaviors/unagi.inc.c:    if (o->oUnagiUnk1B2 == 0) {
src/game/behaviors/unagi.inc.c:        o->oUnagiUnk1AC = 99999.0f;
src/game/behaviors/unagi.inc.c:        if (o->oDistanceToMario < 3000.0f) {
src/game/behaviors/unagi.inc.c:            o->oUnagiUnk1B2 = 1;
src/game/behaviors/unagi.inc.c:    } else if (o->oDistanceToMario > 4000.0f) {
src/game/behaviors/unagi.inc.c:        o->oUnagiUnk1B2 = 0;
src/game/behaviors/unagi.inc.c:    switch (o->oAction) {
src/game/behaviors/unagi.inc.c:            unagi_act_1_4(o->oAction);
src/game/behaviors/unagi.inc.c:    if (o->parentObj->oUnagiUnk1B2 == 0) {
src/game/behaviors/unagi.inc.c:        val04 = 300.0f * o->oBehParams2ndByte;
src/game/behaviors/unagi.inc.c:        o->oPosY = o->parentObj->oPosY - val04 * sins(o->parentObj->oFaceAnglePitch) * 1.13f;
src/game/behaviors/unagi.inc.c:        val04 = coss(o->parentObj->oFaceAnglePitch / 2) * val04;
src/game/behaviors/unagi.inc.c:        o->oPosX = o->parentObj->oPosX + val04 * sins(o->parentObj->oFaceAngleYaw);
src/game/behaviors/unagi.inc.c:        o->oPosZ = o->parentObj->oPosZ + val04 * coss(o->parentObj->oFaceAngleYaw);
src/game/behaviors/unagi.inc.c:        if (o->oBehParams2ndByte == -4) {
src/game/behaviors/unagi.inc.c:            if (o->parentObj->oAnimState != 0 && o->oDistanceToMario < 150.0f) {
src/game/behaviors/unagi.inc.c:                o->oBehParams = o->parentObj->oBehParams;
src/game/behaviors/unagi.inc.c:                o->parentObj->oAnimState = 0;
src/game/behaviors/unagi.inc.c:            obj_check_attacks(&sUnagiHitbox, o->oAction);
src/game/behaviors/unagi.inc.c:            if (o->oBehParams2ndByte == 3) {
src/game/behaviors/unagi.inc.c:                o->parentObj->oUnagiUnk1AC = o->oDistanceToMario;
src/game/behaviors/unused_particle_spawn.inc.c:    if (o->oMoveFlags & OBJ_MOVE_ON_GROUND) {
src/game/behaviors/unused_poundable_platform.inc.c:if (o->oAction == 0) {
src/game/behaviors/unused_poundable_platform.inc.c:        o->oAction = 3;
src/game/behaviors/unused_poundable_platform.inc.c:        o->oPosX -= 375.0f;
src/game/behaviors/unused_poundable_platform.inc.c:        o->oPosZ -= 375.0f;
src/game/behaviors/unused_poundable_platform.inc.c:        o->oAction = 1;
src/game/behaviors/unused_poundable_platform.inc.c:    if (o->oAction == 1) {
src/game/behaviors/unused_poundable_platform.inc.c:            o->oAction++;
src/game/behaviors/unused_poundable_platform.inc.c:    if (o->oAction == 2) {
src/game/behaviors/unused_poundable_platform.inc.c:        if (o->oTimer < 25) {
src/game/behaviors/unused_poundable_platform.inc.c:            o->oVelX -= 15.0f;
src/game/behaviors/unused_poundable_platform.inc.c:            o->oVelZ -= 15.0f;
src/game/behaviors/unused_poundable_platform.inc.c:            o->oPosX -= 15.0f;
src/game/behaviors/unused_poundable_platform.inc.c:            o->oPosZ -= 15.0f;
src/game/behaviors/unused_poundable_platform.inc.c:        o->oVelX = 0.0f;
src/game/behaviors/unused_poundable_platform.inc.c:        o->oVelZ = 0.0f;
src/game/behaviors/warp.inc.c:    if (o->oTimer == 0) {
src/game/behaviors/warp.inc.c:        sp6 = (o->oBehParams >> 24) & 0xFF;
src/game/behaviors/warp.inc.c:            o->hitboxRadius = 50.0f;
src/game/behaviors/warp.inc.c:            o->hitboxRadius = 10000.0f;
src/game/behaviors/warp.inc.c:            o->hitboxRadius = sp6 * 10.0;
src/game/behaviors/warp.inc.c:        o->hitboxHeight = 50.0f;
src/game/behaviors/warp.inc.c:    o->oInteractStatus = 0;
src/game/behaviors/warp.inc.c:void bhv_fading_warp_loop() // identical to the above function except for o->hitboxRadius
src/game/behaviors/warp.inc.c:    if (o->oTimer == 0) {
src/game/behaviors/warp.inc.c:        sp6 = (o->oBehParams >> 24) & 0xFF;
src/game/behaviors/warp.inc.c:            o->hitboxRadius = 85.0f;
src/game/behaviors/warp.inc.c:            o->hitboxRadius = 10000.0f;
src/game/behaviors/warp.inc.c:            o->hitboxRadius = sp6 * 10.0;
src/game/behaviors/warp.inc.c:        o->hitboxHeight = 50.0f;
src/game/behaviors/warp.inc.c:    o->oInteractStatus = 0;
src/game/behaviors/water_bomb.inc.c:    spawnerRadius = 50 * (u16)(o->oBehParams >> 16) + 200.0f;
src/game/behaviors/water_bomb.inc.c:    if (!o->oWaterBombSpawnerBombActive && latDistToMario < spawnerRadius
src/game/behaviors/water_bomb.inc.c:        && gMarioObject->oPosY - o->oPosY < 1000.0f) {
src/game/behaviors/water_bomb.inc.c:        if (o->oWaterBombSpawnerTimeToSpawn != 0) {
src/game/behaviors/water_bomb.inc.c:            o->oWaterBombSpawnerTimeToSpawn -= 1;
src/game/behaviors/water_bomb.inc.c:                o->oWaterBombSpawnerBombActive = TRUE;
src/game/behaviors/water_bomb.inc.c:                o->oWaterBombSpawnerTimeToSpawn = random_linear_offset(0, 50);
src/game/behaviors/water_bomb.inc.c:    o->oAction = WATER_BOMB_ACT_DROP;
src/game/behaviors/water_bomb.inc.c:    o->oMoveFlags = 0;
src/game/behaviors/water_bomb.inc.c:    o->oVelY = -40.0f;
src/game/behaviors/water_bomb.inc.c:    if ((o->oInteractStatus & INT_STATUS_INTERACTED) || (o->oMoveFlags & OBJ_MOVE_ENTERED_WATER)) {
src/game/behaviors/water_bomb.inc.c:        set_camera_shake_from_point(SHAKE_POS_SMALL, o->oPosX, o->oPosY, o->oPosZ);
src/game/behaviors/water_bomb.inc.c:        o->oAction = WATER_BOMB_ACT_EXPLODE;
src/game/behaviors/water_bomb.inc.c:    } else if (o->oMoveFlags & OBJ_MOVE_MASK_ON_GROUND) {
src/game/behaviors/water_bomb.inc.c:        if (!o->oWaterBombOnGround) {
src/game/behaviors/water_bomb.inc.c:            o->oWaterBombOnGround = TRUE;
src/game/behaviors/water_bomb.inc.c:            if ((o->oWaterBombNumBounces += 1.0f) < 3.0f) {
src/game/behaviors/water_bomb.inc.c:            set_camera_shake_from_point(SHAKE_POS_SMALL, o->oPosX, o->oPosY, o->oPosZ);
src/game/behaviors/water_bomb.inc.c:            o->oMoveAngleYaw = o->oAngleToMario;
src/game/behaviors/water_bomb.inc.c:            o->oForwardVel = 10.0f;
src/game/behaviors/water_bomb.inc.c:            o->oWaterBombStretchSpeed = -40.0f;
src/game/behaviors/water_bomb.inc.c:        o->oWaterBombStretchSpeed += 15.0f - o->oWaterBombNumBounces * 2.8f;
src/game/behaviors/water_bomb.inc.c:        o->oWaterBombVerticalStretch += o->oWaterBombStretchSpeed * 0.01f;
src/game/behaviors/water_bomb.inc.c:        if (o->oWaterBombVerticalStretch < -0.8f) {
src/game/behaviors/water_bomb.inc.c:            o->oAction = WATER_BOMB_ACT_EXPLODE;
src/game/behaviors/water_bomb.inc.c:        } else if (o->oWaterBombVerticalStretch > 0.1f) {
src/game/behaviors/water_bomb.inc.c:            o->oVelY = 1.8f * o->oWaterBombStretchSpeed;
src/game/behaviors/water_bomb.inc.c:        approach_f32_ptr(&o->oWaterBombVerticalStretch, 0.0f, 0.008f);
src/game/behaviors/water_bomb.inc.c:        o->oWaterBombOnGround = FALSE;
src/game/behaviors/water_bomb.inc.c:    o->header.gfx.scale[1] = o->oWaterBombVerticalStretch + 1.0f;
src/game/behaviors/water_bomb.inc.c:    stretch = o->oWaterBombVerticalStretch;
src/game/behaviors/water_bomb.inc.c:    if (o->oWaterBombNumBounces == 3.0f) {
src/game/behaviors/water_bomb.inc.c:    o->header.gfx.scale[0] = o->header.gfx.scale[2] = 1.0f - stretch;
src/game/behaviors/water_bomb.inc.c:    o->parentObj->oWaterBombSpawnerBombActive = FALSE;
src/game/behaviors/water_bomb.inc.c:    if (o->oTimer > 100) {
src/game/behaviors/water_bomb.inc.c:        if (o->oTimer < 7) {
src/game/behaviors/water_bomb.inc.c:            if (o->oTimer == 1) {
src/game/behaviors/water_bomb.inc.c:        if (o->header.gfx.scale[1] > 1.2f) {
src/game/behaviors/water_bomb.inc.c:            o->header.gfx.scale[1] -= 0.1f;
src/game/behaviors/water_bomb.inc.c:        o->header.gfx.scale[0] = o->header.gfx.scale[2] = 2.0f - o->header.gfx.scale[1];
src/game/behaviors/water_bomb.inc.c:    if (o->oAction == WATER_BOMB_ACT_SHOT_FROM_CANNON) {
src/game/behaviors/water_bomb.inc.c:        o->oGraphYOffset = 40.0f * o->header.gfx.scale[1];
src/game/behaviors/water_bomb.inc.c:        switch (o->oAction) {
src/game/behaviors/water_bomb.inc.c:    if (o->parentObj->oAction == WATER_BOMB_ACT_EXPLODE) {
src/game/behaviors/water_bomb.inc.c:        f32 bombHeight = o->parentObj->oPosY - o->parentObj->oFloorHeight;
src/game/behaviors/water_bomb.inc.c:        obj_copy_pos(o, o->parentObj);
src/game/behaviors/water_bomb.inc.c:        o->oPosY = o->parentObj->oFloorHeight + bombHeight;
src/game/behaviors/water_bomb.inc.c:        obj_copy_scale(o, o->parentObj);
src/game/behaviors/water_bomb_cannon.inc.c:    if (o->parentObj->oAction == 2) {
src/game/behaviors/water_bomb_cannon.inc.c:        o->oMoveAngleYaw = o->parentObj->oFaceAngleYaw;
src/game/behaviors/water_bomb_cannon.inc.c:        o->oMoveAnglePitch = o->parentObj->oMoveAnglePitch + 0x4000;
src/game/behaviors/water_bomb_cannon.inc.c:        o->oFaceAnglePitch = o->parentObj->oMoveAnglePitch;
src/game/behaviors/water_bomb_cannon.inc.c:        if ((o->oCannonBarrelBubblesUnkF4 += o->oForwardVel) > 0.0f) {
src/game/behaviors/water_bomb_cannon.inc.c:            o->oCannonBarrelBubblesUnkF4 = 0.0f;
src/game/behaviors/water_bomb_cannon.inc.c:            obj_copy_pos(o, o->parentObj);
src/game/behaviors/water_bomb_cannon.inc.c:            if (o->parentObj->oWaterCannonUnkF4 != 0) {
src/game/behaviors/water_bomb_cannon.inc.c:                if (o->oForwardVel == 0.0f) {
src/game/behaviors/water_bomb_cannon.inc.c:                    o->oForwardVel = 35.0f;
src/game/behaviors/water_bomb_cannon.inc.c:                    set_camera_shake_from_point(SHAKE_POS_MEDIUM, o->oPosX, o->oPosY, o->oPosZ);
src/game/behaviors/water_bomb_cannon.inc.c:                o->oForwardVel = 0.0f;
src/game/behaviors/water_bomb_cannon.inc.c:    if (o->oDistanceToMario < 2000.0f) {
src/game/behaviors/water_bomb_cannon.inc.c:        o->oAction = 1;
src/game/behaviors/water_bomb_cannon.inc.c:        o->oMoveAnglePitch = o->oWaterCannonUnkFC = 0x1C00;
src/game/behaviors/water_bomb_cannon.inc.c:    if (o->oDistanceToMario > 2500.0f) {
src/game/behaviors/water_bomb_cannon.inc.c:        o->oAction = 2;
src/game/behaviors/water_bomb_cannon.inc.c:    } else if (o->oBehParams2ndByte == 0) {
src/game/behaviors/water_bomb_cannon.inc.c:        if (o->oWaterCannonUnkF4 != 0) {
src/game/behaviors/water_bomb_cannon.inc.c:            o->oWaterCannonUnkF4 -= 1;
src/game/behaviors/water_bomb_cannon.inc.c:            obj_move_pitch_approach(o->oWaterCannonUnkFC, 0x80);
src/game/behaviors/water_bomb_cannon.inc.c:            obj_face_yaw_approach(o->oWaterCannonUnk100, 0x100);
src/game/behaviors/water_bomb_cannon.inc.c:            if ((s16) o->oFaceAngleYaw == (s16) o->oWaterCannonUnk100) {
src/game/behaviors/water_bomb_cannon.inc.c:                if (o->oWaterCannonUnkF8 != 0) {
src/game/behaviors/water_bomb_cannon.inc.c:                    o->oWaterCannonUnkF8 -= 1;
src/game/behaviors/water_bomb_cannon.inc.c:                    o->oWaterCannonUnkF4 = 70;
src/game/behaviors/water_bomb_cannon.inc.c:                    o->oWaterCannonUnkFC = 0x1000 + 0x400 * (random_u16() & 0x3);
src/game/behaviors/water_bomb_cannon.inc.c:                    o->oWaterCannonUnk100 = -0x2000 + o->oMoveAngleYaw + 0x1000 * (random_u16() % 5);
src/game/behaviors/water_bomb_cannon.inc.c:                    o->oWaterCannonUnkF8 = 60;
src/game/behaviors/water_bomb_cannon.inc.c:    o->oAction = 0;
src/game/behaviors/water_bomb_cannon.inc.c:    switch (o->oAction) {
src/game/behaviors/water_mist.inc.c:    o->oPosY = find_water_level(o->oHomeX, o->oHomeZ) + 20.0f;
src/game/behaviors/water_mist.inc.c:    o->oPosX = o->oHomeX + random_f32_around_zero(150.0f);
src/game/behaviors/water_mist.inc.c:    o->oPosZ = o->oHomeZ + random_f32_around_zero(150.0f);
src/game/behaviors/water_mist.inc.c:    o->oOpacity = random_float() * 50.0f + 200.0f;
src/game/behaviors/water_mist_particle.inc.c:    if (o->oTimer == 0) {
src/game/behaviors/water_mist_particle.inc.c:        o->oMoveAngleYaw = gMarioObject->oMoveAngleYaw;
src/game/behaviors/water_mist_particle.inc.c:    o->oOpacity -= 42;
src/game/behaviors/water_mist_particle.inc.c:    sp1C = (254 - o->oOpacity) / 254.0 * 1.0 + 0.5; // seen this before
src/game/behaviors/water_mist_particle.inc.c:    if (o->oOpacity < 2)
src/game/behaviors/water_objs.inc.c:    o->header.gfx.scale[0] = sins(o->oWaterObjUnkF4) * 0.5 + 4.0;
src/game/behaviors/water_objs.inc.c:    o->header.gfx.scale[1] = -sins(o->oWaterObjUnkF4) * 0.5 + 4.0;
src/game/behaviors/water_objs.inc.c:    o->oWaterObjUnkF4 += 0x400;
src/game/behaviors/water_objs.inc.c:    if (o->oTimer < 30) {
src/game/behaviors/water_objs.inc.c:        o->oPosY += 3.0f;
src/game/behaviors/water_objs.inc.c:        o->oMoveAngleYaw = obj_angle_to_object(o, gMarioObject);
src/game/behaviors/water_objs.inc.c:    o->oPosX += random_float() * 4.0f - 2.0f;
src/game/behaviors/water_objs.inc.c:    o->oPosZ += random_float() * 4.0f - 2.0f;
src/game/behaviors/water_objs.inc.c:    if (o->oInteractStatus & INT_STATUS_INTERACTED || o->oTimer > 200) {
src/game/behaviors/water_objs.inc.c:    if (find_water_level(o->oPosX, o->oPosZ) < o->oPosY)
src/game/behaviors/water_objs.inc.c:    o->oInteractStatus = 0;
src/game/behaviors/water_objs.inc.c:    o->oWaterObjUnkFC  = 0x800 + (s32)(random_float() * 2048.0f);
src/game/behaviors/water_objs.inc.c:    o->oWaterObjUnk100 = 0x800 + (s32)(random_float() * 2048.0f);
src/game/behaviors/water_objs.inc.c:    o->oPosY += random_float() * 3.0f + 6.0f;
src/game/behaviors/water_objs.inc.c:    o->oPosX += random_float() * 10.0f - 5.0f;
src/game/behaviors/water_objs.inc.c:    o->oPosZ += random_float() * 10.0f - 5.0f;
src/game/behaviors/water_objs.inc.c:    o->header.gfx.scale[0] = sins(o->oWaterObjUnkF4) * 0.2 + 1.0;
src/game/behaviors/water_objs.inc.c:    o->oWaterObjUnkF4 += o->oWaterObjUnkFC;
src/game/behaviors/water_objs.inc.c:    o->header.gfx.scale[1] = sins(o->oWaterObjUnkF8) * 0.2 + 1.0;
src/game/behaviors/water_objs.inc.c:    o->oWaterObjUnkF8 += o->oWaterObjUnk100;
src/game/behaviors/water_objs.inc.c:    f32 sp1C = find_water_level(o->oPosX, o->oPosZ);
src/game/behaviors/water_objs.inc.c:    o->header.gfx.scale[0] = sins(o->oWaterObjUnkF4) * 0.2 + 1.0;
src/game/behaviors/water_objs.inc.c:    o->oWaterObjUnkF4 += o->oWaterObjUnkFC;
src/game/behaviors/water_objs.inc.c:    o->header.gfx.scale[1] = sins(o->oWaterObjUnkF8) * 0.2 + 1.0;
src/game/behaviors/water_objs.inc.c:    o->oWaterObjUnkF8 += o->oWaterObjUnk100;
src/game/behaviors/water_objs.inc.c:    if (o->oPosY > sp1C) {
src/game/behaviors/water_objs.inc.c:        o->activeFlags = ACTIVE_FLAG_DEACTIVATED;
src/game/behaviors/water_objs.inc.c:        o->oPosY += 5.0f;
src/game/behaviors/water_objs.inc.c:    if (o->oInteractStatus & INT_STATUS_INTERACTED)
src/game/behaviors/water_objs.inc.c:    o->header.gfx.scale[0] = sins(o->oWaterObjUnkF4) * 0.5 + 2.0;
src/game/behaviors/water_objs.inc.c:    o->oWaterObjUnkF4 += o->oWaterObjUnkFC;
src/game/behaviors/water_objs.inc.c:    o->header.gfx.scale[1] = sins(o->oWaterObjUnkF8) * 0.5 + 2.0;
src/game/behaviors/water_objs.inc.c:    o->oWaterObjUnkF8 += o->oWaterObjUnk100;
src/game/behaviors/water_objs.inc.c:    o->oWaterObjUnkFC = 0x800 + (s32)(random_float() * 2048.0f);
src/game/behaviors/water_objs.inc.c:    o->oWaterObjUnk100 = 0x800 + (s32)(random_float() * 2048.0f);
src/game/behaviors/water_objs.inc.c:    f32 sp24 = find_water_level(o->oPosX, o->oPosZ);
src/game/behaviors/water_objs.inc.c:    o->oPosY += 5.0f;
src/game/behaviors/water_objs.inc.c:    if (o->oPosY > sp24 && o->oTimer) {
src/game/behaviors/water_objs.inc.c:    o->oPosY += 5.0f;
src/game/behaviors/water_pillar.inc.c:    switch (o->oAction) {
src/game/behaviors/water_pillar.inc.c:                o->oAction++;
src/game/behaviors/water_pillar.inc.c:            if (o->oTimer < 4)
src/game/behaviors/water_pillar.inc.c:                o->oPosY -= 20.0f;
src/game/behaviors/water_pillar.inc.c:                o->oAction++;
src/game/behaviors/water_pillar.inc.c:                    o->oAction++;
src/game/behaviors/water_pillar.inc.c:                    o->oAction++;
src/game/behaviors/water_pillar.inc.c:            if (o->oTimer < 300) {
src/game/behaviors/water_pillar.inc.c:                o->oAction++;
src/game/behaviors/water_pillar.inc.c:    if (o->oTimer == 0) {
src/game/behaviors/water_pillar.inc.c:        o->oPosY -= 80.0f;
src/game/behaviors/water_pillar.inc.c:        o->oWaterLevelPillarUnkF8 = 1;
src/game/behaviors/water_pillar.inc.c:    if (o->oWaterLevelPillarUnkF8)
src/game/behaviors/water_ring.inc.c:    f32 marioDistX = o->oPosX - gMarioObject->header.gfx.pos[0];
src/game/behaviors/water_ring.inc.c:    f32 marioDistY = o->oPosY - (gMarioObject->header.gfx.pos[1] + 80.0f);
src/game/behaviors/water_ring.inc.c:    f32 marioDistZ = o->oPosZ - gMarioObject->header.gfx.pos[2];
src/game/behaviors/water_ring.inc.c:    f32 marioDistInFront = marioDistX * o->oWaterRingNormalX + marioDistY * o->oWaterRingNormalY
src/game/behaviors/water_ring.inc.c:                           + marioDistZ * o->oWaterRingNormalZ;
src/game/behaviors/water_ring.inc.c:    o->oWaterRingScalePhaseX = (s32)(random_float() * 4096.0f) + 0x1000;
src/game/behaviors/water_ring.inc.c:    o->oWaterRingScalePhaseY = (s32)(random_float() * 4096.0f) + 0x1000;
src/game/behaviors/water_ring.inc.c:    o->oWaterRingScalePhaseZ = (s32)(random_float() * 4096.0f) + 0x1000;
src/game/behaviors/water_ring.inc.c:    o->oWaterRingNormalX = coss(o->oFaceAnglePitch) * sins(o->oFaceAngleRoll) * -1.0f;
src/game/behaviors/water_ring.inc.c:    o->oWaterRingNormalY = coss(o->oFaceAnglePitch) * coss(o->oFaceAngleRoll);
src/game/behaviors/water_ring.inc.c:    o->oWaterRingNormalZ = sins(o->oFaceAnglePitch);
src/game/behaviors/water_ring.inc.c:    o->oWaterRingMarioDistInFront = water_ring_calc_mario_dist();
src/game/behaviors/water_ring.inc.c:    // o->oFaceAngleYaw = 0;
src/game/behaviors/water_ring.inc.c:    // o->oFaceAngleRoll *= -1;
src/game/behaviors/water_ring.inc.c:    o->oOpacity = 70;
src/game/behaviors/water_ring.inc.c:    o->oFaceAnglePitch = 0x8000;
src/game/behaviors/water_ring.inc.c:        o->oWaterRingMarioDistInFront = marioDistInFront;
src/game/behaviors/water_ring.inc.c:    if (o->oWaterRingMarioDistInFront * marioDistInFront < 0) {
src/game/behaviors/water_ring.inc.c:        ringSpawner = o->parentObj;
src/game/behaviors/water_ring.inc.c:            if ((o->oWaterRingIndex == ringManager->oWaterRingMgrLastRingCollected + 1)
src/game/behaviors/water_ring.inc.c:                ringManager->oWaterRingMgrLastRingCollected = o->oWaterRingIndex;
src/game/behaviors/water_ring.inc.c:        o->oAction = WATER_RING_ACT_COLLECTED;
src/game/behaviors/water_ring.inc.c:    o->oWaterRingMarioDistInFront = marioDistInFront;
src/game/behaviors/water_ring.inc.c:    o->header.gfx.scale[0] = sins(o->oWaterRingScalePhaseX) * 0.1 + avgScale;
src/game/behaviors/water_ring.inc.c:    o->header.gfx.scale[1] = sins(o->oWaterRingScalePhaseY) * 0.5 + avgScale;
src/game/behaviors/water_ring.inc.c:    o->header.gfx.scale[2] = sins(o->oWaterRingScalePhaseZ) * 0.1 + avgScale;
src/game/behaviors/water_ring.inc.c:    o->oWaterRingScalePhaseX += 0x1700;
src/game/behaviors/water_ring.inc.c:    o->oWaterRingScalePhaseY += 0x1700;
src/game/behaviors/water_ring.inc.c:    o->oWaterRingScalePhaseZ += 0x1700;
src/game/behaviors/water_ring.inc.c:    f32 avgScale = (f32) o->oTimer * 0.2 + o->oWaterRingAvgScale;
src/game/behaviors/water_ring.inc.c:    if (o->oTimer >= 21)
src/game/behaviors/water_ring.inc.c:        o->activeFlags = ACTIVE_FLAG_DEACTIVATED;
src/game/behaviors/water_ring.inc.c:    o->oOpacity -= 10;
src/game/behaviors/water_ring.inc.c:    if (o->oOpacity < 0)
src/game/behaviors/water_ring.inc.c:        o->oOpacity = 0;
src/game/behaviors/water_ring.inc.c:    f32 avgScale = (f32) o->oTimer / 225.0 * 3.0 + 0.5;
src/game/behaviors/water_ring.inc.c:    struct Object *ringSpawner = o->parentObj;
src/game/behaviors/water_ring.inc.c:    if (o->oTimer >= 226) {
src/game/behaviors/water_ring.inc.c:        o->oOpacity -= 2;
src/game/behaviors/water_ring.inc.c:        if (o->oOpacity < 3)
src/game/behaviors/water_ring.inc.c:            o->activeFlags = ACTIVE_FLAG_DEACTIVATED;
src/game/behaviors/water_ring.inc.c:    o->oPosY += 10.0f;
src/game/behaviors/water_ring.inc.c:    o->oFaceAngleYaw += 0x100;
src/game/behaviors/water_ring.inc.c:        && o->oWaterRingIndex == ringManager->oWaterRingMgrLastRingCollected + 1)
src/game/behaviors/water_ring.inc.c:        o->oOpacity = sins(o->oTimer * 0x1000) * 200.0f + 50.0f;
src/game/behaviors/water_ring.inc.c:    o->oWaterRingAvgScale = avgScale;
src/game/behaviors/water_ring.inc.c:    switch (o->oAction) {
src/game/behaviors/water_ring.inc.c:    o->parentObj = ringManager;
src/game/behaviors/water_ring.inc.c:    struct Object *currentObj = o->parentObj;
src/game/behaviors/water_ring.inc.c:    if (o->oTimer == 300)
src/game/behaviors/water_ring.inc.c:        o->oTimer = 0;
src/game/behaviors/water_ring.inc.c:    if ((o->oTimer == 0) || (o->oTimer == 50) || (o->oTimer == 150) || (o->oTimer == 200)
src/game/behaviors/water_ring.inc.c:        || (o->oTimer == 250)) {
src/game/behaviors/water_ring.inc.c:    switch (o->oAction) {
src/game/behaviors/water_ring.inc.c:            if (o->oWaterRingSpawnerRingsCollected == 5) {
src/game/behaviors/water_ring.inc.c:                o->oAction = JS_RING_SPAWNER_ACT_INACTIVE;
src/game/behaviors/water_ring.inc.c:    o->oOpacity = 150;
src/game/behaviors/water_ring.inc.c:    f32 avgScale = (f32) o->oTimer / 50.0f * 1.3 + 0.1;
src/game/behaviors/water_ring.inc.c:    struct Object *ringSpawner = o->parentObj;
src/game/behaviors/water_ring.inc.c:    if (o->oTimer >= 151) {
src/game/behaviors/water_ring.inc.c:        o->oOpacity -= 2;
src/game/behaviors/water_ring.inc.c:        if (o->oOpacity < 3)
src/game/behaviors/water_ring.inc.c:            o->activeFlags = ACTIVE_FLAG_DEACTIVATED;
src/game/behaviors/water_ring.inc.c:        && o->oWaterRingIndex == ringManager->oWaterRingMgrLastRingCollected + 1)
src/game/behaviors/water_ring.inc.c:        o->oOpacity = sins(o->oTimer * 0x1000) * 200.0f + 50.0f;
src/game/behaviors/water_ring.inc.c:    o->oWaterRingAvgScale = avgScale;
src/game/behaviors/water_ring.inc.c:    switch (o->oAction) {
src/game/behaviors/water_splashes_and_waves.inc.c:    if (o->oTimer == 0)
src/game/behaviors/water_splashes_and_waves.inc.c:        o->oPosY = find_water_level(o->oPosX, o->oPosZ);
src/game/behaviors/water_splashes_and_waves.inc.c:    if (o->oPosY > -10000.0f) // Make sure it is not at the default water level
src/game/behaviors/water_splashes_and_waves.inc.c:    f32 waterLevel = find_water_level(o->oPosX, o->oPosZ);
src/game/behaviors/water_splashes_and_waves.inc.c:    if (o->oTimer == 0) {
src/game/behaviors/water_splashes_and_waves.inc.c:            o->header.gfx.node.flags &= ~GRAPH_RENDER_BILLBOARD;
src/game/behaviors/water_splashes_and_waves.inc.c:            o->header.gfx.node.flags |= GRAPH_RENDER_BILLBOARD;
src/game/behaviors/water_splashes_and_waves.inc.c:        o->oFaceAngleYaw = random_u16();
src/game/behaviors/water_splashes_and_waves.inc.c:    o->oVelY -= 4.0f;
src/game/behaviors/water_splashes_and_waves.inc.c:    o->oPosY += o->oVelY;
src/game/behaviors/water_splashes_and_waves.inc.c:    if (o->oVelY < 0.0f) {
src/game/behaviors/water_splashes_and_waves.inc.c:        if (waterLevel > o->oPosY) {
src/game/behaviors/water_splashes_and_waves.inc.c:        } else if (o->oTimer > 20)
src/game/behaviors/water_splashes_and_waves.inc.c:    o->oPosY = gMarioStates->waterLevel + 5;
src/game/behaviors/water_splashes_and_waves.inc.c:        o->activeFlags = ACTIVE_FLAG_DEACTIVATED;
src/game/behaviors/water_splashes_and_waves.inc.c:    f32 waterLevel = find_water_level(o->oPosX, o->oPosZ);
src/game/behaviors/water_splashes_and_waves.inc.c:    o->oPosY = waterLevel + 5.0f;
src/game/behaviors/water_splashes_and_waves.inc.c:    f32 waterLevel = find_water_level(o->oPosX, o->oPosZ);
src/game/behaviors/water_splashes_and_waves.inc.c:    if (o->oTimer == 0)
src/game/behaviors/water_splashes_and_waves.inc.c:    o->oPosY = waterLevel + 5.0f;
src/game/behaviors/water_splashes_and_waves.inc.c:    if (o->oTimer == 0)
src/game/behaviors/water_splashes_and_waves.inc.c:        o->oWaveTrailSize = o->header.gfx.scale[0];
src/game/behaviors/water_splashes_and_waves.inc.c:    if (o->oAnimState > 3) {
src/game/behaviors/water_splashes_and_waves.inc.c:        o->oWaveTrailSize = o->oWaveTrailSize - 0.1; // Shrink the wave
src/game/behaviors/water_splashes_and_waves.inc.c:        if (o->oWaveTrailSize < 0.0f)
src/game/behaviors/water_splashes_and_waves.inc.c:            o->oWaveTrailSize = 0.0f;
src/game/behaviors/water_splashes_and_waves.inc.c:        o->header.gfx.scale[0] = o->oWaveTrailSize;
src/game/behaviors/water_splashes_and_waves.inc.c:        o->header.gfx.scale[2] = o->oWaveTrailSize;
src/game/behaviors/water_wave.inc.c:    o->oPosY = find_water_level(o->oPosX, o->oPosZ);
src/game/behaviors/water_wave.inc.c:        o->activeFlags = ACTIVE_FLAG_DEACTIVATED;
src/game/behaviors/wdw_water_level.inc.c:        gEnvironmentRegions[6] = *gEnvironmentLevels + sins(o->oWaterLevelTriggerUnkF4) * 20.0f;
src/game/behaviors/wdw_water_level.inc.c:        switch (o->oAction) {
src/game/behaviors/wdw_water_level.inc.c:                o->oFaceAngleYaw = 0;
src/game/behaviors/wdw_water_level.inc.c:                o->oWaterLevelTriggerTargetWaterLevel = (s32) o->oPosY;
src/game/behaviors/wdw_water_level.inc.c:                if (o->oTimer > 10)
src/game/behaviors/wdw_water_level.inc.c:                    o->oAction++; // Sets to WATER_LEVEL_DIAMOND_ACT_IDLE
src/game/behaviors/wdw_water_level.inc.c:                        o->oAction++; // Sets to WATER_LEVEL_DIAMOND_ACT_CHANGE_WATER_LEVEL
src/game/behaviors/wdw_water_level.inc.c:                o->oAngleVelYaw = 0;
src/game/behaviors/wdw_water_level.inc.c:                    (f32) *gEnvironmentLevels, (f32) o->oWaterLevelTriggerTargetWaterLevel, 10.0f);
src/game/behaviors/wdw_water_level.inc.c:                if (*gEnvironmentLevels == o->oWaterLevelTriggerTargetWaterLevel) {
src/game/behaviors/wdw_water_level.inc.c:                    if ((s16) o->oFaceAngleYaw == 0)
src/game/behaviors/wdw_water_level.inc.c:                        o->oAction++; // Sets to WATER_LEVEL_DIAMOND_ACT_IDLE_SPINNING
src/game/behaviors/wdw_water_level.inc.c:                        o->oAngleVelYaw = 0x800;
src/game/behaviors/wdw_water_level.inc.c:                    if (o->oTimer == 0)
src/game/behaviors/wdw_water_level.inc.c:                        if (*gEnvironmentLevels > o->oWaterLevelTriggerTargetWaterLevel)
src/game/behaviors/wdw_water_level.inc.c:                    o->oAngleVelYaw = 0x800;
src/game/behaviors/wdw_water_level.inc.c:                    o->oAction = WATER_LEVEL_DIAMOND_ACT_IDLE;
src/game/behaviors/wdw_water_level.inc.c:                    o->oAngleVelYaw = 0;
src/game/behaviors/wdw_water_level.inc.c:        o->oFaceAngleYaw += o->oAngleVelYaw;
src/game/behaviors/whirlpool.inc.c:    o->oWhirlpoolInitFacePitch = o->oFaceAnglePitch;
src/game/behaviors/whirlpool.inc.c:    o->oWhirlpoolInitFaceRoll = o->oFaceAngleRoll;
src/game/behaviors/whirlpool.inc.c:    o->oFaceAnglePitch = 0;
src/game/behaviors/whirlpool.inc.c:    o->oFaceAngleRoll = 0;
src/game/behaviors/whirlpool.inc.c:    f32 cosPitch = coss(o->oFaceAnglePitch);
src/game/behaviors/whirlpool.inc.c:    f32 sinPitch = sins(o->oFaceAnglePitch);
src/game/behaviors/whirlpool.inc.c:    f32 cosRoll = coss(o->oFaceAngleRoll);
src/game/behaviors/whirlpool.inc.c:    f32 sinRoll = sins(o->oFaceAngleRoll);
src/game/behaviors/whirlpool.inc.c:    if (o->oDistanceToMario < 5000.0f) {
src/game/behaviors/whirlpool.inc.c:        o->header.gfx.node.flags &= ~GRAPH_RENDER_INVISIBLE;
src/game/behaviors/whirlpool.inc.c:        gEnvFxBubbleConfig[ENVFX_STATE_SRC_X] = o->oPosX;
src/game/behaviors/whirlpool.inc.c:        gEnvFxBubbleConfig[ENVFX_STATE_SRC_Z] = o->oPosZ;
src/game/behaviors/whirlpool.inc.c:        gEnvFxBubbleConfig[ENVFX_STATE_DEST_X] = o->oPosX;
src/game/behaviors/whirlpool.inc.c:        gEnvFxBubbleConfig[ENVFX_STATE_DEST_Y] = o->oPosY;
src/game/behaviors/whirlpool.inc.c:        gEnvFxBubbleConfig[ENVFX_STATE_DEST_Z] = o->oPosZ;
src/game/behaviors/whirlpool.inc.c:        gEnvFxBubbleConfig[ENVFX_STATE_SRC_Y] = o->oPosY + 800.0f;
src/game/behaviors/whirlpool.inc.c:        gEnvFxBubbleConfig[ENVFX_STATE_PITCH] = o->oWhirlpoolInitFacePitch;
src/game/behaviors/whirlpool.inc.c:        gEnvFxBubbleConfig[ENVFX_STATE_YAW] = o->oWhirlpoolInitFaceRoll;
src/game/behaviors/whirlpool.inc.c:        o->oFaceAngleYaw += 0x1F40;
src/game/behaviors/whirlpool.inc.c:        o->header.gfx.node.flags |= GRAPH_RENDER_INVISIBLE;
src/game/behaviors/whirlpool.inc.c:    if (o->oDistanceToMario < 5000.0f) {
src/game/behaviors/whirlpool.inc.c:        gEnvFxBubbleConfig[ENVFX_STATE_SRC_X] = o->oPosX;
src/game/behaviors/whirlpool.inc.c:        gEnvFxBubbleConfig[ENVFX_STATE_SRC_Y] = o->oPosY;
src/game/behaviors/whirlpool.inc.c:        gEnvFxBubbleConfig[ENVFX_STATE_SRC_Z] = o->oPosZ;
src/game/behaviors/white_puff.inc.c:    if (o->oTimer == 0) {
src/game/behaviors/white_puff.inc.c:        o->oPosY += 30.0f;
src/game/behaviors/white_puff.inc.c:    cur_obj_scale(o->oTimer * sp18 + sp1C);
src/game/behaviors/white_puff.inc.c:    o->oOpacity = 50;
src/game/behaviors/white_puff.inc.c:    if (o->oTimer > 4)
src/game/behaviors/white_puff.inc.c:    if (o->oTimer == 0)
src/game/behaviors/white_puff_explode.inc.c:    if (o->oTimer == 0) {
src/game/behaviors/white_puff_explode.inc.c:        o->oWhitePuffUnkF4 = o->header.gfx.scale[0];
src/game/behaviors/white_puff_explode.inc.c:        switch (o->oBehParams2ndByte) {
src/game/behaviors/white_puff_explode.inc.c:                o->oOpacity = 254;
src/game/behaviors/white_puff_explode.inc.c:                o->oWhitePuffUnkF8 = -21;
src/game/behaviors/white_puff_explode.inc.c:                o->oWhitePuffUnkFC = 0;
src/game/behaviors/white_puff_explode.inc.c:                o->oOpacity = 254;
src/game/behaviors/white_puff_explode.inc.c:                o->oWhitePuffUnkF8 = -13;
src/game/behaviors/white_puff_explode.inc.c:                o->oWhitePuffUnkFC = 1;
src/game/behaviors/white_puff_explode.inc.c:    cur_obj_apply_drag_xz(o->oDragStrength);
src/game/behaviors/white_puff_explode.inc.c:    if (o->oVelY > 100.0f)
src/game/behaviors/white_puff_explode.inc.c:        o->oVelY = 100.0f;
src/game/behaviors/white_puff_explode.inc.c:    if (o->oTimer > 20)
src/game/behaviors/white_puff_explode.inc.c:    if (o->oOpacity) {
src/game/behaviors/white_puff_explode.inc.c:        o->oOpacity += o->oWhitePuffUnkF8;
src/game/behaviors/white_puff_explode.inc.c:        if (o->oOpacity < 2)
src/game/behaviors/white_puff_explode.inc.c:        if (o->oWhitePuffUnkFC)
src/game/behaviors/white_puff_explode.inc.c:            sp24 = o->oWhitePuffUnkF4 * ((254 - o->oOpacity) / 254.0);
src/game/behaviors/white_puff_explode.inc.c:            sp24 = o->oWhitePuffUnkF4 * (o->oOpacity / 254.0);
src/game/behaviors/whomp.inc.c:    UNUSED s32 sp2C = o->header.gfx.unk38.animFrame;
src/game/behaviors/whomp.inc.c:    if (o->oForwardVel < 5.0f) {
src/game/behaviors/whomp.inc.c:    if (o->oBehParams2ndByte != 0) {
src/game/behaviors/whomp.inc.c:        if (o->oSubAction == 0) {
src/game/behaviors/whomp.inc.c:            if (o->oDistanceToMario < 600.0f) {
src/game/behaviors/whomp.inc.c:                o->oSubAction++;
src/game/behaviors/whomp.inc.c:                o->oHealth = 3;
src/game/behaviors/whomp.inc.c:            o->oAction = 2;
src/game/behaviors/whomp.inc.c:    } else if (o->oDistanceToMario < 500.0f)
src/game/behaviors/whomp.inc.c:        o->oAction = 1;
src/game/behaviors/whomp.inc.c:    if (o->oSubAction == 0) {
src/game/behaviors/whomp.inc.c:        o->oForwardVel = 0.0f;
src/game/behaviors/whomp.inc.c:        if (o->oTimer > 31)
src/game/behaviors/whomp.inc.c:            o->oSubAction++;
src/game/behaviors/whomp.inc.c:            o->oMoveAngleYaw += 0x400;
src/game/behaviors/whomp.inc.c:        o->oForwardVel = 3.0f;
src/game/behaviors/whomp.inc.c:        if (o->oTimer > 42)
src/game/behaviors/whomp.inc.c:            o->oAction = 1;
src/game/behaviors/whomp.inc.c:    sp26 = abs_angle_diff(o->oAngleToMario, o->oMoveAngleYaw);
src/game/behaviors/whomp.inc.c:    o->oForwardVel = 3.0f;
src/game/behaviors/whomp.inc.c:        o->oAction = 7;
src/game/behaviors/whomp.inc.c:        if (o->oDistanceToMario < 1500.0f) {
src/game/behaviors/whomp.inc.c:            o->oForwardVel = 9.0f;
src/game/behaviors/whomp.inc.c:        if (o->oDistanceToMario < 300.0f)
src/game/behaviors/whomp.inc.c:            o->oAction = 3;
src/game/behaviors/whomp.inc.c:    //o->oForwardVel = 3.0f;
src/game/behaviors/whomp.inc.c:    o->oPosX = o->oHomeX;
src/game/behaviors/whomp.inc.c:    o->oPosZ = o->oHomeZ;
src/game/behaviors/whomp.inc.c:    cur_obj_rotate_yaw_toward(o->oAngleToMario, 0x200);
src/game/behaviors/whomp.inc.c:    if (o->oTimer > 30) {
src/game/behaviors/whomp.inc.c:        sp1E = abs_angle_diff(o->oAngleToMario, o->oMoveAngleYaw);
src/game/behaviors/whomp.inc.c:            if (o->oDistanceToMario < 1500.0f) {
src/game/behaviors/whomp.inc.c:                o->oForwardVel = 9.0f;
src/game/behaviors/whomp.inc.c:            if (o->oDistanceToMario < 800.0f)
src/game/behaviors/whomp.inc.c:                o->oAction = 3;
src/game/behaviors/whomp.inc.c:    if ((gMarioState->floorHeight > gMarioState->pos[1]-.1f) && (gMarioObject->platform != o)&&(o->oHealth < 3)) {
src/game/behaviors/whomp.inc.c:        o->oAction = 0;
src/game/behaviors/whomp.inc.c:        o->oHealth = 3;
src/game/behaviors/whomp.inc.c:    o->oForwardVel = 0.0f;
src/game/behaviors/whomp.inc.c:        o->oAction = 4;
src/game/behaviors/whomp.inc.c:    if (o->oTimer == 0)
src/game/behaviors/whomp.inc.c:        o->oVelY = 40.0f;
src/game/behaviors/whomp.inc.c:    if (o->oTimer < 8) {
src/game/behaviors/whomp.inc.c:        o->oAngleVelPitch += 0x100;
src/game/behaviors/whomp.inc.c:        o->oFaceAnglePitch += o->oAngleVelPitch;
src/game/behaviors/whomp.inc.c:        if (o->oFaceAnglePitch > 0x4000) {
src/game/behaviors/whomp.inc.c:            o->oAngleVelPitch = 0;
src/game/behaviors/whomp.inc.c:            o->oFaceAnglePitch = 0x4000;
src/game/behaviors/whomp.inc.c:            o->oAction = 5;
src/game/behaviors/whomp.inc.c:    if (o->oSubAction == 0 && o->oMoveFlags & 1) {
src/game/behaviors/whomp.inc.c:        o->oVelY = 0.0f;
src/game/behaviors/whomp.inc.c:        o->oSubAction++;
src/game/behaviors/whomp.inc.c:    if (o->oMoveFlags & 2)
src/game/behaviors/whomp.inc.c:        o->oAction = 6;
src/game/behaviors/whomp.inc.c:    if (o->oSubAction == 0) {
src/game/behaviors/whomp.inc.c:            o->oHealth--;
src/game/behaviors/whomp.inc.c:            if (o->oHealth == 0)
src/game/behaviors/whomp.inc.c:                o->oAction = 8;
src/game/behaviors/whomp.inc.c:                vec3f_copy_2(pos, &o->oPosX);
src/game/behaviors/whomp.inc.c:                vec3f_copy_2(&o->oPosX, &gMarioObject->oPosX);
src/game/behaviors/whomp.inc.c:                vec3f_copy_2(&o->oPosX, pos);
src/game/behaviors/whomp.inc.c:            o->oSubAction++;
src/game/behaviors/whomp.inc.c:        o->oWhompShakeVal = 0;
src/game/behaviors/whomp.inc.c:        if (o->oWhompShakeVal < 10) {
src/game/behaviors/whomp.inc.c:            if (o->oWhompShakeVal % 2)
src/game/behaviors/whomp.inc.c:                o->oPosY += 8.0f;
src/game/behaviors/whomp.inc.c:                o->oPosY -= 8.0f;
src/game/behaviors/whomp.inc.c:            o->oSubAction = 10;
src/game/behaviors/whomp.inc.c:        o->oWhompShakeVal++;
src/game/behaviors/whomp.inc.c:    if (o->oSubAction == 0) {
src/game/behaviors/whomp.inc.c:                o->oNumLootCoins = 5;
src/game/behaviors/whomp.inc.c:                o->oAction = 8;
src/game/behaviors/whomp.inc.c:                o->oSubAction++;
src/game/behaviors/whomp.inc.c:        o->oSubAction = 0;
src/game/behaviors/whomp.inc.c:    if (o->oBehParams2ndByte!=0) {
src/game/behaviors/whomp.inc.c:    if (o->oSubAction != 10) {
src/game/behaviors/whomp.inc.c:        o->oForwardVel = 0.0f;
src/game/behaviors/whomp.inc.c:        o->oAngleVelPitch = 0;
src/game/behaviors/whomp.inc.c:        o->oAngleVelYaw = 0;
src/game/behaviors/whomp.inc.c:        o->oAngleVelRoll = 0;
src/game/behaviors/whomp.inc.c:        if (o->oBehParams2ndByte != 0)
src/game/behaviors/whomp.inc.c:        if (o->oTimer > time || (gMarioState->action == ACT_SQUISHED && o->oTimer > 30))
src/game/behaviors/whomp.inc.c:            o->oSubAction = 10;
src/game/behaviors/whomp.inc.c:        if (o->oFaceAnglePitch > 0) {
src/game/behaviors/whomp.inc.c:            o->oAngleVelPitch = -0x200;
src/game/behaviors/whomp.inc.c:            o->oFaceAnglePitch += o->oAngleVelPitch;
src/game/behaviors/whomp.inc.c:            o->oAngleVelPitch = 0;
src/game/behaviors/whomp.inc.c:            o->oFaceAnglePitch = 0;
src/game/behaviors/whomp.inc.c:            if (o->oBehParams2ndByte != 0)
src/game/behaviors/whomp.inc.c:                o->oAction = 2;
src/game/behaviors/whomp.inc.c:                o->oAction = 1;
src/game/behaviors/whomp.inc.c:    if (o->oBehParams2ndByte != 0) {
src/game/behaviors/whomp.inc.c:            o->oPosY += 100.0f;
src/game/behaviors/whomp.inc.c:            spawn_default_star(o->oHomeX,o->oHomeY+500.0f,o->oHomeZ);
src/game/behaviors/whomp.inc.c:            o->oAction = 9;
src/game/behaviors/whomp.inc.c:    if (o->oTimer == 60)
src/game/behaviors/whomp.inc.c:    if (o->oAction != 9) {
src/game/behaviors/whomp.inc.c:        if (o->oBehParams2ndByte != 0)
src/game/behaviors/wiggler.inc.c:    struct ChainSegment *segment = &o->parentObj->oWigglerSegments[o->oBehParams2ndByte];
src/game/behaviors/wiggler.inc.c:    cur_obj_scale(o->parentObj->header.gfx.scale[0]);
src/game/behaviors/wiggler.inc.c:    o->oFaceAnglePitch = segment->pitch;
src/game/behaviors/wiggler.inc.c:    o->oFaceAngleYaw = segment->yaw;
src/game/behaviors/wiggler.inc.c:    posOffset = -37.5f * o->header.gfx.scale[0];
src/game/behaviors/wiggler.inc.c:    dy = posOffset * coss(o->oFaceAnglePitch) - posOffset;
src/game/behaviors/wiggler.inc.c:    dxz = posOffset * sins(o->oFaceAnglePitch);
src/game/behaviors/wiggler.inc.c:    dx = dxz * sins(o->oFaceAngleYaw);
src/game/behaviors/wiggler.inc.c:    dz = dxz * coss(o->oFaceAngleYaw);
src/game/behaviors/wiggler.inc.c:    o->oPosX = segment->posX + dx;
src/game/behaviors/wiggler.inc.c:    o->oPosY = segment->posY + dy;
src/game/behaviors/wiggler.inc.c:    o->oPosZ = segment->posZ + dz;
src/game/behaviors/wiggler.inc.c:    if (o->oPosY < o->parentObj->oWigglerFallThroughFloorsHeight) {
src/game/behaviors/wiggler.inc.c:        o->oPosY += -30.0f;
src/game/behaviors/wiggler.inc.c:        if (o->oFloorHeight > o->oPosY) // TODO: Check ineq swap
src/game/behaviors/wiggler.inc.c:            o->oPosY = o->oFloorHeight;
src/game/behaviors/wiggler.inc.c:    segment->posY = o->oPosY;
src/game/behaviors/wiggler.inc.c:    cur_obj_init_animation_with_accel_and_sound(0, o->parentObj->oWigglerWalkAnimSpeed);
src/game/behaviors/wiggler.inc.c:    if (o->parentObj->oWigglerWalkAnimSpeed == 0.0f) {
src/game/behaviors/wiggler.inc.c:    if (o->parentObj->oAction == WIGGLER_ACT_SHRINK) {
src/game/behaviors/wiggler.inc.c:        obj_check_attacks(&sWigglerBodyPartHitbox, o->oAction);
src/game/behaviors/wiggler.inc.c:        o->oWigglerSegments = segments;
src/game/behaviors/wiggler.inc.c:            (segments + i)->posX = o->oPosX;
src/game/behaviors/wiggler.inc.c:            (segments + i)->posY = o->oPosY;
src/game/behaviors/wiggler.inc.c:            (segments + i)->posZ = o->oPosZ;
src/game/behaviors/wiggler.inc.c:            (segments + i)->pitch = o->oFaceAnglePitch;
src/game/behaviors/wiggler.inc.c:            (segments + i)->yaw = o->oFaceAngleYaw;
src/game/behaviors/wiggler.inc.c:        o->header.gfx.unk38.animFrame = -1;
src/game/behaviors/wiggler.inc.c:        o->oAction = WIGGLER_ACT_WALK;
src/game/behaviors/wiggler.inc.c:    o->oHealth = 4; // This fixes Wiggler reading UB on his first frame of his acceleration, as his health is not set.
src/game/behaviors/wiggler.inc.c:    segmentLength = 35.0f * o->header.gfx.scale[0];
src/game/behaviors/wiggler.inc.c:        prevBodyPart = &o->oWigglerSegments[i - 1];
src/game/behaviors/wiggler.inc.c:        bodyPart = &o->oWigglerSegments[i];
src/game/behaviors/wiggler.inc.c:    o->oWigglerWalkAnimSpeed = 0.06f * o->oForwardVel;
src/game/behaviors/wiggler.inc.c:    if (o->oWigglerTextStatus < WIGGLER_TEXT_STATUS_COMPLETED_DIALOG) {
src/game/behaviors/wiggler.inc.c:        if (o->oWigglerTextStatus == WIGGLER_TEXT_STATUS_AWAIT_DIALOG) {
src/game/behaviors/wiggler.inc.c:            o->oWigglerTextStatus = WIGGLER_TEXT_STATUS_SHOWING_DIALOG;
src/game/behaviors/wiggler.inc.c:        if (gMarioObject->oPosY < o->oPosY || cur_obj_update_dialog_with_cutscene(2, 0, CUTSCENE_DIALOG, DIALOG_150) != 0) {
src/game/behaviors/wiggler.inc.c:            o->oWigglerTextStatus = WIGGLER_TEXT_STATUS_COMPLETED_DIALOG;
src/game/behaviors/wiggler.inc.c:        obj_forward_vel_approach(sWigglerSpeeds[o->oHealth - 1], 1.0f);
src/game/behaviors/wiggler.inc.c:        if (o->oWigglerWalkAwayFromWallTimer != 0) {
src/game/behaviors/wiggler.inc.c:            o->oWigglerWalkAwayFromWallTimer -= 1;
src/game/behaviors/wiggler.inc.c:            if (o->oDistanceToMario >= 25000.0f) {
src/game/behaviors/wiggler.inc.c:                o->oWigglerTargetYaw = o->oAngleToMario;
src/game/behaviors/wiggler.inc.c:            if (obj_bounce_off_walls_edges_objects(&o->oWigglerTargetYaw)) {
src/game/behaviors/wiggler.inc.c:                o->oWigglerWalkAwayFromWallTimer = random_linear_offset(30, 30);
src/game/behaviors/wiggler.inc.c:                if (o->oHealth < 4) {
src/game/behaviors/wiggler.inc.c:                    o->oWigglerTargetYaw = o->oAngleToMario;
src/game/behaviors/wiggler.inc.c:                } else if (o->oWigglerTimeUntilRandomTurn != 0) {
src/game/behaviors/wiggler.inc.c:                    o->oWigglerTimeUntilRandomTurn -= 1;
src/game/behaviors/wiggler.inc.c:                    o->oWigglerTargetYaw = o->oMoveAngleYaw + 0x4000 * (s16) random_sign();
src/game/behaviors/wiggler.inc.c:                    o->oWigglerTimeUntilRandomTurn = random_linear_offset(30, 50);
src/game/behaviors/wiggler.inc.c:        yawTurnSpeed = (s16)(30.0f * o->oForwardVel);
src/game/behaviors/wiggler.inc.c:        cur_obj_rotate_yaw_toward(o->oWigglerTargetYaw, yawTurnSpeed);
src/game/behaviors/wiggler.inc.c:        obj_face_yaw_approach(o->oMoveAngleYaw, 2 * yawTurnSpeed);
src/game/behaviors/wiggler.inc.c:        if (o->oTimer < 60) {
src/game/behaviors/wiggler.inc.c:            obj_check_attacks(&sWigglerHitbox, o->oAction);
src/game/behaviors/wiggler.inc.c:        } else if (obj_handle_attacks(&sWigglerHitbox, o->oAction, sWigglerAttackHandlers)) {
src/game/behaviors/wiggler.inc.c:            if (o->oAction != WIGGLER_ACT_JUMPED_ON) {
src/game/behaviors/wiggler.inc.c:                o->oAction = WIGGLER_ACT_KNOCKBACK;
src/game/behaviors/wiggler.inc.c:            o->oWigglerWalkAwayFromWallTimer = 0;
src/game/behaviors/wiggler.inc.c:            o->oWigglerWalkAnimSpeed = 0.0f;
src/game/behaviors/wiggler.inc.c:    if (approach_f32_ptr(&o->oWigglerSquishSpeed, 0.0f, 0.05f)) {
src/game/behaviors/wiggler.inc.c:        approach_f32_ptr(&o->header.gfx.scale[1], 4.0f, 0.2f);
src/game/behaviors/wiggler.inc.c:        o->header.gfx.scale[1] -= o->oWigglerSquishSpeed;
src/game/behaviors/wiggler.inc.c:    if (o->header.gfx.scale[1] >= 4.0f) {
src/game/behaviors/wiggler.inc.c:        if (o->oTimer > 30) {
src/game/behaviors/wiggler.inc.c:            if (cur_obj_update_dialog_with_cutscene(2, 0, CUTSCENE_DIALOG, attackText[o->oHealth - 2]) != 0) {
src/game/behaviors/wiggler.inc.c:                if (--o->oHealth == 1) {
src/game/behaviors/wiggler.inc.c:                    o->oAction = WIGGLER_ACT_SHRINK;
src/game/behaviors/wiggler.inc.c:                    o->oAction = WIGGLER_ACT_WALK;
src/game/behaviors/wiggler.inc.c:                    o->oMoveAngleYaw = o->oFaceAngleYaw;
src/game/behaviors/wiggler.inc.c:                    if (o->oHealth == 2) {
src/game/behaviors/wiggler.inc.c:                        o->oForwardVel = 10.0f;
src/game/behaviors/wiggler.inc.c:                        o->oVelY = 70.0f;
src/game/behaviors/wiggler.inc.c:        o->oTimer = 0;
src/game/behaviors/wiggler.inc.c:    obj_check_attacks(&sWigglerHitbox, o->oAction);
src/game/behaviors/wiggler.inc.c:    if (o->oVelY > 0.0f) {
src/game/behaviors/wiggler.inc.c:        o->oFaceAnglePitch -= o->oVelY * 30.0f;
src/game/behaviors/wiggler.inc.c:    if (obj_forward_vel_approach(0.0f, 1.0f) && o->oFaceAnglePitch == 0) {
src/game/behaviors/wiggler.inc.c:        o->oAction = WIGGLER_ACT_WALK;
src/game/behaviors/wiggler.inc.c:        o->oMoveAngleYaw = o->oFaceAngleYaw;
src/game/behaviors/wiggler.inc.c:    obj_check_attacks(&sWigglerHitbox, o->oAction);
src/game/behaviors/wiggler.inc.c:    if (o->oTimer >= 20) {
src/game/behaviors/wiggler.inc.c:        if (o->oTimer == 20) {
src/game/behaviors/wiggler.inc.c:        if (approach_f32_ptr(&o->header.gfx.scale[0], 1.0f, 0.1f)) {
src/game/behaviors/wiggler.inc.c:            o->oAction = WIGGLER_ACT_FALL_THROUGH_FLOOR;
src/game/behaviors/wiggler.inc.c:        cur_obj_scale(o->header.gfx.scale[0]);
src/game/behaviors/wiggler.inc.c:    if (o->oTimer == 60) {
src/game/behaviors/wiggler.inc.c:        o->oWigglerFallThroughFloorsHeight = 1700.0f;
src/game/behaviors/wiggler.inc.c:    } else if (o->oTimer > 60) {
src/game/behaviors/wiggler.inc.c:        if (o->oPosY < o->oWigglerFallThroughFloorsHeight) {
src/game/behaviors/wiggler.inc.c:            o->oAction = WIGGLER_ACT_WALK;
src/game/behaviors/wiggler.inc.c:            o->oFaceAnglePitch = obj_get_pitch_from_vel();
src/game/behaviors/wiggler.inc.c:    o->oAction = WIGGLER_ACT_JUMPED_ON;
src/game/behaviors/wiggler.inc.c:    o->oForwardVel = o->oVelY = 0.0f;
src/game/behaviors/wiggler.inc.c:    o->oWigglerSquishSpeed = 0.4f;
src/game/behaviors/wiggler.inc.c:    if (o->oAction == WIGGLER_ACT_UNINITIALIZED) {
src/game/behaviors/wiggler.inc.c:        if (o->oAction == WIGGLER_ACT_FALL_THROUGH_FLOOR) {
src/game/behaviors/wiggler.inc.c:            cur_obj_init_animation_with_accel_and_sound(0, o->oWigglerWalkAnimSpeed);
src/game/behaviors/wiggler.inc.c:            if (o->oWigglerWalkAnimSpeed != 0.0f) {
src/game/behaviors/wiggler.inc.c:                              o->oHealth >= 4 ? SOUND_OBJ_WIGGLER_LOW_PITCH : SOUND_OBJ_WIGGLER_HIGH_PITCH);
src/game/behaviors/wiggler.inc.c:            switch (o->oAction) {
src/game/behaviors/wiggler.inc.c:        o->oWigglerSegments[0].posX = o->oPosX;
src/game/behaviors/wiggler.inc.c:        o->oWigglerSegments[0].posY = o->oPosY;
src/game/behaviors/wiggler.inc.c:        o->oWigglerSegments[0].posZ = o->oPosZ;
src/game/behaviors/wiggler.inc.c:        o->oWigglerSegments[0].pitch = o->oFaceAnglePitch;
src/game/behaviors/wiggler.inc.c:        o->oWigglerSegments[0].yaw = o->oFaceAngleYaw;
src/game/behaviors/wind.inc.c:    if (o->oTimer == 0) {
src/game/behaviors/wind.inc.c:        o->oOpacity = 100;
src/game/behaviors/wind.inc.c:        if (o->oMoveAnglePitch == 0) {
src/game/behaviors/wind.inc.c:            o->oPosX += sins(o->oMoveAngleYaw + 0x8000) * sp2E; // NOP as Pitch is 0
src/game/behaviors/wind.inc.c:            o->oPosY += 80.0f + random_f32_around_zero(200.0f);
src/game/behaviors/wind.inc.c:            o->oPosZ += coss(o->oMoveAngleYaw + 0x8000) * sp2E; // -coss(a) * sp2E
src/game/behaviors/wind.inc.c:            o->oMoveAngleYaw += random_f32_around_zero(4000.0f);
src/game/behaviors/wind.inc.c:            o->oForwardVel = random_float() * 70.0f + 50.0f;
src/game/behaviors/wind.inc.c:            o->oPosY -= sp2E - 200; // 300
src/game/behaviors/wind.inc.c:            o->oVelY = random_float() * 30.0f + 50.0f;
src/game/behaviors/wind.inc.c:            o->oMoveAngleYaw = random_u16();
src/game/behaviors/wind.inc.c:            o->oForwardVel = 10.0f;
src/game/behaviors/wind.inc.c:    if (o->oTimer > 8)
src/game/behaviors/wind.inc.c:    o->oFaceAnglePitch += 4000.0f + 2000.0f * random_float();
src/game/behaviors/wind.inc.c:    o->oFaceAngleYaw += 4000.0f + 2000.0f * random_float();
src/game/behaviors/yoshi.inc.c:// so o->oHomeY is never updated.
src/game/behaviors/yoshi.inc.c:    o->oGravity = 2.0f;
src/game/behaviors/yoshi.inc.c:    o->oFriction = 0.9f;
src/game/behaviors/yoshi.inc.c:    o->oBuoyancy = 1.3f;
src/game/behaviors/yoshi.inc.c:    o->oInteractionSubtype = INT_SUBTYPE_NPC;
src/game/behaviors/yoshi.inc.c:        o->activeFlags = ACTIVE_FLAG_DEACTIVATED;
src/game/behaviors/yoshi.inc.c:    s16 sp24 = o->header.gfx.unk38.animFrame;
src/game/behaviors/yoshi.inc.c:    o->oForwardVel = 10.0f;
src/game/behaviors/yoshi.inc.c:    o->oMoveAngleYaw = approach_s16_symmetric(o->oMoveAngleYaw, o->oYoshiTargetYaw, 0x500);
src/game/behaviors/yoshi.inc.c:    if (is_point_close_to_object(o, o->oHomeX, 3174.0f, o->oHomeZ, 200))
src/game/behaviors/yoshi.inc.c:        o->oAction = YOSHI_ACT_IDLE;
src/game/behaviors/yoshi.inc.c:    if (o->oInteractStatus == INT_STATUS_INTERACTED)
src/game/behaviors/yoshi.inc.c:        o->oAction = YOSHI_ACT_TALK;
src/game/behaviors/yoshi.inc.c:    if (o->oPosY < 2100.0f) {
src/game/behaviors/yoshi.inc.c:        o->activeFlags = ACTIVE_FLAG_DEACTIVATED;
src/game/behaviors/yoshi.inc.c:    UNUSED s16 sp1C = o->header.gfx.unk38.animFrame;
src/game/behaviors/yoshi.inc.c:    if (o->oTimer > 90) {
src/game/behaviors/yoshi.inc.c:        if (o->oYoshiChosenHome == chosenHome) {
src/game/behaviors/yoshi.inc.c:            o->oYoshiChosenHome = chosenHome;
src/game/behaviors/yoshi.inc.c:        o->oHomeX = sYoshiHomeLocations[o->oYoshiChosenHome * 2];
src/game/behaviors/yoshi.inc.c:        o->oHomeZ = sYoshiHomeLocations[o->oYoshiChosenHome * 2 + 1];
src/game/behaviors/yoshi.inc.c:        o->oYoshiTargetYaw = atan2s(o->oHomeZ - o->oPosZ, o->oHomeX - o->oPosX);
src/game/behaviors/yoshi.inc.c:        o->oAction = YOSHI_ACT_WALK;
src/game/behaviors/yoshi.inc.c:    if (o->oInteractStatus == INT_STATUS_INTERACTED)
src/game/behaviors/yoshi.inc.c:        o->oAction = YOSHI_ACT_TALK;
src/game/behaviors/yoshi.inc.c:        o->oAction = YOSHI_ACT_CREDITS;
src/game/behaviors/yoshi.inc.c:        o->oPosX = -1798.0f;
src/game/behaviors/yoshi.inc.c:        o->oPosY = 3174.0f;
src/game/behaviors/yoshi.inc.c:        o->oPosZ = -3644.0f;
src/game/behaviors/yoshi.inc.c:    if ((s16) o->oMoveAngleYaw == (s16) o->oAngleToMario) {
src/game/behaviors/yoshi.inc.c:            o->activeFlags |= ACTIVE_FLAG_INITIATED_TIME_STOP;
src/game/behaviors/yoshi.inc.c:                o->activeFlags &= ~ACTIVE_FLAG_INITIATED_TIME_STOP;
src/game/behaviors/yoshi.inc.c:                o->oInteractStatus = 0;
src/game/behaviors/yoshi.inc.c:                o->oHomeX = sYoshiHomeLocations[2];
src/game/behaviors/yoshi.inc.c:                o->oHomeZ = sYoshiHomeLocations[3];
src/game/behaviors/yoshi.inc.c:                o->oYoshiTargetYaw = atan2s(o->oHomeZ - o->oPosZ, o->oHomeX - o->oPosX);
src/game/behaviors/yoshi.inc.c:                o->oAction = YOSHI_ACT_GIVE_PRESENT;
src/game/behaviors/yoshi.inc.c:        o->oMoveAngleYaw = approach_s16_symmetric(o->oMoveAngleYaw, o->oAngleToMario, 0x500);
src/game/behaviors/yoshi.inc.c:    s16 sp26 = o->header.gfx.unk38.animFrame;
src/game/behaviors/yoshi.inc.c:    o->oForwardVel = 10.0f;
src/game/behaviors/yoshi.inc.c:    if (o->oTimer == 0)
src/game/behaviors/yoshi.inc.c:    o->oMoveAngleYaw = approach_s16_symmetric(o->oMoveAngleYaw, o->oYoshiTargetYaw, 0x500);
src/game/behaviors/yoshi.inc.c:    if (is_point_close_to_object(o, o->oHomeX, 3174.0f, o->oHomeZ, 200)) {
src/game/behaviors/yoshi.inc.c:        o->oForwardVel = 50.0f;
src/game/behaviors/yoshi.inc.c:        o->oVelY = 40.0f;
src/game/behaviors/yoshi.inc.c:        o->oMoveAngleYaw = -0x3FFF;
src/game/behaviors/yoshi.inc.c:        o->oAction = YOSHI_ACT_FINISH_JUMPING_AND_DESPAWN;
src/game/behaviors/yoshi.inc.c:    o->oVelY -= 2.0;
src/game/behaviors/yoshi.inc.c:    if (o->oPosY < 2100.0f) {
src/game/behaviors/yoshi.inc.c:        o->activeFlags = ACTIVE_FLAG_DEACTIVATED;
src/game/behaviors/yoshi.inc.c:        o->oAction = YOSHI_ACT_WALK_JUMP_OFF_ROOF;
src/game/behaviors/yoshi.inc.c:    switch (o->oAction) {
src/game/behaviors/yoshi.inc.c:    curr_obj_random_blink(&o->oYoshiBlinkTimer);
src/game/behavior_actions.c:    if ((sp1C = o->header.gfx.unk38.animAccel / (f32) 0x10000) == 0)
src/game/camera.c:        heldState = o->oHeldState;
src/game/camera.c: * Used to change the camera mode between its default/previous and certain Mario-oriented modes,
src/game/camera.c: * Stores the current pos and focus in sModeInfo->transitionStart, and
src/game/camera.c: * stores the next pos and focus into sModeInfo->transitionEnd. These two fields are used in
src/game/camera.c:    // Start any Mario-related cutscenes
src/game/camera.c:    gLakituState.focHSpeed = 0.3f; // @bug set focHSpeed back-to-back
src/game/camera.c: *      modulo-4's the result, because each 8-bit mask only has 4 area bits for each level
src/game/camera.c:    dst[0] = o->oPosX;
src/game/camera.c:    dst[1] = o->oPosY;
src/game/camera.c:    dst[2] = o->oPosZ;
src/game/camera.c:    o->oPosX = src[0];
src/game/camera.c:    o->oPosY = src[1];
src/game/camera.c:    o->oPosZ = src[2];
src/game/camera.c:    dst[0] = o->oMoveAnglePitch;
src/game/camera.c:    dst[1] = o->oMoveAngleYaw;
src/game/camera.c:    dst[2] = o->oMoveAngleRoll;
src/game/camera.c:    vec3f_set(sCutsceneVars[1].point, o->oHomeX, o->oHomeY, o->oHomeZ);
src/game/camera.c:        sCutsceneVars[0].point[1] = o->oPosY;
src/game/camera.c:        cannonAngle[0] = o->oMoveAnglePitch;
src/game/camera.c:        cannonAngle[1] = o->oMoveAngleYaw;
src/game/camera.c:        cannonAngle[2] = o->oMoveAngleRoll;
src/game/camera.c:        c->focus[0] = o->oPosX;
src/game/camera.c:        c->focus[1] = o->oPosY;
src/game/camera.c:        c->focus[2] = o->oPosZ;
src/game/camera.c:        sCutsceneVars[0].point[0] = o->oPosX;
src/game/camera.c:        sCutsceneVars[0].point[1] = o->oPosY;
src/game/camera.c:        sCutsceneVars[0].point[2] = o->oPosZ;
src/game/camera.c:        sCutsceneVars[0].angle[0] = o->oMoveAnglePitch;
src/game/camera.c:        sCutsceneVars[0].angle[1] = o->oMoveAngleYaw;
src/game/camera.c:        sCutsceneVars[0].angle[2] = o->oMoveAngleRoll;
src/game/camera.c:    o->oPosX += (rnd * xRange - xRange / 2.f);
src/game/camera.c:    o->oPosY += (rnd * yRange - yRange / 2.f);
src/game/camera.c:    o->oPosZ += (rnd * zRange - zRange / 2.f);
src/game/camera.c:    o->oMoveAnglePitch += (s16)(rnd * pitchRange - pitchRange / 2.f);
src/game/camera.c:    o->oMoveAngleYaw += (s16)(rnd * yawRange - yawRange / 2.f);
src/game/camera.c:    o->oMoveAnglePitch = approach_s16_asymptotic(o->oMoveAnglePitch, pitchOff - pitch, pitchDiv);
src/game/camera.c:    o->oMoveAngleYaw = approach_s16_asymptotic(o->oMoveAngleYaw, yaw + yawOff, yawDiv);
src/game/camera.c.orig:        heldState = o->oHeldState;
src/game/camera.c.orig: * Used to change the camera mode between its default/previous and certain Mario-oriented modes,
src/game/camera.c.orig: * Stores the current pos and focus in sModeInfo->transitionStart, and
src/game/camera.c.orig: * stores the next pos and focus into sModeInfo->transitionEnd. These two fields are used in
src/game/camera.c.orig:    // Start any Mario-related cutscenes
src/game/camera.c.orig:    gLakituState.focHSpeed = 0.3f; // @bug set focHSpeed back-to-back
src/game/camera.c.orig: *      modulo-4's the result, because each 8-bit mask only has 4 area bits for each level
src/game/camera.c.orig:    dst[0] = o->oPosX;
src/game/camera.c.orig:    dst[1] = o->oPosY;
src/game/camera.c.orig:    dst[2] = o->oPosZ;
src/game/camera.c.orig:    o->oPosX = src[0];
src/game/camera.c.orig:    o->oPosY = src[1];
src/game/camera.c.orig:    o->oPosZ = src[2];
src/game/camera.c.orig:    dst[0] = o->oMoveAnglePitch;
src/game/camera.c.orig:    dst[1] = o->oMoveAngleYaw;
src/game/camera.c.orig:    dst[2] = o->oMoveAngleRoll;
src/game/camera.c.orig:    vec3f_set(sCutsceneVars[1].point, o->oHomeX, o->oHomeY, o->oHomeZ);
src/game/camera.c.orig:        sCutsceneVars[0].point[1] = o->oPosY;
src/game/camera.c.orig:        cannonAngle[0] = o->oMoveAnglePitch;
src/game/camera.c.orig:        cannonAngle[1] = o->oMoveAngleYaw;
src/game/camera.c.orig:        cannonAngle[2] = o->oMoveAngleRoll;
src/game/camera.c.orig:        c->focus[0] = o->oPosX;
src/game/camera.c.orig:        c->focus[1] = o->oPosY;
src/game/camera.c.orig:        c->focus[2] = o->oPosZ;
src/game/camera.c.orig:        sCutsceneVars[0].point[0] = o->oPosX;
src/game/camera.c.orig:        sCutsceneVars[0].point[1] = o->oPosY;
src/game/camera.c.orig:        sCutsceneVars[0].point[2] = o->oPosZ;
src/game/camera.c.orig:        sCutsceneVars[0].angle[0] = o->oMoveAnglePitch;
src/game/camera.c.orig:        sCutsceneVars[0].angle[1] = o->oMoveAngleYaw;
src/game/camera.c.orig:        sCutsceneVars[0].angle[2] = o->oMoveAngleRoll;
src/game/camera.c.orig:    o->oPosX += (rnd * xRange - xRange / 2.f);
src/game/camera.c.orig:    o->oPosY += (rnd * yRange - yRange / 2.f);
src/game/camera.c.orig:    o->oPosZ += (rnd * zRange - zRange / 2.f);
src/game/camera.c.orig:    o->oMoveAnglePitch += (s16)(rnd * pitchRange - pitchRange / 2.f);
src/game/camera.c.orig:    o->oMoveAngleYaw += (s16)(rnd * yawRange - yawRange / 2.f);
src/game/camera.c.orig:    o->oMoveAnglePitch = approach_s16_asymptotic(o->oMoveAnglePitch, pitchOff - pitch, pitchDiv);
src/game/camera.c.orig:    o->oMoveAngleYaw = approach_s16_asymptotic(o->oMoveAngleYaw, yaw + yawOff, yawDiv);
src/game/game_init.c:            the demo had to have been necessary to perform this. Co-op mode, perhaps?
src/game/game_init.c.orig:            the demo had to have been necessary to perform this. Co-op mode, perhaps?
src/game/interaction.c:    f32 dx = m->pos[0] - o->oPosX;
src/game/interaction.c:    f32 dz = m->pos[2] - o->oPosZ;
src/game/interaction.c:    s16 dAngle = angleToMario - o->oMoveAngleYaw;
src/game/interaction.c:    f32 dx = o->oPosX - m->pos[0];
src/game/interaction.c:    f32 dz = o->oPosZ - m->pos[2];
src/game/interaction.c:            if (m->pos[1] > o->oPosY) {
src/game/interaction.c:            if (m->pos[1] < o->oPosY) {
src/game/interaction.c:    o->oInteractStatus = attackType + (INT_STATUS_INTERACTED | INT_STATUS_WAS_ATTACKED);
src/game/interaction.c:        if (!(o->oInteractionSubtype & INT_SUBTYPE_GRABS_MARIO)) {
src/game/interaction.c:    struct Object *bully = mario->interactObj;
src/game/interaction.c:    init_bully_collision_data(&marioData, mario->pos[0], mario->pos[2], mario->forwardVel,
src/game/interaction.c:                              mario->faceAngle[1], bullyToMarioRatio, 52.0f);
src/game/interaction.c:    if (mario->forwardVel != 0.0f) {
src/game/interaction.c:    marioDYaw = newMarioYaw - mario->faceAngle[1];
src/game/interaction.c:    mario->faceAngle[1] = newMarioYaw;
src/game/interaction.c:    mario->forwardVel = sqrtf(marioData.velX * marioData.velX + marioData.velZ * marioData.velZ);
src/game/interaction.c:    mario->pos[0] = marioData.posX;
src/game/interaction.c:    mario->pos[2] = marioData.posZ;
src/game/interaction.c:        mario->faceAngle[1] += 0x8000;
src/game/interaction.c:        mario->forwardVel *= -1.0f;
src/game/interaction.c:        if (mario->action & ACT_FLAG_AIR) {
src/game/interaction.c:        if (mario->action & ACT_FLAG_AIR) {
src/game/interaction.c:    m->pos[1] = o->oPosY + o->hitboxHeight;
src/game/interaction.c:    f32 minDistance = o->hitboxRadius + m->marioObj->hitboxRadius + padding;
src/game/interaction.c:    f32 offsetX = m->pos[0] - o->oPosX;
src/game/interaction.c:    f32 offsetZ = m->pos[2] - o->oPosZ;
src/game/interaction.c:        newMarioX = o->oPosX + minDistance * sins(pushAngle);
src/game/interaction.c:        newMarioZ = o->oPosZ + minDistance * coss(pushAngle);
src/game/interaction.c:    f32 dx = o->oPosX - m->pos[0];
src/game/interaction.c:    f32 dz = o->oPosZ - m->pos[2];
src/game/interaction.c:    s16 dYaw = o->oMoveAngleYaw - atan2s(dz, dx);
src/game/interaction.c:        && !(o->oInteractionSubtype & INT_SUBTYPE_DELAY_INVINCIBILITY)) {
src/game/interaction.c:        o->oInteractStatus = INT_STATUS_INTERACTED | INT_STATUS_ATTACKED_MARIO;
src/game/interaction.c:        if (o->oInteractionSubtype & INT_SUBTYPE_BIG_KNOCKBACK) {
src/game/interaction.c:        if (o->oDamageOrCoinValue > 0) {
src/game/interaction.c:        return drop_and_set_mario_action(m, determine_knockback_action(m, o->oDamageOrCoinValue),
src/game/interaction.c:    m->numCoins += o->oDamageOrCoinValue;
src/game/interaction.c:        m->numCoins += o->oDamageOrCoinValue;
src/game/interaction.c:    if (o->oDamageOrCoinValue == 3) {
src/game/interaction.c:    o->oInteractStatus = INT_STATUS_INTERACTED;
src/game/interaction.c:    if (COURSE_IS_MAIN_COURSE(gCurrCourseNum) && m->numCoins - o->oDamageOrCoinValue < 100
src/game/interaction.c:    m->healCounter += 4 * o->oDamageOrCoinValue;
src/game/interaction.c:    o->oInteractStatus = INT_STATUS_INTERACTED;
src/game/interaction.c:    u32 noExit = (o->oInteractionSubtype & INT_SUBTYPE_NO_EXIT) != 0;
src/game/interaction.c:    u32 grandStar = (o->oInteractionSubtype & INT_SUBTYPE_GRAND_STAR) != 0;
src/game/interaction.c:        o->oInteractStatus = INT_STATUS_INTERACTED;
src/game/interaction.c:        starIndex = (o->oBehParams >> 24) & 0x1F;
src/game/interaction.c:        m->lastStarCollected = (o->oBehParams >> 24);
src/game/interaction.c:        o->oInteractStatus = INT_STATUS_INTERACTED;
src/game/interaction.c:    if (o->oInteractionSubtype & INT_SUBTYPE_FADING_WARP) {
src/game/interaction.c:            o->oInteractStatus = INT_STATUS_INTERACTED;
src/game/interaction.c:            if (o->collisionData == segmented_to_virtual(warp_pipe_seg3_collision_03009AC8)) {
src/game/interaction.c:    s16 warpDoorId = o->oBehParams >> 24;
src/game/interaction.c:    s16 requiredNumStars = o->oBehParams >> 24;
src/game/interaction.c:            if (o->oInteractionSubtype & INT_SUBTYPE_STAR_DOOR) {
src/game/interaction.c:        o->oInteractStatus = INT_STATUS_INTERACTED;
src/game/interaction.c:        o->oInteractStatus = INT_STATUS_INTERACTED;
src/game/interaction.c:        marioObj->oMarioTornadoPosY = m->pos[1] - o->oPosY;
src/game/interaction.c:        o->oInteractStatus = INT_STATUS_INTERACTED;
src/game/interaction.c:        marioObj->oMarioWhirlpoolPosY = m->pos[1] - o->oPosY;
src/game/interaction.c:        o->oInteractStatus = INT_STATUS_INTERACTED;
src/game/interaction.c:        m->faceAngle[1] = o->oMoveAngleYaw + 0x8000;
src/game/interaction.c:        && !(o->oInteractionSubtype & INT_SUBTYPE_DELAY_INVINCIBILITY)) {
src/game/interaction.c:        o->oInteractStatus = INT_STATUS_INTERACTED;
src/game/interaction.c:            o->oInteractStatus = INT_STATUS_INTERACTED | INT_STATUS_WAS_ATTACKED;
src/game/interaction.c:            o->oInteractStatus = INT_STATUS_INTERACTED | INT_STATUS_ATTACKED_MARIO;
src/game/interaction.c:            return drop_and_set_mario_action(m, determine_knockback_action(m, o->oDamageOrCoinValue),
src/game/interaction.c:                                             o->oDamageOrCoinValue);
src/game/interaction.c:    if (!(o->oInteractionSubtype & INT_SUBTYPE_DELAY_INVINCIBILITY)) {
src/game/interaction.c:    if (o->oInteractionSubtype & INT_SUBTYPE_EATS_MARIO) {
src/game/interaction.c:        o->oInteractStatus = INT_STATUS_INTERACTED;
src/game/interaction.c:    if (!(o->oInteractionSubtype & INT_SUBTYPE_DELAY_INVINCIBILITY)) {
src/game/interaction.c:             && !(o->oInteractionSubtype & INT_SUBTYPE_DELAY_INVINCIBILITY)) {
src/game/interaction.c:        o->oInteractStatus = INT_STATUS_INTERACTED;
src/game/interaction.c:        && !(o->oInteractionSubtype & INT_SUBTYPE_DELAY_INVINCIBILITY)) {
src/game/interaction.c:        o->oInteractStatus = INT_STATUS_INTERACTED | INT_STATUS_ATTACKED_MARIO;
src/game/interaction.c:    if (!(o->oInteractionSubtype & INT_SUBTYPE_DELAY_INVINCIBILITY)) {
src/game/interaction.c:    if (!(o->oInteractionSubtype & INT_SUBTYPE_DELAY_INVINCIBILITY)) {
src/game/interaction.c:    if (!(o->oInteractionSubtype & INT_SUBTYPE_DELAY_INVINCIBILITY)) {
src/game/interaction.c:            if (o->oInteractionSubtype & INT_SUBTYPE_TWIRL_BOUNCE) {
src/game/interaction.c:    if (!(o->oInteractionSubtype & INT_SUBTYPE_DELAY_INVINCIBILITY)) {
src/game/interaction.c:            if (o->oInteractionSubtype & INT_SUBTYPE_TWIRL_BOUNCE) {
src/game/interaction.c:    if (!(o->oInteractionSubtype & INT_SUBTYPE_DELAY_INVINCIBILITY)) {
src/game/interaction.c:        o->oInteractStatus = INT_STATUS_INTERACTED | INT_STATUS_WAS_ATTACKED | ATTACK_PUNCH;
src/game/interaction.c:    if (!(o->oInteractionSubtype & INT_SUBTYPE_DELAY_INVINCIBILITY)) {
src/game/interaction.c:    if (!(o->oInteractionSubtype & INT_SUBTYPE_DELAY_INVINCIBILITY)) {
src/game/interaction.c:        && (o->oInteractionSubtype & INT_SUBTYPE_GRABS_MARIO)) {
src/game/interaction.c:            o->oInteractStatus = INT_STATUS_INTERACTED | INT_STATUS_GRABBED_MARIO;
src/game/interaction.c:            m->faceAngle[1] = o->oMoveAngleYaw;
src/game/interaction.c:            marioObj->oMarioPolePos = m->pos[1] - o->oPosY;
src/game/interaction.c:        o->oInteractStatus = INT_STATUS_HOOT_GRABBED_BY_MARIO;
src/game/interaction.c:        o->oInteractStatus = INT_STATUS_INTERACTED;
src/game/interaction.c:    void *script = virtual_to_segmented(0x13, o->behavior);
src/game/interaction.c:    if (o->oInteractionSubtype & INT_SUBTYPE_KICKABLE) {
src/game/interaction.c:    if ((o->oInteractionSubtype & INT_SUBTYPE_GRABS_MARIO)) {
src/game/interaction.c:        if (!(o->oInteractionSubtype & INT_SUBTYPE_NOT_GRABBABLE)) {
src/game/interaction.c:        s16 facingDYaw = (s16)(o->oMoveAngleYaw + 0x8000) - m->faceAngle[1];
src/game/interaction.c:            f32 targetX = o->oPosX + 105.0f * sins(o->oMoveAngleYaw);
src/game/interaction.c:            f32 targetZ = o->oPosZ + 105.0f * coss(o->oMoveAngleYaw);
src/game/interaction.c:            o->oInteractStatus = INT_STATUS_INTERACTED;
src/game/interaction.c:    if (o->oInteractionSubtype & INT_SUBTYPE_SIGN) {
src/game/interaction.c:    } else if (o->oInteractionSubtype & INT_SUBTYPE_NPC) {
src/game/level_update.c:        spawnInfo->startAngle[1] += 0x8000;
src/game/level_update.c:    spawnInfo->startPos[0] += 300.0f * sins(spawnInfo->startAngle[1]);
src/game/level_update.c:    spawnInfo->startPos[2] += 300.0f * coss(spawnInfo->startAngle[1]);
src/game/mario.c:    return (o->header.gfx.unk38.animFrame + 1) == o->header.gfx.unk38.curAnim->unk08;
src/game/mario.c:    return o->header.gfx.unk38.animFrame >= (o->header.gfx.unk38.curAnim->unk08 - 2);
src/game/mario.c:    if (o->header.gfx.unk38.animID != targetAnimID) {
src/game/mario.c:        o->header.gfx.unk38.animID = targetAnimID;
src/game/mario.c:        o->header.gfx.unk38.curAnim = targetAnim;
src/game/mario.c:        o->header.gfx.unk38.animAccel = 0;
src/game/mario.c:        o->header.gfx.unk38.animYTrans = m->unkB0;
src/game/mario.c:            o->header.gfx.unk38.animFrame = targetAnim->unk04;
src/game/mario.c:                o->header.gfx.unk38.animFrame = targetAnim->unk04 + 1;
src/game/mario.c:                o->header.gfx.unk38.animFrame = targetAnim->unk04 - 1;
src/game/mario.c:    return o->header.gfx.unk38.animFrame;
src/game/mario.c:    if (o->header.gfx.unk38.animID != targetAnimID) {
src/game/mario.c:        o->header.gfx.unk38.animID = targetAnimID;
src/game/mario.c:        o->header.gfx.unk38.curAnim = targetAnim;
src/game/mario.c:        o->header.gfx.unk38.animYTrans = m->unkB0;
src/game/mario.c:            o->header.gfx.unk38.animFrameAccelAssist = (targetAnim->unk04 << 0x10);
src/game/mario.c:                o->header.gfx.unk38.animFrameAccelAssist = (targetAnim->unk04 << 0x10) + accel;
src/game/mario.c:                o->header.gfx.unk38.animFrameAccelAssist = (targetAnim->unk04 << 0x10) - accel;
src/game/mario.c:        o->header.gfx.unk38.animFrame = (o->header.gfx.unk38.animFrameAccelAssist >> 0x10);
src/game/mario.c:    o->header.gfx.unk38.animAccel = accel;
src/game/mario.c:    return o->header.gfx.unk38.animFrame;
src/game/mario.c:    struct Animation *curAnim = animInfo->curAnim;
src/game/mario.c:    if (animInfo->animAccel) {
src/game/mario.c:            animInfo->animFrameAccelAssist = (animFrame << 0x10) + animInfo->animAccel;
src/game/mario.c:            animInfo->animFrameAccelAssist = (animFrame << 0x10) - animInfo->animAccel;
src/game/mario.c:            animInfo->animFrame = animFrame + 1;
src/game/mario.c:            animInfo->animFrame = animFrame - 1;
src/game/mario.c:    struct Animation *curAnim = animInfo->curAnim;
src/game/mario.c:    if (animInfo->animAccel) {
src/game/mario.c:                (animInfo->animFrameAccelAssist > acceleratedFrame)
src/game/mario.c:                && (acceleratedFrame >= (animInfo->animFrameAccelAssist - animInfo->animAccel));
src/game/mario.c:                (animInfo->animFrameAccelAssist < acceleratedFrame)
src/game/mario.c:                && (acceleratedFrame <= (animInfo->animFrameAccelAssist + animInfo->animAccel));
src/game/mario.c:            isPastFrame = (animInfo->animFrame == (animFrame + 1));
src/game/mario.c:            isPastFrame = ((animInfo->animFrame + 1) == animFrame);
src/game/mario.c:    if (o->header.gfx.throwMatrix) {
src/game/mario.c:        *(f32 *) ((u8 *) o->header.gfx.throwMatrix + 0x34) -= m->quicksandDepth;
src/game/mario.c:    o->header.gfx.pos[1] -= m->quicksandDepth;
src/game/mario.c:                    sp1C = spawn_object_abs_with_rot(o, 0, MODEL_STAR, bhvStarSpawnCoordinates, o->oPosX, o->oPosY,o->oPosZ, 0, 0, 0);
src/game/mario.c:        find_water_level(gMarioSpawnInfo->startPos[0], gMarioSpawnInfo->startPos[2]);
src/game/mario.c:    vec3s_copy(gMarioState->faceAngle, gMarioSpawnInfo->startAngle);
src/game/mario.c:    vec3s_to_vec3f(gMarioState->pos, gMarioSpawnInfo->startPos);
src/game/mario.c.orig:    return (o->header.gfx.unk38.animFrame + 1) == o->header.gfx.unk38.curAnim->unk08;
src/game/mario.c.orig:    return o->header.gfx.unk38.animFrame >= (o->header.gfx.unk38.curAnim->unk08 - 2);
src/game/mario.c.orig:    if (o->header.gfx.unk38.animID != targetAnimID) {
src/game/mario.c.orig:        o->header.gfx.unk38.animID = targetAnimID;
src/game/mario.c.orig:        o->header.gfx.unk38.curAnim = targetAnim;
src/game/mario.c.orig:        o->header.gfx.unk38.animAccel = 0;
src/game/mario.c.orig:        o->header.gfx.unk38.animYTrans = m->unkB0;
src/game/mario.c.orig:            o->header.gfx.unk38.animFrame = targetAnim->unk04;
src/game/mario.c.orig:                o->header.gfx.unk38.animFrame = targetAnim->unk04 + 1;
src/game/mario.c.orig:                o->header.gfx.unk38.animFrame = targetAnim->unk04 - 1;
src/game/mario.c.orig:    return o->header.gfx.unk38.animFrame;
src/game/mario.c.orig:    if (o->header.gfx.unk38.animID != targetAnimID) {
src/game/mario.c.orig:        o->header.gfx.unk38.animID = targetAnimID;
src/game/mario.c.orig:        o->header.gfx.unk38.curAnim = targetAnim;
src/game/mario.c.orig:        o->header.gfx.unk38.animYTrans = m->unkB0;
src/game/mario.c.orig:            o->header.gfx.unk38.animFrameAccelAssist = (targetAnim->unk04 << 0x10);
src/game/mario.c.orig:                o->header.gfx.unk38.animFrameAccelAssist = (targetAnim->unk04 << 0x10) + accel;
src/game/mario.c.orig:                o->header.gfx.unk38.animFrameAccelAssist = (targetAnim->unk04 << 0x10) - accel;
src/game/mario.c.orig:        o->header.gfx.unk38.animFrame = (o->header.gfx.unk38.animFrameAccelAssist >> 0x10);
src/game/mario.c.orig:    o->header.gfx.unk38.animAccel = accel;
src/game/mario.c.orig:    return o->header.gfx.unk38.animFrame;
src/game/mario.c.orig:    struct Animation *curAnim = animInfo->curAnim;
src/game/mario.c.orig:    if (animInfo->animAccel) {
src/game/mario.c.orig:            animInfo->animFrameAccelAssist = (animFrame << 0x10) + animInfo->animAccel;
src/game/mario.c.orig:            animInfo->animFrameAccelAssist = (animFrame << 0x10) - animInfo->animAccel;
src/game/mario.c.orig:            animInfo->animFrame = animFrame + 1;
src/game/mario.c.orig:            animInfo->animFrame = animFrame - 1;
src/game/mario.c.orig:    struct Animation *curAnim = animInfo->curAnim;
src/game/mario.c.orig:    if (animInfo->animAccel) {
src/game/mario.c.orig:                (animInfo->animFrameAccelAssist > acceleratedFrame)
src/game/mario.c.orig:                && (acceleratedFrame >= (animInfo->animFrameAccelAssist - animInfo->animAccel));
src/game/mario.c.orig:                (animInfo->animFrameAccelAssist < acceleratedFrame)
src/game/mario.c.orig:                && (acceleratedFrame <= (animInfo->animFrameAccelAssist + animInfo->animAccel));
src/game/mario.c.orig:            isPastFrame = (animInfo->animFrame == (animFrame + 1));
src/game/mario.c.orig:            isPastFrame = ((animInfo->animFrame + 1) == animFrame);
src/game/mario.c.orig:    if (o->header.gfx.throwMatrix) {
src/game/mario.c.orig:        *(f32 *) ((u8 *) o->header.gfx.throwMatrix + 0x34) -= m->quicksandDepth;
src/game/mario.c.orig:    o->header.gfx.pos[1] -= m->quicksandDepth;
src/game/mario.c.orig:        find_water_level(gMarioSpawnInfo->startPos[0], gMarioSpawnInfo->startPos[2]);
src/game/mario.c.orig:    vec3s_copy(gMarioState->faceAngle, gMarioSpawnInfo->startAngle);
src/game/mario.c.orig:    vec3s_to_vec3f(gMarioState->pos, gMarioSpawnInfo->startPos);
src/game/mario_actions_cutscene.c:    o->oFaceAngleYaw = m->faceAngle[1] + relYaw;
src/game/mario_actions_cutscene.c:    o->oPosX = m->pos[0];
src/game/mario_actions_cutscene.c:    o->oPosY = m->pos[1];
src/game/mario_actions_cutscene.c:    o->oPosZ = m->pos[2];
src/game/mario_actions_cutscene.c:    find_mario_anim_flags_and_translation(o, o->header.gfx.angle[1], sp24);
src/game/mario_actions_cutscene.c:    sp20 = o->header.gfx.pos[0] + sp24[0];
src/game/mario_actions_cutscene.c:    sp1C = o->header.gfx.pos[1] + 10.0f;
src/game/mario_actions_cutscene.c:    sp18 = o->header.gfx.pos[2] + sp24[2];
src/game/mario_actions_cutscene.c.orig:    o->oFaceAngleYaw = m->faceAngle[1] + relYaw;
src/game/mario_actions_cutscene.c.orig:    o->oPosX = m->pos[0];
src/game/mario_actions_cutscene.c.orig:    o->oPosY = m->pos[1];
src/game/mario_actions_cutscene.c.orig:    o->oPosZ = m->pos[2];
src/game/mario_actions_cutscene.c.orig:    find_mario_anim_flags_and_translation(o, o->header.gfx.angle[1], sp24);
src/game/mario_actions_cutscene.c.orig:    sp20 = o->header.gfx.pos[0] + sp24[0];
src/game/mario_actions_cutscene.c.orig:    sp1C = o->header.gfx.pos[1] + 10.0f;
src/game/mario_actions_cutscene.c.orig:    sp18 = o->header.gfx.pos[2] + sp24[2];
src/game/mario_misc.c:                    gMirrorMario.sharedChild = mario->header.gfx.sharedChild;
src/game/mario_misc.c:                    gMirrorMario.unk18 = mario->header.gfx.unk18;
src/game/mario_misc.c:                    vec3s_copy(gMirrorMario.angle, mario->header.gfx.angle);
src/game/mario_misc.c:                    vec3f_copy(gMirrorMario.pos, mario->header.gfx.pos);
src/game/mario_misc.c:                    vec3f_copy(gMirrorMario.scale, mario->header.gfx.scale);
src/game/mario_misc.c:                    gMirrorMario.unk38 = *(struct GraphNodeObject_sub *) &mario->header.gfx.unk38.animID;
src/game/mario_misc.c:                    gMirrorMario.sharedChild = mario->header.gfx.sharedChild;
src/game/mario_misc.c:                    gMirrorMario.unk18 = mario->header.gfx.unk18;
src/game/mario_misc.c:                    vec3s_copy(gMirrorMario.angle, mario->header.gfx.angle);
src/game/mario_misc.c:                    vec3f_copy(gMirrorMario.pos, mario->header.gfx.pos);
src/game/mario_misc.c:                    vec3f_copy(gMirrorMario.scale, mario->header.gfx.scale);
src/game/mario_misc.c:                    gMirrorMario.unk38 = *(struct GraphNodeObject_sub *) &mario->header.gfx.unk38.animID;
src/game/mario_misc.c.orig:            if (mario->header.gfx.pos[0] > 1700.0f) {
src/game/mario_misc.c.orig:                gMirrorMario.sharedChild = mario->header.gfx.sharedChild;
src/game/mario_misc.c.orig:                gMirrorMario.unk18 = mario->header.gfx.unk18;
src/game/mario_misc.c.orig:                vec3s_copy(gMirrorMario.angle, mario->header.gfx.angle);
src/game/mario_misc.c.orig:                vec3f_copy(gMirrorMario.pos, mario->header.gfx.pos);
src/game/mario_misc.c.orig:                vec3f_copy(gMirrorMario.scale, mario->header.gfx.scale);
src/game/mario_misc.c.orig:                gMirrorMario.unk38 = *(struct GraphNodeObject_sub *) &mario->header.gfx.unk38.animID;
src/game/object_helpers.c:    if (o->oForwardVel >= target) {
src/game/object_helpers.c:        o->oForwardVel = target;
src/game/object_helpers.c:        o->oForwardVel += increment;
src/game/object_helpers.c:    startYaw = (s16) o->oMoveAngleYaw;
src/game/object_helpers.c:    o->oMoveAngleYaw = approach_s16_symmetric(o->oMoveAngleYaw, target, increment);
src/game/object_helpers.c:    if ((o->oAngleVelYaw = (s16)((s16) o->oMoveAngleYaw - startYaw)) == 0) {
src/game/object_helpers.c:    if (targetangle > o->oFaceAngleYaw) {
src/game/object_helpers.c:        o->oFaceAngleYaw += abs_angle_diff(o->oFaceAngleYaw,targetangle)/8;
src/game/object_helpers.c:        o->oFaceAngleYaw -= abs_angle_diff(o->oFaceAngleYaw,targetangle)/8;
src/game/object_helpers.c:    startAngle = o->rawData.asU32[angleIndex];
src/game/object_helpers.c:    o->rawData.asU32[angleIndex] = approach_s16_symmetric(startAngle, targetAngle, turnAmount);
src/game/object_helpers.c:    o->oPosX += o->oVelX;
src/game/object_helpers.c:    o->oPosY += o->oVelY;
src/game/object_helpers.c:    o->oPosZ += o->oVelZ;
src/game/object_helpers.c:    struct Animation **anims = o->oAnimations;
src/game/object_helpers.c:    o->header.gfx.scale[0] = scale;
src/game/object_helpers.c:    o->header.gfx.scale[1] = scale;
src/game/object_helpers.c:    o->header.gfx.scale[2] = scale;
src/game/object_helpers.c:    struct Animation **anims = o->oAnimations;
src/game/object_helpers.c:    geo_obj_init_animation(&o->header.gfx, &anims[animIndex]);
src/game/object_helpers.c:    struct Animation **anims = o->oAnimations;
src/game/object_helpers.c:    geo_obj_init_animation(&o->header.gfx, &anims[animIndex]);
src/game/object_helpers.c:    o->oSoundStateID = animIndex;
src/game/object_helpers.c:    struct Animation **anims = o->oAnimations;
src/game/object_helpers.c:    geo_obj_init_animation_accel(&o->header.gfx, &anims[animIndex], animAccel);
src/game/object_helpers.c:    o->oSoundStateID = animIndex;
src/game/object_helpers.c:    o->header.gfx.node.flags |= GRAPH_RENDER_ACTIVE;
src/game/object_helpers.c:        o->header.gfx.node.flags &= ~GRAPH_RENDER_ACTIVE;
src/game/object_helpers.c:    o->header.gfx.node.flags &= ~GRAPH_RENDER_INVISIBLE;
src/game/object_helpers.c:    o->header.gfx.node.flags |= GRAPH_RENDER_INVISIBLE;
src/game/object_helpers.c:    o->oMoveAngleYaw = other->oMoveAngleYaw;
src/game/object_helpers.c:    o->oPosX = other->oPosX + dx;
src/game/object_helpers.c:    o->oPosY = other->oPosY + dy;
src/game/object_helpers.c:    o->oPosZ = other->oPosZ + dz;
src/game/object_helpers.c:    cur_obj_set_pos_relative(o->parentObj, dleft, dy, dforward);
src/game/object_helpers.c:    o->oPosY = find_floor_height(o->oPosX, o->oPosY, o->oPosZ);
src/game/object_helpers.c:    if (o->oPosY < -10000.0f) {
src/game/object_helpers.c:        o->oPosY = find_floor_height(o->oPosX, o->oPosY, o->oPosZ);
src/game/object_helpers.c:    o->oTimer = 0;
src/game/object_helpers.c:    o->oSubAction = 0;
src/game/object_helpers.c:    o->oAction = action;
src/game/object_helpers.c:    o->oPrevAction = action;
src/game/object_helpers.c:        o->oForwardVel = sp0;
src/game/object_helpers.c:        o->oForwardVel = sp4 * f14;
src/game/object_helpers.c:    if (o->header.gfx.unk38.animFrame >= 0) {
src/game/object_helpers.c:        o->header.gfx.unk38.animFrame--;
src/game/object_helpers.c:    s32 sp4 = o->header.gfx.unk38.animFrame;
src/game/object_helpers.c:    s32 sp0 = o->header.gfx.unk38.curAnim->unk08 - 2;
src/game/object_helpers.c:    if (sp4 == sp0) o->header.gfx.unk38.animFrame--;
src/game/object_helpers.c:    u32 spC = (s32) o->header.gfx.unk38.curAnim->flags;
src/game/object_helpers.c:    s32 sp8 = o->header.gfx.unk38.animFrame;
src/game/object_helpers.c:    s32 sp4 = o->header.gfx.unk38.curAnim->unk08 - 2;
src/game/object_helpers.c:    s32 sp4 = o->header.gfx.unk38.animFrame;
src/game/object_helpers.c:    s32 sp0 = o->header.gfx.unk38.curAnim->unk08 - 1;
src/game/object_helpers.c:    s32 animFrame = o->header.gfx.unk38.animFrame;
src/game/object_helpers.c:    s32 animFrame = o->header.gfx.unk38.animFrame;
src/game/object_helpers.c:    s16 sp6 = o->header.gfx.unk38.animFrame;
src/game/object_helpers.c:    o->oVelY = sp18;
src/game/object_helpers.c:    o->oAction = sp1C;
src/game/object_helpers.c:    o->oMoveFlags = 0;
src/game/object_helpers.c:    o->oFloorHeight = find_floor_height(o->oPosX, o->oPosY + 160.0f, o->oPosZ);
src/game/object_helpers.c:    if (o->oFloorHeight > o->oPosY) {
src/game/object_helpers.c:        o->oPosY = o->oFloorHeight;
src/game/object_helpers.c:    } else if (o->oFloorHeight < -10000.0f) {
src/game/object_helpers.c:        o->oFloorHeight = find_floor_height(o->oPosX, o->oPosY, o->oPosZ);
src/game/object_helpers.c:    o->oForwardVel = forwardVel;
src/game/object_helpers.c:    o->oVelY = velY;
src/game/object_helpers.c:    if (o->oForwardVel != 0) {
src/game/object_helpers.c:    if (o->behavior == segmented_to_virtual(bhvBowser)) {
src/game/object_helpers.c:    o->oHeldState = HELD_FREE;
src/game/object_helpers.c:    if ((o->oInteractionSubtype & INT_SUBTYPE_HOLDABLE_NPC) || forwardVel == 0.0f) {
src/game/object_helpers.c:        o->oAction = thrownAction;
src/game/object_helpers.c:    o->oHeldState = HELD_FREE;
src/game/object_helpers.c:    o->header.gfx.sharedChild = gLoadedGraphNodes[modelID];
src/game/object_helpers.c:    if (o->oInteractStatus & flag) {
src/game/object_helpers.c:        o->oInteractStatus &= flag ^ ~(0);
src/game/object_helpers.c:    o->oIntangibleTimer = -1;
src/game/object_helpers.c:    o->oIntangibleTimer = 0;
src/game/object_helpers.c:    o->oFloorHeight = find_floor(o->oPosX, o->oPosY, o->oPosZ, &floor);
src/game/object_helpers.c:    o->oFloorHeight = find_floor(o->oPosX, o->oPosY, o->oPosZ, &floor);
src/game/object_helpers.c:    apply_drag_to_value(&o->oVelX, dragStrength);
src/game/object_helpers.c:    apply_drag_to_value(&o->oVelZ, dragStrength);
src/game/object_helpers.c:    f32 intendedX = o->oPosX + o->oVelX;
src/game/object_helpers.c:    f32 intendedZ = o->oPosZ + o->oVelZ;
src/game/object_helpers.c:    f32 intendedFloorHeight = find_floor(intendedX, o->oPosY, intendedZ, &intendedFloor);
src/game/object_helpers.c:    f32 deltaFloorHeight = intendedFloorHeight - o->oFloorHeight;
src/game/object_helpers.c:    o->oMoveFlags &= ~OBJ_MOVE_HIT_EDGE;
src/game/object_helpers.c:    if (o->oRoom != -1 && intendedFloor != NULL) {
src/game/object_helpers.c:        if (intendedFloor->room != 0 && o->oRoom != intendedFloor->room && intendedFloor->room != 18) {
src/game/object_helpers.c:        o->oMoveFlags |= OBJ_MOVE_HIT_EDGE;
src/game/object_helpers.c:            o->oPosX = intendedX;
src/game/object_helpers.c:            o->oPosZ = intendedZ;
src/game/object_helpers.c:        } else if (deltaFloorHeight < -50.0f && (o->oMoveFlags & OBJ_MOVE_ON_GROUND)) {
src/game/object_helpers.c:            o->oMoveFlags |= OBJ_MOVE_HIT_EDGE;
src/game/object_helpers.c:            o->oPosX = intendedX;
src/game/object_helpers.c:            o->oPosZ = intendedZ;
src/game/object_helpers.c:            o->oMoveFlags |= OBJ_MOVE_HIT_EDGE;
src/game/object_helpers.c:    } else if ((ny = intendedFloor->normal.y) > steepSlopeNormalY || o->oPosY > intendedFloorHeight) {
src/game/object_helpers.c:        o->oPosX = intendedX;
src/game/object_helpers.c:        o->oPosZ = intendedZ;
src/game/object_helpers.c:    f32 decelY = (f32)(sqrtf(o->oVelY * o->oVelY) * (o->oDragStrength * 7.0f)) / 100.0L;
src/game/object_helpers.c:    if (o->oVelY > 0) {
src/game/object_helpers.c:        o->oVelY -= decelY;
src/game/object_helpers.c:        o->oVelY += decelY;
src/game/object_helpers.c:    if (o->oPosY < o->oFloorHeight) {
src/game/object_helpers.c:        o->oPosY = o->oFloorHeight;
src/game/object_helpers.c:        o->oMoveFlags |= OBJ_MOVE_UNDERWATER_ON_GROUND;
src/game/object_helpers.c:        o->oMoveFlags |= OBJ_MOVE_UNDERWATER_OFF_GROUND;
src/game/object_helpers.c:    o->oMoveFlags &= ~OBJ_MOVE_13;
src/game/object_helpers.c:    if (o->oPosY < o->oFloorHeight) {
src/game/object_helpers.c:        if (!(o->oMoveFlags & OBJ_MOVE_ON_GROUND)) {
src/game/object_helpers.c:            if (clear_move_flag(&o->oMoveFlags, OBJ_MOVE_LANDED)) {
src/game/object_helpers.c:                o->oMoveFlags |= OBJ_MOVE_ON_GROUND;
src/game/object_helpers.c:                o->oMoveFlags |= OBJ_MOVE_LANDED;
src/game/object_helpers.c:        o->oPosY = o->oFloorHeight;
src/game/object_helpers.c:        if (o->oVelY < 0.0f) {
src/game/object_helpers.c:            o->oVelY *= bounciness;
src/game/object_helpers.c:        if (o->oVelY > 5.0f) {
src/game/object_helpers.c:            o->oMoveFlags |= OBJ_MOVE_13;
src/game/object_helpers.c:        o->oMoveFlags &= ~OBJ_MOVE_LANDED;
src/game/object_helpers.c:        if (clear_move_flag(&o->oMoveFlags, OBJ_MOVE_ON_GROUND)) {
src/game/object_helpers.c:            o->oMoveFlags |= OBJ_MOVE_LEFT_GROUND;
src/game/object_helpers.c:    o->oMoveFlags &= ~OBJ_MOVE_MASK_IN_WATER;
src/game/object_helpers.c:    o->oVelY += gravity + buoyancy;
src/game/object_helpers.c:    if (o->oVelY < -78.0f) {
src/game/object_helpers.c:        o->oVelY = -78.0f;
src/game/object_helpers.c:    o->oPosY += o->oVelY;
src/game/object_helpers.c:    if (o->activeFlags & ACTIVE_FLAG_UNK10) {
src/game/object_helpers.c:        waterLevel = find_water_level(o->oPosX, o->oPosZ);
src/game/object_helpers.c:    o->oMoveFlags &= ~OBJ_MOVE_LEFT_GROUND;
src/game/object_helpers.c:    if (o->oMoveFlags & OBJ_MOVE_AT_WATER_SURFACE) {
src/game/object_helpers.c:        if (o->oVelY > 5.0f) {
src/game/object_helpers.c:            o->oMoveFlags &= ~OBJ_MOVE_MASK_IN_WATER;
src/game/object_helpers.c:            o->oMoveFlags |= OBJ_MOVE_LEAVING_WATER;
src/game/object_helpers.c:    if (!(o->oMoveFlags & OBJ_MOVE_MASK_IN_WATER)) {
src/game/object_helpers.c:        if (o->oPosY > waterLevel) {
src/game/object_helpers.c:            o->oMoveFlags |= OBJ_MOVE_ENTERED_WATER;
src/game/object_helpers.c:            o->oMoveFlags &= ~OBJ_MOVE_MASK_ON_GROUND;
src/game/object_helpers.c:        o->oMoveFlags &= ~OBJ_MOVE_ENTERED_WATER;
src/game/object_helpers.c:        if (o->oPosY < waterLevel) {
src/game/object_helpers.c:            if (o->oPosY < o->oFloorHeight) {
src/game/object_helpers.c:                o->oPosY = o->oFloorHeight;
src/game/object_helpers.c:                o->oMoveFlags &= ~OBJ_MOVE_MASK_IN_WATER;
src/game/object_helpers.c:                o->oPosY = waterLevel;
src/game/object_helpers.c:                o->oVelY = 0.0f;
src/game/object_helpers.c:                o->oMoveFlags &= ~(OBJ_MOVE_UNDERWATER_OFF_GROUND | OBJ_MOVE_UNDERWATER_ON_GROUND);
src/game/object_helpers.c:                o->oMoveFlags |= OBJ_MOVE_AT_WATER_SURFACE;
src/game/object_helpers.c:    if (o->oMoveFlags & OBJ_MOVE_MASK_33) {
src/game/object_helpers.c:        o->oMoveFlags &= ~OBJ_MOVE_IN_AIR;
src/game/object_helpers.c:        o->oMoveFlags |= OBJ_MOVE_IN_AIR;
src/game/object_helpers.c:        f32_find_wall_collision(&o->oPosX, &o->oPosY, &o->oPosZ, offsetY, radius);
src/game/object_helpers.c:    o->oVelX = o->oForwardVel * sins(o->oMoveAngleYaw);
src/game/object_helpers.c:    o->oVelZ = o->oForwardVel * coss(o->oMoveAngleYaw);
src/game/object_helpers.c:    o->oPosX += o->oVelX;
src/game/object_helpers.c:    o->oPosZ += o->oVelZ;
src/game/object_helpers.c:    if (o->oVelY < -70.0f) {
src/game/object_helpers.c:        o->oVelY = -70.0f;
src/game/object_helpers.c:    o->oPosY += o->oVelY;
src/game/object_helpers.c:    o->oVelX = o->oForwardVel * sins(o->oMoveAngleYaw);
src/game/object_helpers.c:    o->oVelZ = o->oForwardVel * coss(o->oMoveAngleYaw);
src/game/object_helpers.c:    o->behavior = segmented_to_virtual(behavior);
src/game/object_helpers.c:    if (o->behavior == segmented_to_virtual(behavior)) {
src/game/object_helpers.c:    f32 dx = o->oHomeX - gMarioObject->oPosX;
src/game/object_helpers.c:    f32 dz = o->oHomeZ - gMarioObject->oPosZ;
src/game/object_helpers.c:    f32 dx = o->oHomeX - o->oPosX;
src/game/object_helpers.c:    f32 dz = o->oHomeZ - o->oPosZ;
src/game/object_helpers.c:    if (o->oHomeX - halfLength > o->oPosX) {
src/game/object_helpers.c:    if (o->oHomeX + halfLength < o->oPosX) {
src/game/object_helpers.c:    if (o->oHomeZ - halfLength > o->oPosZ) {
src/game/object_helpers.c:    if (o->oHomeZ + halfLength < o->oPosZ) {
src/game/object_helpers.c:    if (o->oHomeX + minX > o->oPosX) {
src/game/object_helpers.c:    if (o->oHomeX + maxX < o->oPosX) {
src/game/object_helpers.c:    if (o->oHomeZ + minZ > o->oPosZ) {
src/game/object_helpers.c:    if (o->oHomeZ + maxZ < o->oPosZ) {
src/game/object_helpers.c:    o->oPosX = o->oHomeX;
src/game/object_helpers.c:    o->oPosY = o->oHomeY;
src/game/object_helpers.c:    o->oPosZ = o->oHomeZ;
src/game/object_helpers.c:    o->oForwardVel = 0;
src/game/object_helpers.c:    o->oVelY = 0;
src/game/object_helpers.c:    if (o->oTimer % 2 == 0) {
src/game/object_helpers.c:        o->oPosY += amount;
src/game/object_helpers.c:        o->oPosY -= amount;
src/game/object_helpers.c:    if (o->oDistanceToMario < sp8) {
src/game/object_helpers.c:    o->hitboxRadius = radius;
src/game/object_helpers.c:    o->hitboxHeight = height;
src/game/object_helpers.c:    o->hurtboxRadius = radius;
src/game/object_helpers.c:    o->hurtboxHeight = height;
src/game/object_helpers.c:    if (o->oNumLootCoins <= 0) {
src/game/object_helpers.c:    o->oNumLootCoins--;
src/game/object_helpers.c:    f32 dist = o->oHomeY - o->oPosY;
src/game/object_helpers.c:    s32 spC = o->header.gfx.unk38.animFrame;
src/game/object_helpers.c:    s32 sp8 = o->header.gfx.unk38.curAnim->unk08;
src/game/object_helpers.c:    if (o->oForwardVel != 0) {
src/game/object_helpers.c:        intendedX = o->oPosX + o->oVelX;
src/game/object_helpers.c:        intendedZ = o->oPosZ + o->oVelZ;
src/game/object_helpers.c:        intendedFloorHeight = find_floor(intendedX, o->oPosY, intendedZ, &intendedFloor);
src/game/object_helpers.c:        deltaFloorHeight = intendedFloorHeight - o->oFloorHeight;
src/game/object_helpers.c:            o->oWallAngle = o->oMoveAngleYaw + 0x8000;
src/game/object_helpers.c:                   && intendedFloorHeight > o->oPosY) {
src/game/object_helpers.c:            o->oWallAngle = atan2s(intendedFloor->normal.z, intendedFloor->normal.x);
src/game/object_helpers.c:    f32 radius = o->oWallHitboxRadius;
src/game/object_helpers.c:        collisionData.x = (s16) o->oPosX;
src/game/object_helpers.c:        collisionData.y = (s16) o->oPosY;
src/game/object_helpers.c:        collisionData.z = (s16) o->oPosZ;
src/game/object_helpers.c:            o->oPosX = collisionData.x;
src/game/object_helpers.c:            o->oPosY = collisionData.y;
src/game/object_helpers.c:            o->oPosZ = collisionData.z;
src/game/object_helpers.c:            o->oWallAngle = atan2s(wall->normal.z, wall->normal.x);
src/game/object_helpers.c:            if (abs_angle_diff(o->oWallAngle, o->oMoveAngleYaw) > 0x4000) {
src/game/object_helpers.c:    o->oFloor = floor;
src/game/object_helpers.c:            o->oMoveFlags |= OBJ_MOVE_ABOVE_LAVA;
src/game/object_helpers.c:            o->oMoveFlags |= OBJ_MOVE_ABOVE_DEATH_BARRIER;
src/game/object_helpers.c:        o->oFloorType = floor->type;
src/game/object_helpers.c:        o->oFloorRoom = floor->room;
src/game/object_helpers.c:        o->oFloorType = 0;
src/game/object_helpers.c:        o->oFloorRoom = 0;
src/game/object_helpers.c:    o->oMoveFlags &= ~OBJ_MOVE_ABOVE_LAVA;
src/game/object_helpers.c:    o->oMoveFlags &= ~(OBJ_MOVE_ABOVE_LAVA | OBJ_MOVE_ABOVE_DEATH_BARRIER);
src/game/object_helpers.c:    if (o->activeFlags & (ACTIVE_FLAG_FAR_AWAY | ACTIVE_FLAG_IN_DIFFERENT_ROOM)) {
src/game/object_helpers.c:        o->oMoveFlags &= ~OBJ_MOVE_MASK_HIT_WALL_OR_IN_WATER;
src/game/object_helpers.c:        if (o->oPosY > o->oFloorHeight) {
src/game/object_helpers.c:            o->oMoveFlags |= OBJ_MOVE_IN_AIR;
src/game/object_helpers.c:        o->oMoveFlags &= ~OBJ_MOVE_HIT_WALL;
src/game/object_helpers.c:            o->oMoveFlags |= OBJ_MOVE_HIT_WALL;
src/game/object_helpers.c:        if (o->oPosY > o->oFloorHeight) {
src/game/object_helpers.c:            o->oMoveFlags |= OBJ_MOVE_IN_AIR;
src/game/object_helpers.c:            o->oMoveFlags |= OBJ_MOVE_HIT_WALL;
src/game/object_helpers.c:    f32 gravity = o->oGravity;
src/game/object_helpers.c:    f32 bounciness = o->oBounciness;
src/game/object_helpers.c:    f32 buoyancy = o->oBuoyancy;
src/game/object_helpers.c:    f32 dragStrength = o->oDragStrength;
src/game/object_helpers.c:    if (!(o->activeFlags & (ACTIVE_FLAG_FAR_AWAY | ACTIVE_FLAG_IN_DIFFERENT_ROOM))) {
src/game/object_helpers.c:        if (o->oForwardVel < 0) {
src/game/object_helpers.c:        o->oForwardVel = sqrtf(sqr(o->oVelX) + sqr(o->oVelZ));
src/game/object_helpers.c:            o->oForwardVel = -o->oForwardVel;
src/game/object_helpers.c:    if (o->oPosX < -12000.0f || 12000.0f < o->oPosX) {
src/game/object_helpers.c:    if (o->oPosY < -12000.0f || 12000.0f < o->oPosY) {
src/game/object_helpers.c:    if (o->oPosZ < -12000.0f || 12000.0f < o->oPosZ) {
src/game/object_helpers.c:        o->oPosX += o->oVelX;
src/game/object_helpers.c:        o->oPosZ += o->oVelZ;
src/game/object_helpers.c:        o->oVelY += o->oGravity; //! No terminal velocity
src/game/object_helpers.c:        o->oPosY += o->oVelY;
src/game/object_helpers.c:    f32 dx = o->oHomeX - o->oPosX;
src/game/object_helpers.c:    f32 dz = o->oHomeZ - o->oPosZ;
src/game/object_helpers.c:    o->oMoveAnglePitch += o->oAngleVelPitch;
src/game/object_helpers.c:    o->oMoveAngleYaw += o->oAngleVelYaw;
src/game/object_helpers.c:    o->oMoveAngleRoll += o->oAngleVelRoll;
src/game/object_helpers.c:    o->oFaceAnglePitch += o->oAngleVelPitch;
src/game/object_helpers.c:    o->oFaceAngleYaw += o->oAngleVelYaw;
src/game/object_helpers.c:    o->oFaceAngleRoll += o->oAngleVelRoll;
src/game/object_helpers.c:    o->oFaceAnglePitch = o->oMoveAnglePitch;
src/game/object_helpers.c:    o->oFaceAngleYaw = o->oMoveAngleYaw;
src/game/object_helpers.c:    o->oFaceAngleRoll = o->oMoveAngleRoll;
src/game/object_helpers.c:    if (o->oPathedPrevWaypointFlags == 0) {
src/game/object_helpers.c:        o->oPathedPrevWaypoint = o->oPathedStartWaypoint;
src/game/object_helpers.c:        o->oPathedPrevWaypointFlags = WAYPOINT_FLAGS_INITIALIZED;
src/game/object_helpers.c:    startWaypoint = o->oPathedStartWaypoint;
src/game/object_helpers.c:    lastWaypoint = o->oPathedPrevWaypoint;
src/game/object_helpers.c:    o->oPathedPrevWaypointFlags = lastWaypoint->flags | WAYPOINT_FLAGS_INITIALIZED;
src/game/object_helpers.c:    objToNextX = targetWaypoint->pos[0] - o->oPosX;
src/game/object_helpers.c:    objToNextY = targetWaypoint->pos[1] - o->oPosY;
src/game/object_helpers.c:    objToNextZ = targetWaypoint->pos[2] - o->oPosZ;
src/game/object_helpers.c:    o->oPathedTargetYaw = atan2s(objToNextZ, objToNextX);
src/game/object_helpers.c:    o->oPathedTargetPitch = atan2s(objToNextXZ, -objToNextY);
src/game/object_helpers.c:        o->oPathedPrevWaypoint = targetWaypoint;
src/game/object_helpers.c:    o->oPosX += o->oVelX;
src/game/object_helpers.c:    o->oPosY += o->oVelY;
src/game/object_helpers.c:    o->oPosZ += o->oVelZ;
src/game/object_helpers.c:    s16 angle = o->oWallAngle - ((s16) o->oMoveAngleYaw - (s16) o->oWallAngle) + 0x8000;
src/game/object_helpers.c:    s32 numParticles = info->count;
src/game/object_helpers.c:        scale = random_float() * (info->sizeRange * 0.1f) + info->sizeBase * 0.1f;
src/game/object_helpers.c:        particle = spawn_object(o, info->model, bhvWhitePuffExplosion);
src/game/object_helpers.c:        particle->oBehParams2ndByte = info->behParam;
src/game/object_helpers.c:        particle->oGravity = info->gravity;
src/game/object_helpers.c:        particle->oDragStrength = info->dragStrength;
src/game/object_helpers.c:        particle->oPosY += info->offsetY;
src/game/object_helpers.c:        particle->oForwardVel = random_float() * info->forwardVelRange + info->forwardVelBase;
src/game/object_helpers.c:        particle->oVelY = random_float() * info->velYRange + info->velYBase;
src/game/object_helpers.c:    if (o->oTimer >= timeUntilBlinking) {
src/game/object_helpers.c:        if ((timeBlinking = o->oTimer - timeUntilBlinking) % 2 != 0) {
src/game/object_helpers.c:            o->header.gfx.node.flags |= GRAPH_RENDER_INVISIBLE;
src/game/object_helpers.c:            o->header.gfx.node.flags &= ~GRAPH_RENDER_INVISIBLE;
src/game/object_helpers.c:    f32 marioRelX = gMarioObject->oPosX - o->oPosX;
src/game/object_helpers.c:    f32 marioRelZ = gMarioObject->oPosZ - o->oPosZ;
src/game/object_helpers.c:    f32 marioRelY = gMarioObject->oPosY - o->oPosY;
src/game/object_helpers.c:    o->oPosX += o->oVelX;
src/game/object_helpers.c:    o->oPosY += o->oVelY;
src/game/object_helpers.c:    o->oPosZ += o->oVelZ;
src/game/object_helpers.c:    if (o->oSmokeTimer == 10) {
src/game/object_helpers.c:    o->oSmokeTimer++;
src/game/object_helpers.c:    o->oToxBoxUnk1AC = a0;
src/game/object_helpers.c:    o->oToxBoxUnk1B0 = 0;
src/game/object_helpers.c:    return *(s8 *) o->oToxBoxUnk1AC;
src/game/object_helpers.c:    s8 *sp8 = o->oToxBoxUnk1AC;
src/game/object_helpers.c:    s32 sp4 = o->oToxBoxUnk1B0 + 1;
src/game/object_helpers.c:        o->oToxBoxUnk1B0++;
src/game/object_helpers.c:        o->oToxBoxUnk1B0 = 0;
src/game/object_helpers.c:    f32 sp0 = (f32) o->oTimer / a1;
src/game/object_helpers.c:        o->header.gfx.scale[0] = sp4 * sp0 + sp10;
src/game/object_helpers.c:        o->header.gfx.scale[1] = sp4 * sp0 + sp10;
src/game/object_helpers.c:        o->header.gfx.scale[2] = sp4 * sp0 + sp10;
src/game/object_helpers.c:    o->oPosX = o->oHomeX + gDebugInfo[5][0];
src/game/object_helpers.c:    o->oPosY = o->oHomeY + gDebugInfo[5][1];
src/game/object_helpers.c:    o->oPosZ = o->oHomeZ + gDebugInfo[5][2];
src/game/object_helpers.c:    if (o->oTimer % 2 != 0) {
src/game/object_helpers.c:        o->oPosY -= amount;
src/game/object_helpers.c:        o->oPosY += amount;
src/game/object_helpers.c:    if (o->oTimer == cycles * 2) {
src/game/object_helpers.c:    o->oPosY += D_8032F0A0[a0];
src/game/object_helpers.c:    void (*actionFunction)(void) = actionFunctions[o->oAction];
src/game/object_helpers.c:    sp1C->oBehParams = o->oBehParams;
src/game/object_helpers.c:    f32 dx = o->oHomeX - gMarioObject->oPosX;
src/game/object_helpers.c:    f32 dy = o->oHomeY - gMarioObject->oPosY;
src/game/object_helpers.c:    f32 dz = o->oHomeZ - gMarioObject->oPosZ;
src/game/object_helpers.c:    if (o->oDistanceToMario > 2000.0f && marioDistToHome > 2000.0f) {
src/game/object_helpers.c:        floorHeight = find_floor(o->oPosX, o->oPosY, o->oPosZ, &floor);
src/game/object_helpers.c:                o->oRoom = floor->room;
src/game/object_helpers.c:                find_floor(o->oPosX, floorHeight - 100.0f, o->oPosZ, &floor);
src/game/object_helpers.c:                    o->oRoom = floor->room;
src/game/object_helpers.c:        o->oRoom = -1;
src/game/object_helpers.c:    if (o->oRoom != -1 && gMarioCurrentRoom != 0) {
src/game/object_helpers.c:        if (gMarioCurrentRoom == o->oRoom) {
src/game/object_helpers.c:        } else if (gDoorAdjacentRooms[gMarioCurrentRoom][0] == o->oRoom) {
src/game/object_helpers.c:        } else if (gDoorAdjacentRooms[gMarioCurrentRoom][1] == o->oRoom) {
src/game/object_helpers.c:            o->activeFlags &= ~ACTIVE_FLAG_IN_DIFFERENT_ROOM;
src/game/object_helpers.c:            o->activeFlags |= ACTIVE_FLAG_IN_DIFFERENT_ROOM;
src/game/object_helpers.c:        o->oNumLootCoins = 0;
src/game/object_helpers.c:    if (o->oInteractStatus & INT_STATUS_INTERACTED) {
src/game/object_helpers.c:        if (o->oInteractStatus & INT_STATUS_WAS_ATTACKED) {
src/game/object_helpers.c:            if (o->oHealth < 2) {
src/game/object_helpers.c:                obj_spawn_loot_yellow_coins(o, o->oNumLootCoins, 20.0f);
src/game/object_helpers.c:                o->oDmgFade = 255;
src/game/object_helpers.c:                    o->oHealth-=2;
src/game/object_helpers.c:                    o->oHealth--;
src/game/object_helpers.c:    o->oInteractStatus = 0;
src/game/object_helpers.c:        obj_spawn_loot_yellow_coins(o, o->oNumLootCoins, 20.0f);
src/game/object_helpers.c:        obj_spawn_loot_blue_coins(o, o->oNumLootCoins, 20.0f, 150);
src/game/object_helpers.c:    if (o->oMoveFlags & OBJ_MOVE_HIT_WALL) {
src/game/object_helpers.c:        o->oMoveAngleYaw = o->oWallAngle;
src/game/object_helpers.c:    if (absf(o->oPosY - gMarioObject->oPosY) < distY) {
src/game/object_helpers.c:    if (o->oDistanceToMario < 1500.0f) {
src/game/object_helpers.c:        if (latDistToMario < radius && o->oPosY < gMarioObject->oPosY + 160.0f
src/game/object_helpers.c:            && gMarioObject->oPosY < o->oPosY + height && !(gMarioStates[0].action & ACT_FLAG_AIR)
src/game/object_helpers.c:    o->oDialogResponse = dialogResult;
src/game/object_helpers.c:    o->oDialogState++;
src/game/object_helpers.c:    switch (o->oDialogState) {
src/game/object_helpers.c:                o->activeFlags |= ACTIVE_FLAG_INITIATED_TIME_STOP;
src/game/object_helpers.c:                o->oDialogState++;
src/game/object_helpers.c:                o->activeFlags |= ACTIVE_FLAG_INITIATED_TIME_STOP;
src/game/object_helpers.c:                o->oDialogState++;
src/game/object_helpers.c:                o->oDialogState++;
src/game/object_helpers.c:            o->oDialogState++;
src/game/object_helpers.c:                o->activeFlags &= ~ACTIVE_FLAG_INITIATED_TIME_STOP;
src/game/object_helpers.c:                dialogResponse = o->oDialogResponse;
src/game/object_helpers.c:                o->oDialogState = DIALOG_UNK1_ENABLE_TIME_STOP;
src/game/object_helpers.c:            o->oDialogState = DIALOG_UNK1_ENABLE_TIME_STOP;
src/game/object_helpers.c:    switch (o->oDialogState) {
src/game/object_helpers.c:                o->activeFlags |= ACTIVE_FLAG_INITIATED_TIME_STOP;
src/game/object_helpers.c:                o->oDialogState++;
src/game/object_helpers.c:                o->oDialogResponse = 0;
src/game/object_helpers.c:                o->activeFlags |= ACTIVE_FLAG_INITIATED_TIME_STOP;
src/game/object_helpers.c:                o->oDialogState++;
src/game/object_helpers.c:                o->oDialogResponse = 0;
src/game/object_helpers.c:                if (o->oDialogResponse >= 0x21) {
src/game/object_helpers.c:                o->oDialogResponse = 0;
src/game/object_helpers.c:                o->oDialogState++;
src/game/object_helpers.c:                o->oDialogResponse++;
src/game/object_helpers.c:                if ((o->oDialogResponse = cutscene_object_without_dialog(cutsceneTable, o)) != 0) {
src/game/object_helpers.c:                    o->oDialogState++;
src/game/object_helpers.c:                if ((o->oDialogResponse = cutscene_object_with_dialog(cutsceneTable, o, dialogID)) != 0) {
src/game/object_helpers.c:                    o->oDialogState++;
src/game/object_helpers.c:                dialogResponse = o->oDialogResponse;
src/game/object_helpers.c:                o->oDialogState = DIALOG_UNK2_ENABLE_TIME_STOP;
src/game/object_helpers.c:                o->activeFlags &= ~ACTIVE_FLAG_INITIATED_TIME_STOP;
src/game/object_helpers.c:                dialogResponse = o->oDialogResponse;
src/game/object_helpers.c:                o->oDialogState = DIALOG_UNK2_ENABLE_TIME_STOP;
src/game/object_helpers.c:    if (o->header.gfx.sharedChild == gLoadedGraphNodes[modelID]) {
src/game/object_helpers.c:    position[0] = o->oPosX;
src/game/object_helpers.c:    position[1] = o->oPosY;
src/game/object_helpers.c:    position[2] = o->oPosZ;
src/game/object_helpers.c:        mtxf_align_terrain_normal(o->transform, floorNormal, position, o->oFaceAngleYaw);
src/game/object_helpers.c:        o->header.gfx.throwMatrix = o->transform;
src/game/object_helpers.c:    position[0] = o->oPosX;
src/game/object_helpers.c:    position[1] = o->oPosY;
src/game/object_helpers.c:    position[2] = o->oPosZ;
src/game/object_helpers.c:        mtxf_align_terrain_normal_lerp(o->transform, floorNormal, position, o->oFaceAngleYaw);
src/game/object_helpers.c:        o->header.gfx.throwMatrix = o->transform;
src/game/object_helpers.c:    set_camera_shake_from_point(shake, o->oPosX, o->oPosY, o->oPosZ);
src/game/object_helpers.c:    if ((o->oInteractStatus & INT_STATUS_INTERACTED)
src/game/object_helpers.c:        && (o->oInteractStatus & INT_STATUS_WAS_ATTACKED)) {
src/game/object_helpers.c:    o->oInteractStatus = 0;
src/game/object_helpers.c:    o->header.gfx.unk38.animFrame = animFrame;
src/game/object_helpers.c:    if (o->oInteractStatus & INT_STATUS_GRABBED_MARIO) {
src/game/object_helpers.c:        o->oKingBobombUnk88 = 1;
src/game/object_helpers.c:    o->activeFlags |= ACTIVE_FLAG_INITIATED_TIME_STOP;
src/game/object_helpers.c:    o->activeFlags &= ~ACTIVE_FLAG_INITIATED_TIME_STOP;
src/game/object_helpers.c:    if (o->oInteractStatus & INT_STATUS_INTERACTED) {
src/game/object_helpers.c:        o->oInteractStatus = 0;
src/game/object_helpers.c:    if (o->oNumLootCoins >= 5) {
src/game/object_helpers.c:        o->oNumLootCoins -= 5;
src/game/object_helpers.c:    f32 objectPosY = o->oPosY;
src/game/object_helpers.c:    o->oPosY += offsetY + gDebugInfo[5][0];
src/game/object_helpers.c:    o->oPosY = objectPosY;
src/game/object_helpers.c.orig:    if (o->oForwardVel >= target) {
src/game/object_helpers.c.orig:        o->oForwardVel = target;
src/game/object_helpers.c.orig:        o->oForwardVel += increment;
src/game/object_helpers.c.orig:    startYaw = (s16) o->oMoveAngleYaw;
src/game/object_helpers.c.orig:    o->oMoveAngleYaw = approach_s16_symmetric(o->oMoveAngleYaw, target, increment);
src/game/object_helpers.c.orig:    if ((o->oAngleVelYaw = (s16)((s16) o->oMoveAngleYaw - startYaw)) == 0) {
src/game/object_helpers.c.orig:    startAngle = o->rawData.asU32[angleIndex];
src/game/object_helpers.c.orig:    o->rawData.asU32[angleIndex] = approach_s16_symmetric(startAngle, targetAngle, turnAmount);
src/game/object_helpers.c.orig:    o->oPosX += o->oVelX;
src/game/object_helpers.c.orig:    o->oPosY += o->oVelY;
src/game/object_helpers.c.orig:    o->oPosZ += o->oVelZ;
src/game/object_helpers.c.orig:    struct Animation **anims = o->oAnimations;
src/game/object_helpers.c.orig:    o->header.gfx.scale[0] = scale;
src/game/object_helpers.c.orig:    o->header.gfx.scale[1] = scale;
src/game/object_helpers.c.orig:    o->header.gfx.scale[2] = scale;
src/game/object_helpers.c.orig:    struct Animation **anims = o->oAnimations;
src/game/object_helpers.c.orig:    geo_obj_init_animation(&o->header.gfx, &anims[animIndex]);
src/game/object_helpers.c.orig:    struct Animation **anims = o->oAnimations;
src/game/object_helpers.c.orig:    geo_obj_init_animation(&o->header.gfx, &anims[animIndex]);
src/game/object_helpers.c.orig:    o->oSoundStateID = animIndex;
src/game/object_helpers.c.orig:    struct Animation **anims = o->oAnimations;
src/game/object_helpers.c.orig:    geo_obj_init_animation_accel(&o->header.gfx, &anims[animIndex], animAccel);
src/game/object_helpers.c.orig:    o->oSoundStateID = animIndex;
src/game/object_helpers.c.orig:    o->header.gfx.node.flags |= GRAPH_RENDER_ACTIVE;
src/game/object_helpers.c.orig:    o->header.gfx.node.flags &= ~GRAPH_RENDER_ACTIVE;
src/game/object_helpers.c.orig:    o->header.gfx.node.flags &= ~GRAPH_RENDER_INVISIBLE;
src/game/object_helpers.c.orig:    o->header.gfx.node.flags |= GRAPH_RENDER_INVISIBLE;
src/game/object_helpers.c.orig:    o->oMoveAngleYaw = other->oMoveAngleYaw;
src/game/object_helpers.c.orig:    o->oPosX = other->oPosX + dx;
src/game/object_helpers.c.orig:    o->oPosY = other->oPosY + dy;
src/game/object_helpers.c.orig:    o->oPosZ = other->oPosZ + dz;
src/game/object_helpers.c.orig:    cur_obj_set_pos_relative(o->parentObj, dleft, dy, dforward);
src/game/object_helpers.c.orig:    o->oPosY = find_floor_height(o->oPosX, o->oPosY, o->oPosZ);
src/game/object_helpers.c.orig:    if (o->oPosY < -10000.0f) {
src/game/object_helpers.c.orig:        o->oPosY = find_floor_height(o->oPosX, o->oPosY, o->oPosZ);
src/game/object_helpers.c.orig:    o->oTimer = 0;
src/game/object_helpers.c.orig:    o->oSubAction = 0;
src/game/object_helpers.c.orig:    o->oAction = action;
src/game/object_helpers.c.orig:    o->oPrevAction = action;
src/game/object_helpers.c.orig:        o->oForwardVel = sp0;
src/game/object_helpers.c.orig:        o->oForwardVel = sp4 * f14;
src/game/object_helpers.c.orig:    if (o->header.gfx.unk38.animFrame >= 0) {
src/game/object_helpers.c.orig:        o->header.gfx.unk38.animFrame--;
src/game/object_helpers.c.orig:    s32 sp4 = o->header.gfx.unk38.animFrame;
src/game/object_helpers.c.orig:    s32 sp0 = o->header.gfx.unk38.curAnim->unk08 - 2;
src/game/object_helpers.c.orig:    if (sp4 == sp0) o->header.gfx.unk38.animFrame--;
src/game/object_helpers.c.orig:    u32 spC = (s32) o->header.gfx.unk38.curAnim->flags;
src/game/object_helpers.c.orig:    s32 sp8 = o->header.gfx.unk38.animFrame;
src/game/object_helpers.c.orig:    s32 sp4 = o->header.gfx.unk38.curAnim->unk08 - 2;
src/game/object_helpers.c.orig:    s32 sp4 = o->header.gfx.unk38.animFrame;
src/game/object_helpers.c.orig:    s32 sp0 = o->header.gfx.unk38.curAnim->unk08 - 1;
src/game/object_helpers.c.orig:    s32 animFrame = o->header.gfx.unk38.animFrame;
src/game/object_helpers.c.orig:    s32 animFrame = o->header.gfx.unk38.animFrame;
src/game/object_helpers.c.orig:    s16 sp6 = o->header.gfx.unk38.animFrame;
src/game/object_helpers.c.orig:    o->oVelY = sp18;
src/game/object_helpers.c.orig:    o->oAction = sp1C;
src/game/object_helpers.c.orig:    o->oMoveFlags = 0;
src/game/object_helpers.c.orig:    o->oFloorHeight = find_floor_height(o->oPosX, o->oPosY + 160.0f, o->oPosZ);
src/game/object_helpers.c.orig:    if (o->oFloorHeight > o->oPosY) {
src/game/object_helpers.c.orig:        o->oPosY = o->oFloorHeight;
src/game/object_helpers.c.orig:    } else if (o->oFloorHeight < -10000.0f) {
src/game/object_helpers.c.orig:        o->oFloorHeight = find_floor_height(o->oPosX, o->oPosY, o->oPosZ);
src/game/object_helpers.c.orig:    o->oForwardVel = forwardVel;
src/game/object_helpers.c.orig:    o->oVelY = velY;
src/game/object_helpers.c.orig:    if (o->oForwardVel != 0) {
src/game/object_helpers.c.orig:    if (o->behavior == segmented_to_virtual(bhvBowser)) {
src/game/object_helpers.c.orig:    o->oHeldState = HELD_FREE;
src/game/object_helpers.c.orig:    if ((o->oInteractionSubtype & INT_SUBTYPE_HOLDABLE_NPC) || forwardVel == 0.0f) {
src/game/object_helpers.c.orig:        o->oAction = thrownAction;
src/game/object_helpers.c.orig:    o->oHeldState = HELD_FREE;
src/game/object_helpers.c.orig:    o->header.gfx.sharedChild = gLoadedGraphNodes[modelID];
src/game/object_helpers.c.orig:    if (o->oInteractStatus & flag) {
src/game/object_helpers.c.orig:        o->oInteractStatus &= flag ^ ~(0);
src/game/object_helpers.c.orig:    o->oIntangibleTimer = -1;
src/game/object_helpers.c.orig:    o->oIntangibleTimer = 0;
src/game/object_helpers.c.orig:    o->oFloorHeight = find_floor(o->oPosX, o->oPosY, o->oPosZ, &floor);
src/game/object_helpers.c.orig:    o->oFloorHeight = find_floor(o->oPosX, o->oPosY, o->oPosZ, &floor);
src/game/object_helpers.c.orig:    apply_drag_to_value(&o->oVelX, dragStrength);
src/game/object_helpers.c.orig:    apply_drag_to_value(&o->oVelZ, dragStrength);
src/game/object_helpers.c.orig:    f32 intendedX = o->oPosX + o->oVelX;
src/game/object_helpers.c.orig:    f32 intendedZ = o->oPosZ + o->oVelZ;
src/game/object_helpers.c.orig:    f32 intendedFloorHeight = find_floor(intendedX, o->oPosY, intendedZ, &intendedFloor);
src/game/object_helpers.c.orig:    f32 deltaFloorHeight = intendedFloorHeight - o->oFloorHeight;
src/game/object_helpers.c.orig:    o->oMoveFlags &= ~OBJ_MOVE_HIT_EDGE;
src/game/object_helpers.c.orig:    if (o->oRoom != -1 && intendedFloor != NULL) {
src/game/object_helpers.c.orig:        if (intendedFloor->room != 0 && o->oRoom != intendedFloor->room && intendedFloor->room != 18) {
src/game/object_helpers.c.orig:        o->oMoveFlags |= OBJ_MOVE_HIT_EDGE;
src/game/object_helpers.c.orig:            o->oPosX = intendedX;
src/game/object_helpers.c.orig:            o->oPosZ = intendedZ;
src/game/object_helpers.c.orig:        } else if (deltaFloorHeight < -50.0f && (o->oMoveFlags & OBJ_MOVE_ON_GROUND)) {
src/game/object_helpers.c.orig:            o->oMoveFlags |= OBJ_MOVE_HIT_EDGE;
src/game/object_helpers.c.orig:            o->oPosX = intendedX;
src/game/object_helpers.c.orig:            o->oPosZ = intendedZ;
src/game/object_helpers.c.orig:            o->oMoveFlags |= OBJ_MOVE_HIT_EDGE;
src/game/object_helpers.c.orig:    } else if ((ny = intendedFloor->normal.y) > steepSlopeNormalY || o->oPosY > intendedFloorHeight) {
src/game/object_helpers.c.orig:        o->oPosX = intendedX;
src/game/object_helpers.c.orig:        o->oPosZ = intendedZ;
src/game/object_helpers.c.orig:    f32 decelY = (f32)(sqrtf(o->oVelY * o->oVelY) * (o->oDragStrength * 7.0f)) / 100.0L;
src/game/object_helpers.c.orig:    if (o->oVelY > 0) {
src/game/object_helpers.c.orig:        o->oVelY -= decelY;
src/game/object_helpers.c.orig:        o->oVelY += decelY;
src/game/object_helpers.c.orig:    if (o->oPosY < o->oFloorHeight) {
src/game/object_helpers.c.orig:        o->oPosY = o->oFloorHeight;
src/game/object_helpers.c.orig:        o->oMoveFlags |= OBJ_MOVE_UNDERWATER_ON_GROUND;
src/game/object_helpers.c.orig:        o->oMoveFlags |= OBJ_MOVE_UNDERWATER_OFF_GROUND;
src/game/object_helpers.c.orig:    o->oMoveFlags &= ~OBJ_MOVE_13;
src/game/object_helpers.c.orig:    if (o->oPosY < o->oFloorHeight) {
src/game/object_helpers.c.orig:        if (!(o->oMoveFlags & OBJ_MOVE_ON_GROUND)) {
src/game/object_helpers.c.orig:            if (clear_move_flag(&o->oMoveFlags, OBJ_MOVE_LANDED)) {
src/game/object_helpers.c.orig:                o->oMoveFlags |= OBJ_MOVE_ON_GROUND;
src/game/object_helpers.c.orig:                o->oMoveFlags |= OBJ_MOVE_LANDED;
src/game/object_helpers.c.orig:        o->oPosY = o->oFloorHeight;
src/game/object_helpers.c.orig:        if (o->oVelY < 0.0f) {
src/game/object_helpers.c.orig:            o->oVelY *= bounciness;
src/game/object_helpers.c.orig:        if (o->oVelY > 5.0f) {
src/game/object_helpers.c.orig:            o->oMoveFlags |= OBJ_MOVE_13;
src/game/object_helpers.c.orig:        o->oMoveFlags &= ~OBJ_MOVE_LANDED;
src/game/object_helpers.c.orig:        if (clear_move_flag(&o->oMoveFlags, OBJ_MOVE_ON_GROUND)) {
src/game/object_helpers.c.orig:            o->oMoveFlags |= OBJ_MOVE_LEFT_GROUND;
src/game/object_helpers.c.orig:    o->oMoveFlags &= ~OBJ_MOVE_MASK_IN_WATER;
src/game/object_helpers.c.orig:    o->oVelY += gravity + buoyancy;
src/game/object_helpers.c.orig:    if (o->oVelY < -78.0f) {
src/game/object_helpers.c.orig:        o->oVelY = -78.0f;
src/game/object_helpers.c.orig:    o->oPosY += o->oVelY;
src/game/object_helpers.c.orig:    if (o->activeFlags & ACTIVE_FLAG_UNK10) {
src/game/object_helpers.c.orig:        waterLevel = find_water_level(o->oPosX, o->oPosZ);
src/game/object_helpers.c.orig:    o->oMoveFlags &= ~OBJ_MOVE_LEFT_GROUND;
src/game/object_helpers.c.orig:    if (o->oMoveFlags & OBJ_MOVE_AT_WATER_SURFACE) {
src/game/object_helpers.c.orig:        if (o->oVelY > 5.0f) {
src/game/object_helpers.c.orig:            o->oMoveFlags &= ~OBJ_MOVE_MASK_IN_WATER;
src/game/object_helpers.c.orig:            o->oMoveFlags |= OBJ_MOVE_LEAVING_WATER;
src/game/object_helpers.c.orig:    if (!(o->oMoveFlags & OBJ_MOVE_MASK_IN_WATER)) {
src/game/object_helpers.c.orig:        if (o->oPosY > waterLevel) {
src/game/object_helpers.c.orig:            o->oMoveFlags |= OBJ_MOVE_ENTERED_WATER;
src/game/object_helpers.c.orig:            o->oMoveFlags &= ~OBJ_MOVE_MASK_ON_GROUND;
src/game/object_helpers.c.orig:        o->oMoveFlags &= ~OBJ_MOVE_ENTERED_WATER;
src/game/object_helpers.c.orig:        if (o->oPosY < waterLevel) {
src/game/object_helpers.c.orig:            if (o->oPosY < o->oFloorHeight) {
src/game/object_helpers.c.orig:                o->oPosY = o->oFloorHeight;
src/game/object_helpers.c.orig:                o->oMoveFlags &= ~OBJ_MOVE_MASK_IN_WATER;
src/game/object_helpers.c.orig:                o->oPosY = waterLevel;
src/game/object_helpers.c.orig:                o->oVelY = 0.0f;
src/game/object_helpers.c.orig:                o->oMoveFlags &= ~(OBJ_MOVE_UNDERWATER_OFF_GROUND | OBJ_MOVE_UNDERWATER_ON_GROUND);
src/game/object_helpers.c.orig:                o->oMoveFlags |= OBJ_MOVE_AT_WATER_SURFACE;
src/game/object_helpers.c.orig:    if (o->oMoveFlags & OBJ_MOVE_MASK_33) {
src/game/object_helpers.c.orig:        o->oMoveFlags &= ~OBJ_MOVE_IN_AIR;
src/game/object_helpers.c.orig:        o->oMoveFlags |= OBJ_MOVE_IN_AIR;
src/game/object_helpers.c.orig:        f32_find_wall_collision(&o->oPosX, &o->oPosY, &o->oPosZ, offsetY, radius);
src/game/object_helpers.c.orig:    o->oVelX = o->oForwardVel * sins(o->oMoveAngleYaw);
src/game/object_helpers.c.orig:    o->oVelZ = o->oForwardVel * coss(o->oMoveAngleYaw);
src/game/object_helpers.c.orig:    o->oPosX += o->oVelX;
src/game/object_helpers.c.orig:    o->oPosZ += o->oVelZ;
src/game/object_helpers.c.orig:    if (o->oVelY < -70.0f) {
src/game/object_helpers.c.orig:        o->oVelY = -70.0f;
src/game/object_helpers.c.orig:    o->oPosY += o->oVelY;
src/game/object_helpers.c.orig:    o->oVelX = o->oForwardVel * sins(o->oMoveAngleYaw);
src/game/object_helpers.c.orig:    o->oVelZ = o->oForwardVel * coss(o->oMoveAngleYaw);
src/game/object_helpers.c.orig:    o->behavior = segmented_to_virtual(behavior);
src/game/object_helpers.c.orig:    if (o->behavior == segmented_to_virtual(behavior)) {
src/game/object_helpers.c.orig:    f32 dx = o->oHomeX - gMarioObject->oPosX;
src/game/object_helpers.c.orig:    f32 dz = o->oHomeZ - gMarioObject->oPosZ;
src/game/object_helpers.c.orig:    f32 dx = o->oHomeX - o->oPosX;
src/game/object_helpers.c.orig:    f32 dz = o->oHomeZ - o->oPosZ;
src/game/object_helpers.c.orig:    if (o->oHomeX - halfLength > o->oPosX) {
src/game/object_helpers.c.orig:    if (o->oHomeX + halfLength < o->oPosX) {
src/game/object_helpers.c.orig:    if (o->oHomeZ - halfLength > o->oPosZ) {
src/game/object_helpers.c.orig:    if (o->oHomeZ + halfLength < o->oPosZ) {
src/game/object_helpers.c.orig:    if (o->oHomeX + minX > o->oPosX) {
src/game/object_helpers.c.orig:    if (o->oHomeX + maxX < o->oPosX) {
src/game/object_helpers.c.orig:    if (o->oHomeZ + minZ > o->oPosZ) {
src/game/object_helpers.c.orig:    if (o->oHomeZ + maxZ < o->oPosZ) {
src/game/object_helpers.c.orig:    o->oPosX = o->oHomeX;
src/game/object_helpers.c.orig:    o->oPosY = o->oHomeY;
src/game/object_helpers.c.orig:    o->oPosZ = o->oHomeZ;
src/game/object_helpers.c.orig:    o->oForwardVel = 0;
src/game/object_helpers.c.orig:    o->oVelY = 0;
src/game/object_helpers.c.orig:    if (o->oTimer % 2 == 0) {
src/game/object_helpers.c.orig:        o->oPosY += amount;
src/game/object_helpers.c.orig:        o->oPosY -= amount;
src/game/object_helpers.c.orig:    if (o->oDistanceToMario < sp8) {
src/game/object_helpers.c.orig:    o->hitboxRadius = radius;
src/game/object_helpers.c.orig:    o->hitboxHeight = height;
src/game/object_helpers.c.orig:    o->hurtboxRadius = radius;
src/game/object_helpers.c.orig:    o->hurtboxHeight = height;
src/game/object_helpers.c.orig:    if (o->oNumLootCoins <= 0) {
src/game/object_helpers.c.orig:    o->oNumLootCoins--;
src/game/object_helpers.c.orig:    f32 dist = o->oHomeY - o->oPosY;
src/game/object_helpers.c.orig:    s32 spC = o->header.gfx.unk38.animFrame;
src/game/object_helpers.c.orig:    s32 sp8 = o->header.gfx.unk38.curAnim->unk08;
src/game/object_helpers.c.orig:    if (o->oForwardVel != 0) {
src/game/object_helpers.c.orig:        intendedX = o->oPosX + o->oVelX;
src/game/object_helpers.c.orig:        intendedZ = o->oPosZ + o->oVelZ;
src/game/object_helpers.c.orig:        intendedFloorHeight = find_floor(intendedX, o->oPosY, intendedZ, &intendedFloor);
src/game/object_helpers.c.orig:        deltaFloorHeight = intendedFloorHeight - o->oFloorHeight;
src/game/object_helpers.c.orig:            o->oWallAngle = o->oMoveAngleYaw + 0x8000;
src/game/object_helpers.c.orig:                   && intendedFloorHeight > o->oPosY) {
src/game/object_helpers.c.orig:            o->oWallAngle = atan2s(intendedFloor->normal.z, intendedFloor->normal.x);
src/game/object_helpers.c.orig:    f32 radius = o->oWallHitboxRadius;
src/game/object_helpers.c.orig:        collisionData.x = (s16) o->oPosX;
src/game/object_helpers.c.orig:        collisionData.y = (s16) o->oPosY;
src/game/object_helpers.c.orig:        collisionData.z = (s16) o->oPosZ;
src/game/object_helpers.c.orig:            o->oPosX = collisionData.x;
src/game/object_helpers.c.orig:            o->oPosY = collisionData.y;
src/game/object_helpers.c.orig:            o->oPosZ = collisionData.z;
src/game/object_helpers.c.orig:            o->oWallAngle = atan2s(wall->normal.z, wall->normal.x);
src/game/object_helpers.c.orig:            if (abs_angle_diff(o->oWallAngle, o->oMoveAngleYaw) > 0x4000) {
src/game/object_helpers.c.orig:    o->oFloor = floor;
src/game/object_helpers.c.orig:            o->oMoveFlags |= OBJ_MOVE_ABOVE_LAVA;
src/game/object_helpers.c.orig:            o->oMoveFlags |= OBJ_MOVE_ABOVE_DEATH_BARRIER;
src/game/object_helpers.c.orig:        o->oFloorType = floor->type;
src/game/object_helpers.c.orig:        o->oFloorRoom = floor->room;
src/game/object_helpers.c.orig:        o->oFloorType = 0;
src/game/object_helpers.c.orig:        o->oFloorRoom = 0;
src/game/object_helpers.c.orig:    o->oMoveFlags &= ~OBJ_MOVE_ABOVE_LAVA;
src/game/object_helpers.c.orig:    o->oMoveFlags &= ~(OBJ_MOVE_ABOVE_LAVA | OBJ_MOVE_ABOVE_DEATH_BARRIER);
src/game/object_helpers.c.orig:    if (o->activeFlags & (ACTIVE_FLAG_FAR_AWAY | ACTIVE_FLAG_IN_DIFFERENT_ROOM)) {
src/game/object_helpers.c.orig:        o->oMoveFlags &= ~OBJ_MOVE_MASK_HIT_WALL_OR_IN_WATER;
src/game/object_helpers.c.orig:        if (o->oPosY > o->oFloorHeight) {
src/game/object_helpers.c.orig:            o->oMoveFlags |= OBJ_MOVE_IN_AIR;
src/game/object_helpers.c.orig:        o->oMoveFlags &= ~OBJ_MOVE_HIT_WALL;
src/game/object_helpers.c.orig:            o->oMoveFlags |= OBJ_MOVE_HIT_WALL;
src/game/object_helpers.c.orig:        if (o->oPosY > o->oFloorHeight) {
src/game/object_helpers.c.orig:            o->oMoveFlags |= OBJ_MOVE_IN_AIR;
src/game/object_helpers.c.orig:            o->oMoveFlags |= OBJ_MOVE_HIT_WALL;
src/game/object_helpers.c.orig:    f32 gravity = o->oGravity;
src/game/object_helpers.c.orig:    f32 bounciness = o->oBounciness;
src/game/object_helpers.c.orig:    f32 buoyancy = o->oBuoyancy;
src/game/object_helpers.c.orig:    f32 dragStrength = o->oDragStrength;
src/game/object_helpers.c.orig:    if (!(o->activeFlags & (ACTIVE_FLAG_FAR_AWAY | ACTIVE_FLAG_IN_DIFFERENT_ROOM))) {
src/game/object_helpers.c.orig:        if (o->oForwardVel < 0) {
src/game/object_helpers.c.orig:        o->oForwardVel = sqrtf(sqr(o->oVelX) + sqr(o->oVelZ));
src/game/object_helpers.c.orig:            o->oForwardVel = -o->oForwardVel;
src/game/object_helpers.c.orig:    if (o->oPosX < -12000.0f || 12000.0f < o->oPosX) {
src/game/object_helpers.c.orig:    if (o->oPosY < -12000.0f || 12000.0f < o->oPosY) {
src/game/object_helpers.c.orig:    if (o->oPosZ < -12000.0f || 12000.0f < o->oPosZ) {
src/game/object_helpers.c.orig:        o->oPosX += o->oVelX;
src/game/object_helpers.c.orig:        o->oPosZ += o->oVelZ;
src/game/object_helpers.c.orig:        o->oVelY += o->oGravity; //! No terminal velocity
src/game/object_helpers.c.orig:        o->oPosY += o->oVelY;
src/game/object_helpers.c.orig:    f32 dx = o->oHomeX - o->oPosX;
src/game/object_helpers.c.orig:    f32 dz = o->oHomeZ - o->oPosZ;
src/game/object_helpers.c.orig:    o->oMoveAnglePitch += o->oAngleVelPitch;
src/game/object_helpers.c.orig:    o->oMoveAngleYaw += o->oAngleVelYaw;
src/game/object_helpers.c.orig:    o->oMoveAngleRoll += o->oAngleVelRoll;
src/game/object_helpers.c.orig:    o->oFaceAnglePitch += o->oAngleVelPitch;
src/game/object_helpers.c.orig:    o->oFaceAngleYaw += o->oAngleVelYaw;
src/game/object_helpers.c.orig:    o->oFaceAngleRoll += o->oAngleVelRoll;
src/game/object_helpers.c.orig:    o->oFaceAnglePitch = o->oMoveAnglePitch;
src/game/object_helpers.c.orig:    o->oFaceAngleYaw = o->oMoveAngleYaw;
src/game/object_helpers.c.orig:    o->oFaceAngleRoll = o->oMoveAngleRoll;
src/game/object_helpers.c.orig:    if (o->oPathedPrevWaypointFlags == 0) {
src/game/object_helpers.c.orig:        o->oPathedPrevWaypoint = o->oPathedStartWaypoint;
src/game/object_helpers.c.orig:        o->oPathedPrevWaypointFlags = WAYPOINT_FLAGS_INITIALIZED;
src/game/object_helpers.c.orig:    startWaypoint = o->oPathedStartWaypoint;
src/game/object_helpers.c.orig:    lastWaypoint = o->oPathedPrevWaypoint;
src/game/object_helpers.c.orig:    o->oPathedPrevWaypointFlags = lastWaypoint->flags | WAYPOINT_FLAGS_INITIALIZED;
src/game/object_helpers.c.orig:    objToNextX = targetWaypoint->pos[0] - o->oPosX;
src/game/object_helpers.c.orig:    objToNextY = targetWaypoint->pos[1] - o->oPosY;
src/game/object_helpers.c.orig:    objToNextZ = targetWaypoint->pos[2] - o->oPosZ;
src/game/object_helpers.c.orig:    o->oPathedTargetYaw = atan2s(objToNextZ, objToNextX);
src/game/object_helpers.c.orig:    o->oPathedTargetPitch = atan2s(objToNextXZ, -objToNextY);
src/game/object_helpers.c.orig:        o->oPathedPrevWaypoint = targetWaypoint;
src/game/object_helpers.c.orig:    o->oPosX += o->oVelX;
src/game/object_helpers.c.orig:    o->oPosY += o->oVelY;
src/game/object_helpers.c.orig:    o->oPosZ += o->oVelZ;
src/game/object_helpers.c.orig:    s16 angle = o->oWallAngle - ((s16) o->oMoveAngleYaw - (s16) o->oWallAngle) + 0x8000;
src/game/object_helpers.c.orig:    s32 numParticles = info->count;
src/game/object_helpers.c.orig:        scale = random_float() * (info->sizeRange * 0.1f) + info->sizeBase * 0.1f;
src/game/object_helpers.c.orig:        particle = spawn_object(o, info->model, bhvWhitePuffExplosion);
src/game/object_helpers.c.orig:        particle->oBehParams2ndByte = info->behParam;
src/game/object_helpers.c.orig:        particle->oGravity = info->gravity;
src/game/object_helpers.c.orig:        particle->oDragStrength = info->dragStrength;
src/game/object_helpers.c.orig:        particle->oPosY += info->offsetY;
src/game/object_helpers.c.orig:        particle->oForwardVel = random_float() * info->forwardVelRange + info->forwardVelBase;
src/game/object_helpers.c.orig:        particle->oVelY = random_float() * info->velYRange + info->velYBase;
src/game/object_helpers.c.orig:    if (o->oTimer >= timeUntilBlinking) {
src/game/object_helpers.c.orig:        if ((timeBlinking = o->oTimer - timeUntilBlinking) % 2 != 0) {
src/game/object_helpers.c.orig:            o->header.gfx.node.flags |= GRAPH_RENDER_INVISIBLE;
src/game/object_helpers.c.orig:            o->header.gfx.node.flags &= ~GRAPH_RENDER_INVISIBLE;
src/game/object_helpers.c.orig:    f32 marioRelX = gMarioObject->oPosX - o->oPosX;
src/game/object_helpers.c.orig:    f32 marioRelZ = gMarioObject->oPosZ - o->oPosZ;
src/game/object_helpers.c.orig:    f32 marioRelY = gMarioObject->oPosY - o->oPosY;
src/game/object_helpers.c.orig:    o->oPosX += o->oVelX;
src/game/object_helpers.c.orig:    o->oPosY += o->oVelY;
src/game/object_helpers.c.orig:    o->oPosZ += o->oVelZ;
src/game/object_helpers.c.orig:    if (o->oSmokeTimer == 10) {
src/game/object_helpers.c.orig:    o->oSmokeTimer++;
src/game/object_helpers.c.orig:    o->oToxBoxUnk1AC = a0;
src/game/object_helpers.c.orig:    o->oToxBoxUnk1B0 = 0;
src/game/object_helpers.c.orig:    return *(s8 *) o->oToxBoxUnk1AC;
src/game/object_helpers.c.orig:    s8 *sp8 = o->oToxBoxUnk1AC;
src/game/object_helpers.c.orig:    s32 sp4 = o->oToxBoxUnk1B0 + 1;
src/game/object_helpers.c.orig:        o->oToxBoxUnk1B0++;
src/game/object_helpers.c.orig:        o->oToxBoxUnk1B0 = 0;
src/game/object_helpers.c.orig:    f32 sp0 = (f32) o->oTimer / a1;
src/game/object_helpers.c.orig:        o->header.gfx.scale[0] = sp4 * sp0 + sp10;
src/game/object_helpers.c.orig:        o->header.gfx.scale[1] = sp4 * sp0 + sp10;
src/game/object_helpers.c.orig:        o->header.gfx.scale[2] = sp4 * sp0 + sp10;
src/game/object_helpers.c.orig:    o->oPosX = o->oHomeX + gDebugInfo[5][0];
src/game/object_helpers.c.orig:    o->oPosY = o->oHomeY + gDebugInfo[5][1];
src/game/object_helpers.c.orig:    o->oPosZ = o->oHomeZ + gDebugInfo[5][2];
src/game/object_helpers.c.orig:    if (o->oTimer % 2 != 0) {
src/game/object_helpers.c.orig:        o->oPosY -= amount;
src/game/object_helpers.c.orig:        o->oPosY += amount;
src/game/object_helpers.c.orig:    if (o->oTimer == cycles * 2) {
src/game/object_helpers.c.orig:    o->oPosY += D_8032F0A0[a0];
src/game/object_helpers.c.orig:    void (*actionFunction)(void) = actionFunctions[o->oAction];
src/game/object_helpers.c.orig:    sp1C->oBehParams = o->oBehParams;
src/game/object_helpers.c.orig:    f32 dx = o->oHomeX - gMarioObject->oPosX;
src/game/object_helpers.c.orig:    f32 dy = o->oHomeY - gMarioObject->oPosY;
src/game/object_helpers.c.orig:    f32 dz = o->oHomeZ - gMarioObject->oPosZ;
src/game/object_helpers.c.orig:    if (o->oDistanceToMario > 2000.0f && marioDistToHome > 2000.0f) {
src/game/object_helpers.c.orig:        floorHeight = find_floor(o->oPosX, o->oPosY, o->oPosZ, &floor);
src/game/object_helpers.c.orig:                o->oRoom = floor->room;
src/game/object_helpers.c.orig:                find_floor(o->oPosX, floorHeight - 100.0f, o->oPosZ, &floor);
src/game/object_helpers.c.orig:                    o->oRoom = floor->room;
src/game/object_helpers.c.orig:        o->oRoom = -1;
src/game/object_helpers.c.orig:    if (o->oRoom != -1 && gMarioCurrentRoom != 0) {
src/game/object_helpers.c.orig:        if (gMarioCurrentRoom == o->oRoom) {
src/game/object_helpers.c.orig:        } else if (gDoorAdjacentRooms[gMarioCurrentRoom][0] == o->oRoom) {
src/game/object_helpers.c.orig:        } else if (gDoorAdjacentRooms[gMarioCurrentRoom][1] == o->oRoom) {
src/game/object_helpers.c.orig:            o->activeFlags &= ~ACTIVE_FLAG_IN_DIFFERENT_ROOM;
src/game/object_helpers.c.orig:            o->activeFlags |= ACTIVE_FLAG_IN_DIFFERENT_ROOM;
src/game/object_helpers.c.orig:        o->oNumLootCoins = 0;
src/game/object_helpers.c.orig:    if (o->oInteractStatus & INT_STATUS_INTERACTED) {
src/game/object_helpers.c.orig:        if (o->oInteractStatus & INT_STATUS_WAS_ATTACKED) {
src/game/object_helpers.c.orig:            if (o->oHealth < 1) {
src/game/object_helpers.c.orig:                obj_spawn_loot_yellow_coins(o, o->oNumLootCoins, 20.0f);
src/game/object_helpers.c.orig:                o->oHealth--;
src/game/object_helpers.c.orig:    o->oInteractStatus = 0;
src/game/object_helpers.c.orig:        obj_spawn_loot_yellow_coins(o, o->oNumLootCoins, 20.0f);
src/game/object_helpers.c.orig:        obj_spawn_loot_blue_coins(o, o->oNumLootCoins, 20.0f, 150);
src/game/object_helpers.c.orig:    if (o->oMoveFlags & OBJ_MOVE_HIT_WALL) {
src/game/object_helpers.c.orig:        o->oMoveAngleYaw = o->oWallAngle;
src/game/object_helpers.c.orig:    if (absf(o->oPosY - gMarioObject->oPosY) < distY) {
src/game/object_helpers.c.orig:    if (o->oDistanceToMario < 1500.0f) {
src/game/object_helpers.c.orig:        if (latDistToMario < radius && o->oPosY < gMarioObject->oPosY + 160.0f
src/game/object_helpers.c.orig:            && gMarioObject->oPosY < o->oPosY + height && !(gMarioStates[0].action & ACT_FLAG_AIR)
src/game/object_helpers.c.orig:    o->oDialogResponse = dialogResult;
src/game/object_helpers.c.orig:    o->oDialogState++;
src/game/object_helpers.c.orig:    switch (o->oDialogState) {
src/game/object_helpers.c.orig:                o->activeFlags |= ACTIVE_FLAG_INITIATED_TIME_STOP;
src/game/object_helpers.c.orig:                o->oDialogState++;
src/game/object_helpers.c.orig:                o->activeFlags |= ACTIVE_FLAG_INITIATED_TIME_STOP;
src/game/object_helpers.c.orig:                o->oDialogState++;
src/game/object_helpers.c.orig:                o->oDialogState++;
src/game/object_helpers.c.orig:            o->oDialogState++;
src/game/object_helpers.c.orig:                o->activeFlags &= ~ACTIVE_FLAG_INITIATED_TIME_STOP;
src/game/object_helpers.c.orig:                dialogResponse = o->oDialogResponse;
src/game/object_helpers.c.orig:                o->oDialogState = DIALOG_UNK1_ENABLE_TIME_STOP;
src/game/object_helpers.c.orig:            o->oDialogState = DIALOG_UNK1_ENABLE_TIME_STOP;
src/game/object_helpers.c.orig:    switch (o->oDialogState) {
src/game/object_helpers.c.orig:                o->activeFlags |= ACTIVE_FLAG_INITIATED_TIME_STOP;
src/game/object_helpers.c.orig:                o->oDialogState++;
src/game/object_helpers.c.orig:                o->oDialogResponse = 0;
src/game/object_helpers.c.orig:                o->activeFlags |= ACTIVE_FLAG_INITIATED_TIME_STOP;
src/game/object_helpers.c.orig:                o->oDialogState++;
src/game/object_helpers.c.orig:                o->oDialogResponse = 0;
src/game/object_helpers.c.orig:                if (o->oDialogResponse >= 0x21) {
src/game/object_helpers.c.orig:                o->oDialogResponse = 0;
src/game/object_helpers.c.orig:                o->oDialogState++;
src/game/object_helpers.c.orig:                o->oDialogResponse++;
src/game/object_helpers.c.orig:                if ((o->oDialogResponse = cutscene_object_without_dialog(cutsceneTable, o)) != 0) {
src/game/object_helpers.c.orig:                    o->oDialogState++;
src/game/object_helpers.c.orig:                if ((o->oDialogResponse = cutscene_object_with_dialog(cutsceneTable, o, dialogID)) != 0) {
src/game/object_helpers.c.orig:                    o->oDialogState++;
src/game/object_helpers.c.orig:                dialogResponse = o->oDialogResponse;
src/game/object_helpers.c.orig:                o->oDialogState = DIALOG_UNK2_ENABLE_TIME_STOP;
src/game/object_helpers.c.orig:                o->activeFlags &= ~ACTIVE_FLAG_INITIATED_TIME_STOP;
src/game/object_helpers.c.orig:                dialogResponse = o->oDialogResponse;
src/game/object_helpers.c.orig:                o->oDialogState = DIALOG_UNK2_ENABLE_TIME_STOP;
src/game/object_helpers.c.orig:    if (o->header.gfx.sharedChild == gLoadedGraphNodes[modelID]) {
src/game/object_helpers.c.orig:    position[0] = o->oPosX;
src/game/object_helpers.c.orig:    position[1] = o->oPosY;
src/game/object_helpers.c.orig:    position[2] = o->oPosZ;
src/game/object_helpers.c.orig:        mtxf_align_terrain_normal(o->transform, floorNormal, position, o->oFaceAngleYaw);
src/game/object_helpers.c.orig:        o->header.gfx.throwMatrix = o->transform;
src/game/object_helpers.c.orig:    set_camera_shake_from_point(shake, o->oPosX, o->oPosY, o->oPosZ);
src/game/object_helpers.c.orig:    if ((o->oInteractStatus & INT_STATUS_INTERACTED)
src/game/object_helpers.c.orig:        && (o->oInteractStatus & INT_STATUS_WAS_ATTACKED)) {
src/game/object_helpers.c.orig:    o->oInteractStatus = 0;
src/game/object_helpers.c.orig:    o->header.gfx.unk38.animFrame = animFrame;
src/game/object_helpers.c.orig:    if (o->oInteractStatus & INT_STATUS_GRABBED_MARIO) {
src/game/object_helpers.c.orig:        o->oKingBobombUnk88 = 1;
src/game/object_helpers.c.orig:    o->activeFlags |= ACTIVE_FLAG_INITIATED_TIME_STOP;
src/game/object_helpers.c.orig:    o->activeFlags &= ~ACTIVE_FLAG_INITIATED_TIME_STOP;
src/game/object_helpers.c.orig:    if (o->oInteractStatus & INT_STATUS_INTERACTED) {
src/game/object_helpers.c.orig:        o->oInteractStatus = 0;
src/game/object_helpers.c.orig:    if (o->oNumLootCoins >= 5) {
src/game/object_helpers.c.orig:        o->oNumLootCoins -= 5;
src/game/object_helpers.c.orig:    f32 objectPosY = o->oPosY;
src/game/object_helpers.c.orig:    o->oPosY += offsetY + gDebugInfo[5][0];
src/game/object_helpers.c.orig:    o->oPosY = objectPosY;
src/game/object_helpers.c.rej:         o->oPosX += o->oVelX;
src/game/object_helpers.c.rej:         o->oPosZ += o->oVelZ;
src/game/object_helpers.c.rej:         o->oVelY += o->oGravity; //! No terminal velocity
src/game/object_helpers.c.rej:         o->oPosY += o->oVelY;
src/game/object_list_processor.c:        UNUSED s16 arg16 = (s16)(spawnInfo->behaviorArg & 0xFFFF);
src/game/object_list_processor.c:        script = segmented_to_virtual(spawnInfo->behaviorScript);
src/game/object_list_processor.c:        if ((spawnInfo->behaviorArg & (RESPAWN_INFO_DONT_RESPAWN << 8))
src/game/object_list_processor.c:            object->oBehParams = spawnInfo->behaviorArg;
src/game/object_list_processor.c:            object->oBehParams2ndByte = ((spawnInfo->behaviorArg) >> 16) & 0xFF;
src/game/object_list_processor.c:            object->respawnInfo = &spawnInfo->behaviorArg;
src/game/object_list_processor.c:            if (spawnInfo->behaviorArg & 0x01) {
src/game/object_list_processor.c:            object->oPosX = spawnInfo->startPos[0];
src/game/object_list_processor.c:            object->oPosY = spawnInfo->startPos[1];
src/game/object_list_processor.c:            object->oPosZ = spawnInfo->startPos[2];
src/game/object_list_processor.c:            object->oFaceAnglePitch = spawnInfo->startAngle[0];
src/game/object_list_processor.c:            object->oFaceAngleYaw = spawnInfo->startAngle[1];
src/game/object_list_processor.c:            object->oFaceAngleRoll = spawnInfo->startAngle[2];
src/game/object_list_processor.c:            object->oMoveAnglePitch = spawnInfo->startAngle[0];
src/game/object_list_processor.c:            object->oMoveAngleYaw = spawnInfo->startAngle[1];
src/game/object_list_processor.c:            object->oMoveAngleRoll = spawnInfo->startAngle[2];
src/game/object_list_processor.c:        spawnInfo = spawnInfo->next;
src/game/obj_behaviors.c:    hitbox.offsetY = o->hitboxHeight / 2;
src/game/obj_behaviors.c:    hitbox.radius = o->hitboxRadius;
src/game/obj_behaviors.c:        o->oPosX = hitbox.x;
src/game/obj_behaviors.c:        o->oPosY = hitbox.y;
src/game/obj_behaviors.c:        o->oPosZ = hitbox.z;
src/game/obj_behaviors.c:        o->oMoveAngleYaw = atan2s(objYawZ, objYawX);
src/game/obj_behaviors.c:        o->oMoveAngleYaw += 32767.999200000002; /* ¯\_(ツ)_/¯ */
src/game/obj_behaviors.c:    if (floor_nY < 0.5 && floorY > o->oPosY) {
src/game/obj_behaviors.c:        o->oMoveAngleYaw = atan2s(objYawZ, objYawX);
src/game/obj_behaviors.c:    if (floor_nY < 0.2 && o->oFriction < 0.9999) {
src/game/obj_behaviors.c:        *objFriction = o->oFriction;
src/game/obj_behaviors.c:    o->oVelY -= o->oGravity;
src/game/obj_behaviors.c:    if (o->oVelY > 75.0) {
src/game/obj_behaviors.c:        o->oVelY = 75.0;
src/game/obj_behaviors.c:    if (o->oVelY < -75.0) {
src/game/obj_behaviors.c:        o->oVelY = -75.0;
src/game/obj_behaviors.c:    o->oPosY += o->oVelY;
src/game/obj_behaviors.c:    if (o->oPosY < objFloorY) {
src/game/obj_behaviors.c:        o->oPosY = objFloorY;
src/game/obj_behaviors.c:        if (o->oVelY < -17.5) {
src/game/obj_behaviors.c:            o->oVelY = -(o->oVelY / 2);
src/game/obj_behaviors.c:            o->oVelY = 0;
src/game/obj_behaviors.c:    if ((s32) o->oPosY >= (s32) objFloorY && (s32) o->oPosY < (s32) objFloorY + 37) {
src/game/obj_behaviors.c:                   / (floor_nX * floor_nX + floor_nY * floor_nY + floor_nZ * floor_nZ) * o->oGravity
src/game/obj_behaviors.c:                   / (floor_nX * floor_nX + floor_nY * floor_nY + floor_nZ * floor_nZ) * o->oGravity
src/game/obj_behaviors.c:            o->oMoveAngleYaw = atan2s(objVelZ, objVelX);
src/game/obj_behaviors.c:        o->oForwardVel = sqrtf(objVelX * objVelX + objVelZ * objVelZ) * objFriction;
src/game/obj_behaviors.c:    f32 netYAccel = (1.0f - o->oBuoyancy) * (-1.0f * o->oGravity);
src/game/obj_behaviors.c:    o->oVelY -= netYAccel;
src/game/obj_behaviors.c:    if (o->oVelY > 75.0) {
src/game/obj_behaviors.c:        o->oVelY = 75.0;
src/game/obj_behaviors.c:    if (o->oVelY < -75.0) {
src/game/obj_behaviors.c:        o->oVelY = -75.0;
src/game/obj_behaviors.c:    o->oPosY += o->oVelY;
src/game/obj_behaviors.c:    if (o->oPosY < floorY) {
src/game/obj_behaviors.c:        o->oPosY = floorY;
src/game/obj_behaviors.c:        if (o->oVelY < -17.5) {
src/game/obj_behaviors.c:            o->oVelY = -(o->oVelY / 2);
src/game/obj_behaviors.c:            o->oVelY = 0;
src/game/obj_behaviors.c:    if (o->oForwardVel > 12.5 && (waterY + 30.0f) > o->oPosY && (waterY - 30.0f) < o->oPosY) {
src/game/obj_behaviors.c:        o->oVelY = -o->oVelY;
src/game/obj_behaviors.c:    if ((s32) o->oPosY >= (s32) floorY && (s32) o->oPosY < (s32) floorY + 37) {
src/game/obj_behaviors.c:    if (o->oVelY < 0.000001 && o->oVelY > -0.000001) {
src/game/obj_behaviors.c:        o->oVelY = 0;
src/game/obj_behaviors.c:        o->oMoveAngleYaw = atan2s(objVelZ, objVelX);
src/game/obj_behaviors.c:    o->oForwardVel = sqrtf(objVelX * objVelX + objVelZ * objVelZ) * 0.8;
src/game/obj_behaviors.c:    o->oVelY *= 0.8;
src/game/obj_behaviors.c:    f32 xVel = o->oForwardVel * sins(o->oMoveAngleYaw);
src/game/obj_behaviors.c:    f32 zVel = o->oForwardVel * coss(o->oMoveAngleYaw);
src/game/obj_behaviors.c:    o->oPosX += xVel;
src/game/obj_behaviors.c:    o->oPosZ += zVel;
src/game/obj_behaviors.c:    if ((f32)(waterY + 30) > o->oPosY && o->oPosY > (f32)(waterY - 30)) {
src/game/obj_behaviors.c:        if (o->oVelY < -20.0f) {
src/game/obj_behaviors.c:    f32 objX = o->oPosX;
src/game/obj_behaviors.c:    f32 objY = o->oPosY;
src/game/obj_behaviors.c:    f32 objZ = o->oPosZ;
src/game/obj_behaviors.c:    f32 objVelX = o->oForwardVel * sins(o->oMoveAngleYaw);
src/game/obj_behaviors.c:    f32 objVelZ = o->oForwardVel * coss(o->oMoveAngleYaw);
src/game/obj_behaviors.c:    if ((s32) o->oPosY == (s32) floorY) {
src/game/obj_behaviors.c:    if ((s32) o->oVelY == 0) {
src/game/obj_behaviors.c:    obj_splash((s32) waterY, (s32) o->oPosY);
src/game/obj_behaviors.c:    o->oVelX = obj->oForwardVel * sins(obj->oMoveAngleYaw);
src/game/obj_behaviors.c:    o->oVelZ = obj->oForwardVel * coss(obj->oMoveAngleYaw);
src/game/obj_behaviors.c:    obj->oPosX += o->oVelX;
src/game/obj_behaviors.c:    obj->oPosZ += o->oVelZ;
src/game/obj_behaviors.c:    if ((is_point_within_radius_of_mario(o->oPosX, o->oPosY, o->oPosZ, (s32) dist) == 1
src/game/obj_behaviors.c:         && obj_check_if_facing_toward_angle(o->oFaceAngleYaw, gMarioObject->header.gfx.angle[1] + 0x8000, 0x1000) == 1
src/game/obj_behaviors.c:         && obj_check_if_facing_toward_angle(o->oMoveAngleYaw, o->oAngleToMario, 0x1000) == 1)
src/game/obj_behaviors.c:                o->oAction = OBJ_ACT_LAVA_DEATH;
src/game/obj_behaviors.c:                o->oAction = OBJ_ACT_DEATH_PLANE_DEATH;
src/game/obj_behaviors.c:    if (o->oTimer >= 31) {
src/game/obj_behaviors.c:        o->activeFlags = ACTIVE_FLAG_DEACTIVATED;
src/game/obj_behaviors.c:        o->oPosY -= 10.0f;
src/game/obj_behaviors.c:    if ((o->oTimer % 8) == 0) {
src/game/obj_behaviors.c.orig:    hitbox.offsetY = o->hitboxHeight / 2;
src/game/obj_behaviors.c.orig:    hitbox.radius = o->hitboxRadius;
src/game/obj_behaviors.c.orig:        o->oPosX = hitbox.x;
src/game/obj_behaviors.c.orig:        o->oPosY = hitbox.y;
src/game/obj_behaviors.c.orig:        o->oPosZ = hitbox.z;
src/game/obj_behaviors.c.orig:        o->oMoveAngleYaw = atan2s(objYawZ, objYawX);
src/game/obj_behaviors.c.orig:        o->oMoveAngleYaw += 32767.999200000002; /* ¯\_(ツ)_/¯ */
src/game/obj_behaviors.c.orig:    if (floor_nY < 0.5 && floorY > o->oPosY) {
src/game/obj_behaviors.c.orig:        o->oMoveAngleYaw = atan2s(objYawZ, objYawX);
src/game/obj_behaviors.c.orig:    if (floor_nY < 0.2 && o->oFriction < 0.9999) {
src/game/obj_behaviors.c.orig:        *objFriction = o->oFriction;
src/game/obj_behaviors.c.orig:    o->oVelY -= o->oGravity;
src/game/obj_behaviors.c.orig:    if (o->oVelY > 75.0) {
src/game/obj_behaviors.c.orig:        o->oVelY = 75.0;
src/game/obj_behaviors.c.orig:    if (o->oVelY < -75.0) {
src/game/obj_behaviors.c.orig:        o->oVelY = -75.0;
src/game/obj_behaviors.c.orig:    o->oPosY += o->oVelY;
src/game/obj_behaviors.c.orig:    if (o->oPosY < objFloorY) {
src/game/obj_behaviors.c.orig:        o->oPosY = objFloorY;
src/game/obj_behaviors.c.orig:        if (o->oVelY < -17.5) {
src/game/obj_behaviors.c.orig:            o->oVelY = -(o->oVelY / 2);
src/game/obj_behaviors.c.orig:            o->oVelY = 0;
src/game/obj_behaviors.c.orig:    if ((s32) o->oPosY >= (s32) objFloorY && (s32) o->oPosY < (s32) objFloorY + 37) {
src/game/obj_behaviors.c.orig:                   / (floor_nX * floor_nX + floor_nY * floor_nY + floor_nZ * floor_nZ) * o->oGravity
src/game/obj_behaviors.c.orig:                   / (floor_nX * floor_nX + floor_nY * floor_nY + floor_nZ * floor_nZ) * o->oGravity
src/game/obj_behaviors.c.orig:            o->oMoveAngleYaw = atan2s(objVelZ, objVelX);
src/game/obj_behaviors.c.orig:        o->oForwardVel = sqrtf(objVelX * objVelX + objVelZ * objVelZ) * objFriction;
src/game/obj_behaviors.c.orig:    f32 netYAccel = (1.0f - o->oBuoyancy) * (-1.0f * o->oGravity);
src/game/obj_behaviors.c.orig:    o->oVelY -= netYAccel;
src/game/obj_behaviors.c.orig:    if (o->oVelY > 75.0) {
src/game/obj_behaviors.c.orig:        o->oVelY = 75.0;
src/game/obj_behaviors.c.orig:    if (o->oVelY < -75.0) {
src/game/obj_behaviors.c.orig:        o->oVelY = -75.0;
src/game/obj_behaviors.c.orig:    o->oPosY += o->oVelY;
src/game/obj_behaviors.c.orig:    if (o->oPosY < floorY) {
src/game/obj_behaviors.c.orig:        o->oPosY = floorY;
src/game/obj_behaviors.c.orig:        if (o->oVelY < -17.5) {
src/game/obj_behaviors.c.orig:            o->oVelY = -(o->oVelY / 2);
src/game/obj_behaviors.c.orig:            o->oVelY = 0;
src/game/obj_behaviors.c.orig:    if (o->oForwardVel > 12.5 && (waterY + 30.0f) > o->oPosY && (waterY - 30.0f) < o->oPosY) {
src/game/obj_behaviors.c.orig:        o->oVelY = -o->oVelY;
src/game/obj_behaviors.c.orig:    if ((s32) o->oPosY >= (s32) floorY && (s32) o->oPosY < (s32) floorY + 37) {
src/game/obj_behaviors.c.orig:    if (o->oVelY < 0.000001 && o->oVelY > -0.000001) {
src/game/obj_behaviors.c.orig:        o->oVelY = 0;
src/game/obj_behaviors.c.orig:        o->oMoveAngleYaw = atan2s(objVelZ, objVelX);
src/game/obj_behaviors.c.orig:    o->oForwardVel = sqrtf(objVelX * objVelX + objVelZ * objVelZ) * 0.8;
src/game/obj_behaviors.c.orig:    o->oVelY *= 0.8;
src/game/obj_behaviors.c.orig:    f32 xVel = o->oForwardVel * sins(o->oMoveAngleYaw);
src/game/obj_behaviors.c.orig:    f32 zVel = o->oForwardVel * coss(o->oMoveAngleYaw);
src/game/obj_behaviors.c.orig:    o->oPosX += xVel;
src/game/obj_behaviors.c.orig:    o->oPosZ += zVel;
src/game/obj_behaviors.c.orig:    if ((f32)(waterY + 30) > o->oPosY && o->oPosY > (f32)(waterY - 30)) {
src/game/obj_behaviors.c.orig:        if (o->oVelY < -20.0f) {
src/game/obj_behaviors.c.orig:    f32 objX = o->oPosX;
src/game/obj_behaviors.c.orig:    f32 objY = o->oPosY;
src/game/obj_behaviors.c.orig:    f32 objZ = o->oPosZ;
src/game/obj_behaviors.c.orig:    f32 objVelX = o->oForwardVel * sins(o->oMoveAngleYaw);
src/game/obj_behaviors.c.orig:    f32 objVelZ = o->oForwardVel * coss(o->oMoveAngleYaw);
src/game/obj_behaviors.c.orig:    if ((s32) o->oPosY == (s32) floorY) {
src/game/obj_behaviors.c.orig:    if ((s32) o->oVelY == 0) {
src/game/obj_behaviors.c.orig:    obj_splash((s32) waterY, (s32) o->oPosY);
src/game/obj_behaviors.c.orig:    o->oVelX = obj->oForwardVel * sins(obj->oMoveAngleYaw);
src/game/obj_behaviors.c.orig:    o->oVelZ = obj->oForwardVel * coss(obj->oMoveAngleYaw);
src/game/obj_behaviors.c.orig:    obj->oPosX += o->oVelX;
src/game/obj_behaviors.c.orig:    obj->oPosZ += o->oVelZ;
src/game/obj_behaviors.c.orig:    if ((is_point_within_radius_of_mario(o->oPosX, o->oPosY, o->oPosZ, (s32) dist) == 1
src/game/obj_behaviors.c.orig:         && obj_check_if_facing_toward_angle(o->oFaceAngleYaw, gMarioObject->header.gfx.angle[1] + 0x8000, 0x1000) == 1
src/game/obj_behaviors.c.orig:         && obj_check_if_facing_toward_angle(o->oMoveAngleYaw, o->oAngleToMario, 0x1000) == 1)
src/game/obj_behaviors.c.orig:                o->oAction = OBJ_ACT_LAVA_DEATH;
src/game/obj_behaviors.c.orig:                o->oAction = OBJ_ACT_DEATH_PLANE_DEATH;
src/game/obj_behaviors.c.orig:    if (o->oTimer >= 31) {
src/game/obj_behaviors.c.orig:        o->activeFlags = ACTIVE_FLAG_DEACTIVATED;
src/game/obj_behaviors.c.orig:        o->oPosY -= 10.0f;
src/game/obj_behaviors.c.orig:    if ((o->oTimer % 8) == 0) {
src/game/obj_behaviors_2.c:    if (o->header.gfx.node.flags & GRAPH_RENDER_ACTIVE) {
src/game/obj_behaviors_2.c:    return -atan2s(o->oForwardVel, o->oVelY);
src/game/obj_behaviors_2.c:    o->oPosX = o->oHomeX + distFromHome * coss(o->oMoveAngleYaw);
src/game/obj_behaviors_2.c:    o->oPosZ = o->oHomeZ + distFromHome * sins(o->oMoveAngleYaw);
src/game/obj_behaviors_2.c:    if (o->oDistanceToMario < maxDist
src/game/obj_behaviors_2.c:        && abs_angle_diff(o->oMoveAngleYaw, o->oAngleToMario) < maxAngleDiff) {
src/game/obj_behaviors_2.c:            sObjSavedPosX = o->oPosX;
src/game/obj_behaviors_2.c:            sObjSavedPosY = o->oPosY;
src/game/obj_behaviors_2.c:            sObjSavedPosZ = o->oPosZ;
src/game/obj_behaviors_2.c:            o->oVelX = o->oPosX - sObjSavedPosX;
src/game/obj_behaviors_2.c:            o->oVelY = o->oPosY - sObjSavedPosY;
src/game/obj_behaviors_2.c:            o->oVelZ = o->oPosZ - sObjSavedPosZ;
src/game/obj_behaviors_2.c:            o->oPosX = sObjSavedPosX;
src/game/obj_behaviors_2.c:            o->oPosY = sObjSavedPosY;
src/game/obj_behaviors_2.c:            o->oPosZ = sObjSavedPosZ;
src/game/obj_behaviors_2.c:    if (ballIndex == 0 || ((u16)(o->oBehParams >> 16) & 0x0080)) {
src/game/obj_behaviors_2.c:        initialPrevWaypoint = o->oPlatformOnTrackPrevWaypoint;
src/game/obj_behaviors_2.c:            o->oPlatformOnTrackPrevWaypointFlags = 0;
src/game/obj_behaviors_2.c:            amountToMove = o->oForwardVel;
src/game/obj_behaviors_2.c:                    o->oPlatformOnTrackPrevWaypointFlags = WAYPOINT_FLAGS_END;
src/game/obj_behaviors_2.c:                if (((u16)(o->oBehParams >> 16) & PLATFORM_ON_TRACK_BP_RETURN_TO_START)) {
src/game/obj_behaviors_2.c:                    nextWaypoint = o->oPlatformOnTrackStartWaypoint;
src/game/obj_behaviors_2.c:            trackBall = spawn_object_relative(o->oPlatformOnTrackBaseBallIndex + ballIndex, 0, 0, 0, o,
src/game/obj_behaviors_2.c:                if (o->oPlatformOnTrackPrevWaypointFlags == 0) {
src/game/obj_behaviors_2.c:                    o->oPlatformOnTrackPrevWaypointFlags = initialPrevWaypoint->flags;
src/game/obj_behaviors_2.c:                o->oPlatformOnTrackPrevWaypoint = prevWaypoint;
src/game/obj_behaviors_2.c:            o->oPosX = x;
src/game/obj_behaviors_2.c:            o->oPosY = y;
src/game/obj_behaviors_2.c:            o->oPosZ = z;
src/game/obj_behaviors_2.c:            o->oPlatformOnTrackPitch =
src/game/obj_behaviors_2.c:                atan2s(sqrtf(o->oVelX * o->oVelX + o->oVelZ * o->oVelZ), -o->oVelY);
src/game/obj_behaviors_2.c:            o->oPlatformOnTrackYaw = atan2s(o->oVelZ, o->oVelX);
src/game/obj_behaviors_2.c:    if (o->oForwardVel == 0.0f) {
src/game/obj_behaviors_2.c:        if (o->oMoveFlags & OBJ_MOVE_IN_AIR) {
src/game/obj_behaviors_2.c:            if (o->oFaceAnglePitch < 0) {
src/game/obj_behaviors_2.c:            } else if (o->oFaceAnglePitch > 0) {
src/game/obj_behaviors_2.c:            if (o->oFaceAngleRoll < 0) {
src/game/obj_behaviors_2.c:            } else if (o->oFaceAngleRoll > 0) {
src/game/obj_behaviors_2.c:        c = coss(o->oFaceAnglePitch);
src/game/obj_behaviors_2.c:        s = sins(o->oFaceAnglePitch);
src/game/obj_behaviors_2.c:        c = coss(o->oFaceAngleRoll);
src/game/obj_behaviors_2.c:        s = sins(o->oFaceAngleRoll);
src/game/obj_behaviors_2.c:        c = coss(o->oFaceAngleYaw);
src/game/obj_behaviors_2.c:        s = sins(o->oFaceAngleYaw);
src/game/obj_behaviors_2.c:        o->oPosX = o->oHomeX - val04 + val10;
src/game/obj_behaviors_2.c:        o->oGraphYOffset = val20 - val0C;
src/game/obj_behaviors_2.c:        o->oPosZ = o->oHomeZ + val00 - val08;
src/game/obj_behaviors_2.c:    if (o->oMoveFlags & OBJ_MOVE_HIT_WALL) {
src/game/obj_behaviors_2.c:    return atan2s(latDistToHome, o->oPosY - o->oHomeY);
src/game/obj_behaviors_2.c:    o->oForwardVel = speed * coss(o->oMoveAnglePitch);
src/game/obj_behaviors_2.c:    o->oVelY = speed * -sins(o->oMoveAnglePitch);
src/game/obj_behaviors_2.c:    if ((val04 = o->header.gfx.unk38.animAccel / 0x10000) <= 0) {
src/game/obj_behaviors_2.c:    o->oPosY -= targetOffsetY;
src/game/obj_behaviors_2.c:    o->oPosY += targetOffsetY;
src/game/obj_behaviors_2.c:    return approach_f32_ptr(&o->oForwardVel, target, delta);
src/game/obj_behaviors_2.c:    return approach_f32_ptr(&o->oVelY, target, delta);
src/game/obj_behaviors_2.c:    o->oMoveAnglePitch = approach_s16_symmetric(o->oMoveAnglePitch, target, delta);
src/game/obj_behaviors_2.c:    if ((s16) o->oMoveAnglePitch == target) {
src/game/obj_behaviors_2.c:    o->oFaceAnglePitch = approach_s16_symmetric(o->oFaceAnglePitch, targetPitch, deltaPitch);
src/game/obj_behaviors_2.c:    if ((s16) o->oFaceAnglePitch == targetPitch) {
src/game/obj_behaviors_2.c:    o->oFaceAngleYaw = approach_s16_symmetric(o->oFaceAngleYaw, targetYaw, deltaYaw);
src/game/obj_behaviors_2.c:    if ((s16) o->oFaceAngleYaw == targetYaw) {
src/game/obj_behaviors_2.c:    o->oFaceAngleRoll = approach_s16_symmetric(o->oFaceAngleRoll, targetRoll, deltaRoll);
src/game/obj_behaviors_2.c:    if ((s16) o->oFaceAngleRoll == targetRoll) {
src/game/obj_behaviors_2.c:    s16 targetRoll = o->oMoveAngleYaw - targetYaw;
src/game/obj_behaviors_2.c:    return o->oMoveAngleYaw + (s16) random_sign() * delta;
src/game/obj_behaviors_2.c:    if (o->oTimer < 2) {
src/game/obj_behaviors_2.c:        o->header.gfx.scale[0] += *scaleVel;
src/game/obj_behaviors_2.c:            o->oTimer = 0;
src/game/obj_behaviors_2.c:    } else if (o->oTimer > 10) {
src/game/obj_behaviors_2.c:        if (approach_f32_ptr(&o->header.gfx.scale[0], endScale, 0.05f)) {
src/game/obj_behaviors_2.c:        } else if (*scaleVel != 0.0f && o->header.gfx.scale[0] < shootFireScale) {
src/game/obj_behaviors_2.c:        o->oAnimState = 0;
src/game/obj_behaviors_2.c:        o->oAnimState = 1;
src/game/obj_behaviors_2.c:    if (o->numCollidedObjs != 0) {
src/game/obj_behaviors_2.c:        otherObject = o->collidedObjs[0];
src/game/obj_behaviors_2.c:            dx = otherObject->oPosX - o->oPosX;
src/game/obj_behaviors_2.c:            dz = otherObject->oPosZ - o->oPosZ;
src/game/obj_behaviors_2.c:            radius = o->hitboxRadius;
src/game/obj_behaviors_2.c:            newCenterX = o->oPosX + dx * relativeRadius;
src/game/obj_behaviors_2.c:            newCenterZ = o->oPosZ + dz * relativeRadius;
src/game/obj_behaviors_2.c:            o->oPosX = newCenterX - radius * coss(angle);
src/game/obj_behaviors_2.c:            o->oPosZ = newCenterZ - radius * sins(angle);
src/game/obj_behaviors_2.c:            if (targetYaw != NULL && abs_angle_diff(o->oMoveAngleYaw, angle) < 0x4000) {
src/game/obj_behaviors_2.c:                *targetYaw = (s16)(angle - o->oMoveAngleYaw + angle + 0x8000);
src/game/obj_behaviors_2.c:    if (o->oMoveFlags & OBJ_MOVE_HIT_WALL) {
src/game/obj_behaviors_2.c:    } else if (o->oMoveFlags & OBJ_MOVE_HIT_EDGE) {
src/game/obj_behaviors_2.c:        *targetYaw = (s16)(o->oMoveAngleYaw + 0x8000);
src/game/obj_behaviors_2.c:    if (o->oHealth <= 0) {
src/game/obj_behaviors_2.c:        if (o->oDeathSound == 0) {
src/game/obj_behaviors_2.c:        } else if (o->oDeathSound > 0) {
src/game/obj_behaviors_2.c:            spawn_mist_particles_with_sound(o->oDeathSound);
src/game/obj_behaviors_2.c:        if ((s32)o->oNumLootCoins < 0) {
src/game/obj_behaviors_2.c:            obj_spawn_loot_yellow_coins(o, o->oNumLootCoins, 20.0f);
src/game/obj_behaviors_2.c:        obj_spawn_loot_yellow_coins(o, o->oNumLootCoins, 20.0f);
src/game/obj_behaviors_2.c:        if (o->oHealth < 0) {
src/game/obj_behaviors_2.c:            if ( o->oDamageOrCoinValue == 2 ) {
src/game/obj_behaviors_2.c:    o->oAction = 0;
src/game/obj_behaviors_2.c:    o->oInteractStatus &= ~INT_STATUS_INTERACTED;
src/game/obj_behaviors_2.c:        o->oHealth--;
src/game/obj_behaviors_2.c:        o->oHealth--;
src/game/obj_behaviors_2.c:    o->oHealth = 0;
src/game/obj_behaviors_2.c:            o->oAction = OBJ_ACT_VERTICAL_KNOCKBACK;
src/game/obj_behaviors_2.c:            o->oForwardVel = 20.0f;
src/game/obj_behaviors_2.c:            o->oVelY = 50.0f;
src/game/obj_behaviors_2.c:            o->oAction = OBJ_ACT_HORIZONTAL_KNOCKBACK;
src/game/obj_behaviors_2.c:            o->oForwardVel = 50.0f;
src/game/obj_behaviors_2.c:            o->oVelY = 30.0f;
src/game/obj_behaviors_2.c:    //o->oFlags &= ~OBJ_FLAG_SET_FACE_YAW_TO_MOVE_YAW;
src/game/obj_behaviors_2.c:    o->oMoveAngleYaw = obj_angle_to_object(gMarioObject, o);
src/game/obj_behaviors_2.c:    o->oAction = OBJ_ACT_SQUISHED;
src/game/obj_behaviors_2.c:    if (o->oMoveFlags & OBJ_MOVE_UNDERWATER_ON_GROUND) {
src/game/obj_behaviors_2.c:        if (o->oGravity + o->oBuoyancy > 0.0f
src/game/obj_behaviors_2.c:            || find_water_level(o->oPosX, o->oPosZ) - o->oPosY < 150.0f) {
src/game/obj_behaviors_2.c:    } else if (!((o->oMoveFlags & OBJ_MOVE_ABOVE_LAVA)&&(o->oMoveFlags & OBJ_MOVE_ON_GROUND)) ) {
src/game/obj_behaviors_2.c:        if (o->oMoveFlags & OBJ_MOVE_ENTERED_WATER) {
src/game/obj_behaviors_2.c:            if (o->oWallHitboxRadius < 200.0f) {
src/game/obj_behaviors_2.c:    } else if (o->oInteractStatus & INT_STATUS_INTERACTED) {
src/game/obj_behaviors_2.c:        if (o->oInteractStatus & INT_STATUS_ATTACKED_MARIO) {
src/game/obj_behaviors_2.c:            if (o->oAction != attackedMarioAction) {
src/game/obj_behaviors_2.c:                o->oAction = attackedMarioAction;
src/game/obj_behaviors_2.c:                o->oTimer = 0;
src/game/obj_behaviors_2.c:            attackType = o->oInteractStatus & INT_STATUS_ATTACK_MASK;
src/game/obj_behaviors_2.c:                    o->oNumLootCoins = -1;
src/game/obj_behaviors_2.c:            o->oInteractStatus = 0;
src/game/obj_behaviors_2.c:    o->oInteractStatus = 0;
src/game/obj_behaviors_2.c:    if (o->header.gfx.unk38.curAnim != NULL) {
src/game/obj_behaviors_2.c:    if ((o->oMoveFlags
src/game/obj_behaviors_2.c:        || (o->oAction == OBJ_ACT_VERTICAL_KNOCKBACK && o->oTimer >= 9)) {
src/game/obj_behaviors_2.c:    if (o->oHealth == 1) {
src/game/obj_behaviors_2.c:    if (o->header.gfx.unk38.curAnim != NULL) {
src/game/obj_behaviors_2.c:    if (approach_f32_ptr(&o->header.gfx.scale[1], targetScaleY, baseScale * 0.14f)) {
src/game/obj_behaviors_2.c:        o->header.gfx.scale[0] = o->header.gfx.scale[2] = baseScale * 2.0f - o->header.gfx.scale[1];
src/game/obj_behaviors_2.c:        if (o->oTimer >= 16) {
src/game/obj_behaviors_2.c:    o->oForwardVel = 0.0f;
src/game/obj_behaviors_2.c:    if (o->oAction < 100) {
src/game/obj_behaviors_2.c:        switch (o->oAction) {
src/game/obj_behaviors_2.c:    } else if (o->oInteractStatus & INT_STATUS_INTERACTED) {
src/game/obj_behaviors_2.c:        if (o->oInteractStatus & INT_STATUS_ATTACKED_MARIO) {
src/game/obj_behaviors_2.c:            if (o->oAction != attackedMarioAction) {
src/game/obj_behaviors_2.c:                o->oAction = attackedMarioAction;
src/game/obj_behaviors_2.c:                o->oTimer = 0;
src/game/obj_behaviors_2.c:            attackType = o->oInteractStatus & INT_STATUS_ATTACK_MASK;
src/game/obj_behaviors_2.c:            o->oInteractStatus = 0;
src/game/obj_behaviors_2.c:    o->oInteractStatus = 0;
src/game/obj_behaviors_2.c:    if (o->oTimer > 30) {
src/game/obj_behaviors_2.c:        o->oAction = endAction;
src/game/obj_behaviors_2.c:    f32 dx = o->oHomeX - o->oPosX;
src/game/obj_behaviors_2.c:    f32 dy = o->oHomeY - o->oPosY;
src/game/obj_behaviors_2.c:    f32 dz = o->oHomeZ - o->oPosZ;
src/game/obj_behaviors_2.c:        o->oAngleToMario = atan2s(dz, dx);
src/game/obj_behaviors_2.c:        o->oDistanceToMario = 25000.0f;
src/game/obj_behaviors_2.c:        dx = o->oHomeX - gMarioObject->oPosX;
src/game/obj_behaviors_2.c:        dy = o->oHomeY - gMarioObject->oPosY;
src/game/obj_behaviors_2.c:        dz = o->oHomeZ - gMarioObject->oPosZ;
src/game/obj_behaviors_2.c:            o->oDistanceToMario = 20000.0f;
src/game/paintings.c: * Clear Mario-related state and clear gRipplingPainting.
src/game/platform_displacement.c:	s16 yawDifference = *yaw - displaceInfo->prevYaw;
src/game/platform_displacement.c:	vec3f_sub(posDifference, displaceInfo->prevPos);
src/game/platform_displacement.c:	if ((platform == displaceInfo->prevPlatform) && (gGlobalTimer == displaceInfo->prevTimer + 1)) {
src/game/platform_displacement.c:		scale_vec3f(scaledPos, displaceInfo->prevTransformedPos, platform->header.gfx.scale, FALSE);
src/game/platform_displacement.c:		linear_mtxf_mul_vec3f(*platform->header.gfx.throwMatrix, yawVec, displaceInfo->prevTransformedYawVec);
src/game/platform_displacement.c:	scale_vec3f(displaceInfo->prevTransformedPos, scaledPos, platform->header.gfx.scale, TRUE);
src/game/platform_displacement.c:		vec3f_sub(sMarioAmountDisplaced, displaceInfo->prevPos);
src/game/platform_displacement.c:		if ((platform != displaceInfo->prevPlatform) || (gGlobalTimer != displaceInfo->prevTimer + 1)) {
src/game/platform_displacement.c:	vec3f_copy(displaceInfo->prevPos, pos);
src/game/platform_displacement.c:	linear_mtxf_transpose_mul_vec3f(*platform->header.gfx.throwMatrix, displaceInfo->prevTransformedYawVec, yawVec);
src/game/platform_displacement.c:	displaceInfo->prevYaw = *yaw;
src/game/platform_displacement.c:	displaceInfo->prevPlatform = platform;
src/game/platform_displacement.c:	displaceInfo->prevTimer = gGlobalTimer;
src/game/print.c: * Additionally, this determines if a number should be zero-padded,
src/game/rendering_graph_node.c:                if (geo != NULL && geo->type == GRAPH_NODE_TYPE_SCALE) {
src/game/rendering_graph_node.c:    if (geo != NULL && geo->type == GRAPH_NODE_TYPE_CULLING_RADIUS) {
src/game/rendering_graph_node.c.orig:                if (geo != NULL && geo->type == GRAPH_NODE_TYPE_SCALE) {
src/game/rendering_graph_node.c.orig:    if (geo != NULL && geo->type == GRAPH_NODE_TYPE_CULLING_RADIUS) {
src/game/sound_init.c:    // Zero-out unused vector
src/goddard/dynlist_proc.c:    d_attach_to(0xD, sParentNetInfo->obj);
src/goddard/dynlist_proc.c:    net = make_netfromshape((struct ObjShape *) dyninfo->obj);
src/goddard/dynlist_proc.c:                         sDynListCurInfo->name, sDynListCurObj->type);
src/goddard/dynlist_proc.c:                         sDynListCurInfo->name, sDynListCurObj->type);
src/goddard/dynlist_proc.c:                         sDynListCurInfo->name, sDynListCurObj->type);
src/goddard/dynlist_proc.c:    d_attach_to(flag, info->obj);
src/goddard/dynlist_proc.c:            ((struct ObjNet *) sDynListCurObj)->unk1C8 = (struct ObjGroup *) info->obj;
src/goddard/dynlist_proc.c:            ((struct ObjNet *) sDynListCurObj)->unk1D0 = (struct ObjGroup *) info->obj;
src/goddard/dynlist_proc.c:            ((struct ObjShape *) sDynListCurObj)->vtxGroup = (struct ObjGroup *) info->obj;
src/goddard/dynlist_proc.c:            ((struct ObjGadget *) sDynListCurObj)->unk54 = (struct ObjGroup *) info->obj;
src/goddard/dynlist_proc.c:            ((struct ObjAnimator *) sDynListCurObj)->animdata = (struct ObjGroup *) info->obj;
src/goddard/dynlist_proc.c:                         sDynListCurInfo->name, sDynListCurObj->type);
src/goddard/dynlist_proc.c:            ((struct ObjShape *) sDynListCurObj)->mtlGroup = (struct ObjGroup *) info->obj;
src/goddard/dynlist_proc.c:                         sDynListCurInfo->name, sDynListCurObj->type);
src/goddard/dynlist_proc.c:                         sDynListCurInfo->name, sDynListCurObj->type);
src/goddard/dynlist_proc.c:                         sDynListCurInfo->name, sDynListCurObj->type);
src/goddard/dynlist_proc.c:            ((struct ObjNet *) sDynListCurObj)->skinGrp = ((struct ObjShape *) info->obj)->vtxGroup;
src/goddard/dynlist_proc.c:                         sDynListCurInfo->name, sDynListCurObj->type);
src/goddard/dynlist_proc.c:    map_face_materials((struct ObjGroup *) sDynListCurObj, (struct ObjGroup *) info->obj);
src/goddard/dynlist_proc.c:    map_vertices((struct ObjGroup *) sDynListCurObj, (struct ObjGroup *) info->obj);
src/goddard/dynlist_proc.c:            ((struct ObjNet *) sDynListCurObj)->unk1CC = (struct ObjGroup *) info->obj;
src/goddard/dynlist_proc.c:            ((struct ObjShape *) sDynListCurObj)->faceGroup = (struct ObjGroup *) info->obj;
src/goddard/dynlist_proc.c:                         sDynListCurInfo->name, sDynListCurObj->type);
src/goddard/dynlist_proc.c:                         sDynListCurInfo->name, sDynListCurObj->type);
src/goddard/dynlist_proc.c:            ((struct ObjJoint *) sDynListCurObj)->unk20 = (struct ObjShape *) info->obj;
src/goddard/dynlist_proc.c:            ((struct ObjNet *) sDynListCurObj)->unk1A8 = (struct ObjShape *) info->obj;
src/goddard/dynlist_proc.c:            ((struct ObjBone *) sDynListCurObj)->unkF0 = (struct ObjShape *) info->obj;
src/goddard/dynlist_proc.c:            ((struct ObjGadget *) sDynListCurObj)->unk50 = (struct ObjShape *) info->obj;
src/goddard/dynlist_proc.c:            ((struct ObjParticle *) sDynListCurObj)->unk1C = (struct ObjShape *) info->obj;
src/goddard/dynlist_proc.c:                         sDynListCurInfo->name, sDynListCurObj->type);
src/goddard/dynlist_proc.c:    sDynListCurObj = info->obj;
src/goddard/dynlist_proc.c:    return info->obj;
src/goddard/dynlist_proc.c:    dynGrp = (struct ObjGroup *) info->obj;
src/goddard/dynlist_proc.c:    for (i = info->num + 1; i < sLoadedDynObjs; i++) {
src/goddard/dynlist_proc.c:    targetGrp = (struct ObjGroup *) info->obj;
src/goddard/dynlist_proc.c:                         sDynListCurInfo->name, sDynListCurObj->type);
src/goddard/dynlist_proc.c:                         sDynListCurInfo->name, sDynListCurObj->type);
src/goddard/dynlist_proc.c:                         sDynListCurInfo->name, sDynListCurObj->type);
src/goddard/dynlist_proc.c:                         sDynListCurInfo->name, sDynListCurObj->type);
src/goddard/dynlist_proc.c:                         sDynListCurInfo->name, sDynListCurObj->type);
src/goddard/dynlist_proc.c:                         sDynListCurInfo->name, sDynListCurObj->type);
src/goddard/dynlist_proc.c:                         sDynListCurInfo->name, sDynListCurObj->type);
src/goddard/dynlist_proc.c:                         sDynListCurInfo->name, sDynListCurObj->type);
src/goddard/dynlist_proc.c:                         sDynListCurInfo->name, sDynListCurObj->type);
src/goddard/dynlist_proc.c:                         sDynListCurInfo->name, sDynListCurObj->type);
src/goddard/dynlist_proc.c:                         sDynListCurInfo->name, sDynListCurObj->type);
src/goddard/dynlist_proc.c:                         sDynListCurInfo->name, sDynListCurObj->type);
src/goddard/dynlist_proc.c:                         sDynListCurInfo->name, sDynListCurObj->type);
src/goddard/dynlist_proc.c:                     sStashedDynObjInfo->name);
src/goddard/dynlist_proc.c:                         sDynListCurInfo->name, sDynListCurObj->type);
src/goddard/dynlist_proc.c:                         sDynListCurInfo->name, sDynListCurObj->type);
src/goddard/dynlist_proc.c:                         sDynListCurInfo->name, sDynListCurObj->type);
src/goddard/dynlist_proc.c:                         sDynListCurInfo->name, sDynListCurObj->type);
src/goddard/dynlist_proc.c:                         sDynListCurInfo->name, sDynListCurObj->type);
src/goddard/dynlist_proc.c:                         sDynListCurInfo->name, sDynListCurObj->type);
src/goddard/dynlist_proc.c:                         sDynListCurInfo->name, sDynListCurObj->type);
src/goddard/dynlist_proc.c:                         sDynListCurInfo->name, sDynListCurObj->type);
src/goddard/dynlist_proc.c:                         sDynListCurInfo->name, sDynListCurObj->type);
src/goddard/dynlist_proc.c:                         sDynListCurInfo->name, sDynListCurObj->type);
src/goddard/dynlist_proc.c:        valptr = make_valptrs(info->obj, vflags, type, offset);
src/goddard/dynlist_proc.c:                         sDynListCurInfo->name, sDynListCurObj->type);
src/goddard/dynlist_proc.c:                         sDynListCurInfo->name, sDynListCurObj->type);
src/goddard/dynlist_proc.c:                         sDynListCurInfo->name, sDynListCurObj->type);
src/goddard/dynlist_proc.c:    d_link_with_ptr(info->obj);
src/goddard/dynlist_proc.c:    set_cur_dynobj(origInfo->obj);
src/goddard/dynlist_proc.c:                         sDynListCurInfo->name, sDynListCurObj->type);
src/goddard/dynlist_proc.c:                         sDynListCurInfo->name, sDynListCurObj->type);
src/goddard/dynlist_proc.c:                                 "dSetParmf() - unsupported parm.", sDynListCurInfo->name,
src/goddard/dynlist_proc.c:                                 "dSetParmf() - unsupported parm.", sDynListCurInfo->name,
src/goddard/dynlist_proc.c:                                 "dSetParmf() - unsupported parm.", sDynListCurInfo->name,
src/goddard/dynlist_proc.c:                         sDynListCurInfo->name, sDynListCurObj->type);
src/goddard/dynlist_proc.c:                         sDynListCurInfo->name, sDynListCurObj->type);
src/goddard/dynlist_proc.c:                         sDynListCurInfo->name, sDynListCurObj->type);
src/goddard/dynlist_proc.c:                         sDynListCurInfo->name, sDynListCurObj->type);
src/goddard/dynlist_proc.c:                         sDynListCurInfo->name, sDynListCurObj->type);
src/goddard/dynlist_proc.c:                         sDynListCurInfo->name, sDynListCurObj->type);
src/goddard/dynlist_proc.c:                         sDynListCurInfo->name, sDynListCurObj->type);
src/goddard/dynlist_proc.c:                         sDynListCurInfo->name, sDynListCurObj->type);
src/goddard/dynlist_proc.c:                         sDynListCurInfo->name, sDynListCurObj->type);
src/goddard/dynlist_proc.c:                         sDynListCurInfo->name, sDynListCurObj->type);
src/goddard/dynlist_proc.c:                         sDynListCurInfo->name, sDynListCurObj->type);
src/goddard/dynlist_proc.c:                         sDynListCurInfo->name, sDynListCurObj->type);
src/goddard/dynlist_proc.c:                         sDynListCurInfo->name, sDynListCurObj->type);
src/goddard/dynlist_proc.c:                         sDynListCurInfo->name, sDynListCurObj->type);
src/goddard/dynlist_proc.c:                         sDynListCurInfo->name, sDynListCurObj->type);
src/goddard/dynlist_proc.c:                         sDynListCurInfo->name, sDynListCurObj->type);
src/goddard/dynlist_proc.c:                         sDynListCurInfo->name, sDynListCurObj->type);
src/goddard/dynlist_proc.c:                         sDynListCurInfo->name, sDynListCurObj->type);
src/goddard/dynlist_proc.c:                         sDynListCurInfo->name, sDynListCurObj->type);
src/goddard/gd_main.h:// to no-op comma expressions. (IDO doesn't support variadic macros, so
text/us/dialogs.h:Mario--just try to keep\n\
text/us/dialogs.h:Boooooo-m! Here comes\n\
Binary file textures/fire/lll_textures.06800.rgba16.png matches
Binary file textures/mountain/ttm_textures.05800.rgba16.png matches
Binary file textures/outside/castle_grounds_textures.00000.rgba16.png matches
Binary file textures/segment2/segment2.00600.rgba16.png matches
Binary file textures/skyboxes/ccm.png matches
Binary file textures/skyboxes/cloud_floor.png matches
Binary file tools/armips matches
tools/armips.cpp:// Special 0-arg version - MSVC says zero-sized C array in struct is nonstandard
tools/asm_processor/asm-processor.py:            # Similarly, we can't currently deal with pseudo-instructions
tools/audiofile/audiofile.cpp:  We protect your rights with a two-step method: (1) we copyright the
tools/audiofile/audiofile.cpp:	/* Skip zero-length miscellaneous chunks. */
tools/clang-tidy.sh:COMPILER_OPTS="-nostdinc -fno-builtin -std=gnu90 -Iinclude -Isrc -D_LANGUAGE_C"
Binary file tools/ido7.1_compiler/lib/rld matches
Binary file tools/ido7.1_compiler/usr/lib/as0 matches
Binary file tools/ido7.1_compiler/usr/lib/as1 matches
Binary file tools/ido7.1_compiler/usr/lib/cfe matches
Binary file tools/ido7.1_compiler/usr/lib/copt matches
tools/ido7.1_compiler/usr/lib/err.english.cc:in accom, since accom warnings cannot be mapped one-to-one to cfe warnings.
Binary file tools/ido7.1_compiler/usr/lib/libc.so.1 matches
Binary file tools/ido7.1_compiler/usr/lib/uld matches
Binary file tools/libbfd-2.30.so matches
tools/long-render-patch1.diff:-        asFixedPoint = *t1++ * (1 << 16); //! float-to-integer conversion responsible for PU crashes
tools/Makefile:CFLAGS := -I . -Wall -Wextra -Wno-unused-parameter -pedantic -std=c99 -O2 -s
tools/Makefile:	$(CXX) $(CXXFLAGS) -fno-exceptions -fno-rtti -pipe $^ -o $@ -lpthread $(ARMIPS_FLAGS)
tools/Makefile:tabledesign_CFLAGS := -Iaudiofile -Wno-uninitialized
tools/Makefile:vadpcm_enc_CFLAGS := -Wno-unused-result -Wno-uninitialized -Wno-sign-compare -Wno-absolute-value
Binary file tools/mips64-elf-ld matches
Binary file tools/n64graphics matches
Binary file tools/n64graphics_ci matches
tools/pd2.patch:     if ((platform = o->platform) != NULL)
tools/pd2.patch:+        apply_platform_displacement(&sBowserDisplacementInfo, &o->oPosX, &o->oFaceAngleYaw, platform);
tools/pd2.patch:     o->oBowserUnk10E = 0;
tools/pd2.patch:     o->header.gfx.throwMatrix = transform;
tools/pd2.patch:+	s16 yawDifference = *yaw - displaceInfo->prevYaw;
tools/pd2.patch:+	vec3f_sub(posDifference, displaceInfo->prevPos);
tools/pd2.patch:+	if ((platform == displaceInfo->prevPlatform) && (gGlobalTimer == displaceInfo->prevTimer + 1)) {
tools/pd2.patch:+		scale_vec3f(scaledPos, displaceInfo->prevTransformedPos, platform->header.gfx.scale, FALSE);
tools/pd2.patch:+		linear_mtxf_mul_vec3f(*platform->header.gfx.throwMatrix, yawVec, displaceInfo->prevTransformedYawVec);
tools/pd2.patch:+	scale_vec3f(displaceInfo->prevTransformedPos, scaledPos, platform->header.gfx.scale, TRUE);
tools/pd2.patch:+		vec3f_sub(sMarioAmountDisplaced, displaceInfo->prevPos);
tools/pd2.patch:+		if ((platform != displaceInfo->prevPlatform) || (gGlobalTimer != displaceInfo->prevTimer + 1)) {
tools/pd2.patch:+	vec3f_copy(displaceInfo->prevPos, pos);
tools/pd2.patch:+	linear_mtxf_transpose_mul_vec3f(*platform->header.gfx.throwMatrix, displaceInfo->prevTransformedYawVec, yawVec);
tools/pd2.patch:+	displaceInfo->prevYaw = *yaw;
tools/pd2.patch:+	displaceInfo->prevPlatform = platform;
tools/pd2.patch:+	displaceInfo->prevTimer = gGlobalTimer;
tools/sdk-tools/adpcm/Makefile:NATIVE_CFLAGS := -g -Wall -O2 -Wno-unused-result -Wno-uninitialized
tools/sdk-tools/tabledesign/Makefile:NATIVE_CFLAGS := -Wall -Wno-uninitialized -O2
Binary file tools/skyconv matches
tools/skyconv.c:    // just duplicates its second-to-last row
tools/stb/stb_image.h:// and for best performance I may provide less-easy-to-use APIs that give higher
tools/stb/stb_image.h:// (The old do-it-yourself SIMD API is no longer supported in the current
tools/stb/stb_image.h:// and only if iPhone convert-to-rgb processing is on).
tools/stb/stb_image.h:   // @TODO: special case RGB-to-Y (and RGBA-to-YA) for 8-bit-to-16-bit case to keep more precision
tools/stb/stb_image.h:// this is a reduced-precision calculation of YCbCr-to-RGB introduced
tools/stb/stb_image.h:   info->offset = stbi__get32le(s);
tools/stb/stb_image.h:   info->hsz = hsz = stbi__get32le(s);
tools/stb/stb_image.h:   info->mr = info->mg = info->mb = info->ma = 0;
tools/stb/stb_image.h:   info->bpp = stbi__get16le(s);
tools/stb/stb_image.h:         if (info->bpp == 16 || info->bpp == 32) {
tools/stb/stb_image.h:               if (info->bpp == 32) {
tools/stb/stb_image.h:                  info->mr = 0xffu << 16;
tools/stb/stb_image.h:                  info->mg = 0xffu <<  8;
tools/stb/stb_image.h:                  info->mb = 0xffu <<  0;
tools/stb/stb_image.h:                  info->ma = 0xffu << 24;
tools/stb/stb_image.h:                  info->all_a = 0; // if all_a is 0 at end, then we loaded alpha channel but it was all 0
tools/stb/stb_image.h:                  info->mr = 31u << 10;
tools/stb/stb_image.h:                  info->mg = 31u <<  5;
tools/stb/stb_image.h:                  info->mb = 31u <<  0;
tools/stb/stb_image.h:               info->mr = stbi__get32le(s);
tools/stb/stb_image.h:               info->mg = stbi__get32le(s);
tools/stb/stb_image.h:               info->mb = stbi__get32le(s);
tools/stb/stb_image.h:               if (info->mr == info->mg && info->mg == info->mb) {
tools/stb/stb_image.h:         info->mr = stbi__get32le(s);
tools/stb/stb_image.h:         info->mg = stbi__get32le(s);
tools/stb/stb_image.h:         info->mb = stbi__get32le(s);
tools/stb/stb_image.h:         info->ma = stbi__get32le(s);
tools/stb/stb_image.h:         // No-op.
tools/stb/stb_image.h:              cast-to-stbi_uc to fix warnings
tools/stb/stb_image_write.h:   is a rectangle of pixels stored from left-to-right, top-to-bottom.
Binary file tools/tabledesign matches
